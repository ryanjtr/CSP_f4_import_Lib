
test_f4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003168  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  080032f8  080032f8  000042f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003328  08003328  0000506c  2**0
                  CONTENTS
  4 .ARM          00000008  08003328  08003328  00004328  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003330  08003330  0000506c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003330  08003330  00004330  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003334  08003334  00004334  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  08003338  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000506c  2**0
                  CONTENTS
 10 .bss          0000012c  2000006c  2000006c  0000506c  2**2
                  ALLOC
 11 .noinit       000018f4  20000198  20000198  0000506c  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  20001a8c  20001a8c  0000506c  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  0000506c  2**0
                  CONTENTS, READONLY
 14 .debug_info   0000ef30  00000000  00000000  0000509c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00003082  00000000  00000000  00013fcc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000cf0  00000000  00000000  00017050  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000009b2  00000000  00000000  00017d40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000259ba  00000000  00000000  000186f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   000125cc  00000000  00000000  0003e0ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000d6629  00000000  00000000  00050678  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  00126ca1  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00003298  00000000  00000000  00126ce4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 0000004e  00000000  00000000  00129f7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000006c 	.word	0x2000006c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080032e0 	.word	0x080032e0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000070 	.word	0x20000070
 80001cc:	080032e0 	.word	0x080032e0

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80001e4:	f000 b96a 	b.w	80004bc <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9d08      	ldr	r5, [sp, #32]
 8000206:	460c      	mov	r4, r1
 8000208:	2b00      	cmp	r3, #0
 800020a:	d14e      	bne.n	80002aa <__udivmoddi4+0xaa>
 800020c:	4694      	mov	ip, r2
 800020e:	458c      	cmp	ip, r1
 8000210:	4686      	mov	lr, r0
 8000212:	fab2 f282 	clz	r2, r2
 8000216:	d962      	bls.n	80002de <__udivmoddi4+0xde>
 8000218:	b14a      	cbz	r2, 800022e <__udivmoddi4+0x2e>
 800021a:	f1c2 0320 	rsb	r3, r2, #32
 800021e:	4091      	lsls	r1, r2
 8000220:	fa20 f303 	lsr.w	r3, r0, r3
 8000224:	fa0c fc02 	lsl.w	ip, ip, r2
 8000228:	4319      	orrs	r1, r3
 800022a:	fa00 fe02 	lsl.w	lr, r0, r2
 800022e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000232:	fa1f f68c 	uxth.w	r6, ip
 8000236:	fbb1 f4f7 	udiv	r4, r1, r7
 800023a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800023e:	fb07 1114 	mls	r1, r7, r4, r1
 8000242:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000246:	fb04 f106 	mul.w	r1, r4, r6
 800024a:	4299      	cmp	r1, r3
 800024c:	d90a      	bls.n	8000264 <__udivmoddi4+0x64>
 800024e:	eb1c 0303 	adds.w	r3, ip, r3
 8000252:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000256:	f080 8112 	bcs.w	800047e <__udivmoddi4+0x27e>
 800025a:	4299      	cmp	r1, r3
 800025c:	f240 810f 	bls.w	800047e <__udivmoddi4+0x27e>
 8000260:	3c02      	subs	r4, #2
 8000262:	4463      	add	r3, ip
 8000264:	1a59      	subs	r1, r3, r1
 8000266:	fa1f f38e 	uxth.w	r3, lr
 800026a:	fbb1 f0f7 	udiv	r0, r1, r7
 800026e:	fb07 1110 	mls	r1, r7, r0, r1
 8000272:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000276:	fb00 f606 	mul.w	r6, r0, r6
 800027a:	429e      	cmp	r6, r3
 800027c:	d90a      	bls.n	8000294 <__udivmoddi4+0x94>
 800027e:	eb1c 0303 	adds.w	r3, ip, r3
 8000282:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000286:	f080 80fc 	bcs.w	8000482 <__udivmoddi4+0x282>
 800028a:	429e      	cmp	r6, r3
 800028c:	f240 80f9 	bls.w	8000482 <__udivmoddi4+0x282>
 8000290:	4463      	add	r3, ip
 8000292:	3802      	subs	r0, #2
 8000294:	1b9b      	subs	r3, r3, r6
 8000296:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800029a:	2100      	movs	r1, #0
 800029c:	b11d      	cbz	r5, 80002a6 <__udivmoddi4+0xa6>
 800029e:	40d3      	lsrs	r3, r2
 80002a0:	2200      	movs	r2, #0
 80002a2:	e9c5 3200 	strd	r3, r2, [r5]
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	428b      	cmp	r3, r1
 80002ac:	d905      	bls.n	80002ba <__udivmoddi4+0xba>
 80002ae:	b10d      	cbz	r5, 80002b4 <__udivmoddi4+0xb4>
 80002b0:	e9c5 0100 	strd	r0, r1, [r5]
 80002b4:	2100      	movs	r1, #0
 80002b6:	4608      	mov	r0, r1
 80002b8:	e7f5      	b.n	80002a6 <__udivmoddi4+0xa6>
 80002ba:	fab3 f183 	clz	r1, r3
 80002be:	2900      	cmp	r1, #0
 80002c0:	d146      	bne.n	8000350 <__udivmoddi4+0x150>
 80002c2:	42a3      	cmp	r3, r4
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xcc>
 80002c6:	4290      	cmp	r0, r2
 80002c8:	f0c0 80f0 	bcc.w	80004ac <__udivmoddi4+0x2ac>
 80002cc:	1a86      	subs	r6, r0, r2
 80002ce:	eb64 0303 	sbc.w	r3, r4, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	2d00      	cmp	r5, #0
 80002d6:	d0e6      	beq.n	80002a6 <__udivmoddi4+0xa6>
 80002d8:	e9c5 6300 	strd	r6, r3, [r5]
 80002dc:	e7e3      	b.n	80002a6 <__udivmoddi4+0xa6>
 80002de:	2a00      	cmp	r2, #0
 80002e0:	f040 8090 	bne.w	8000404 <__udivmoddi4+0x204>
 80002e4:	eba1 040c 	sub.w	r4, r1, ip
 80002e8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002ec:	fa1f f78c 	uxth.w	r7, ip
 80002f0:	2101      	movs	r1, #1
 80002f2:	fbb4 f6f8 	udiv	r6, r4, r8
 80002f6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fa:	fb08 4416 	mls	r4, r8, r6, r4
 80002fe:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000302:	fb07 f006 	mul.w	r0, r7, r6
 8000306:	4298      	cmp	r0, r3
 8000308:	d908      	bls.n	800031c <__udivmoddi4+0x11c>
 800030a:	eb1c 0303 	adds.w	r3, ip, r3
 800030e:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x11a>
 8000314:	4298      	cmp	r0, r3
 8000316:	f200 80cd 	bhi.w	80004b4 <__udivmoddi4+0x2b4>
 800031a:	4626      	mov	r6, r4
 800031c:	1a1c      	subs	r4, r3, r0
 800031e:	fa1f f38e 	uxth.w	r3, lr
 8000322:	fbb4 f0f8 	udiv	r0, r4, r8
 8000326:	fb08 4410 	mls	r4, r8, r0, r4
 800032a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800032e:	fb00 f707 	mul.w	r7, r0, r7
 8000332:	429f      	cmp	r7, r3
 8000334:	d908      	bls.n	8000348 <__udivmoddi4+0x148>
 8000336:	eb1c 0303 	adds.w	r3, ip, r3
 800033a:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 800033e:	d202      	bcs.n	8000346 <__udivmoddi4+0x146>
 8000340:	429f      	cmp	r7, r3
 8000342:	f200 80b0 	bhi.w	80004a6 <__udivmoddi4+0x2a6>
 8000346:	4620      	mov	r0, r4
 8000348:	1bdb      	subs	r3, r3, r7
 800034a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800034e:	e7a5      	b.n	800029c <__udivmoddi4+0x9c>
 8000350:	f1c1 0620 	rsb	r6, r1, #32
 8000354:	408b      	lsls	r3, r1
 8000356:	fa22 f706 	lsr.w	r7, r2, r6
 800035a:	431f      	orrs	r7, r3
 800035c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000360:	fa04 f301 	lsl.w	r3, r4, r1
 8000364:	ea43 030c 	orr.w	r3, r3, ip
 8000368:	40f4      	lsrs	r4, r6
 800036a:	fa00 f801 	lsl.w	r8, r0, r1
 800036e:	0c38      	lsrs	r0, r7, #16
 8000370:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000374:	fbb4 fef0 	udiv	lr, r4, r0
 8000378:	fa1f fc87 	uxth.w	ip, r7
 800037c:	fb00 441e 	mls	r4, r0, lr, r4
 8000380:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000384:	fb0e f90c 	mul.w	r9, lr, ip
 8000388:	45a1      	cmp	r9, r4
 800038a:	fa02 f201 	lsl.w	r2, r2, r1
 800038e:	d90a      	bls.n	80003a6 <__udivmoddi4+0x1a6>
 8000390:	193c      	adds	r4, r7, r4
 8000392:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000396:	f080 8084 	bcs.w	80004a2 <__udivmoddi4+0x2a2>
 800039a:	45a1      	cmp	r9, r4
 800039c:	f240 8081 	bls.w	80004a2 <__udivmoddi4+0x2a2>
 80003a0:	f1ae 0e02 	sub.w	lr, lr, #2
 80003a4:	443c      	add	r4, r7
 80003a6:	eba4 0409 	sub.w	r4, r4, r9
 80003aa:	fa1f f983 	uxth.w	r9, r3
 80003ae:	fbb4 f3f0 	udiv	r3, r4, r0
 80003b2:	fb00 4413 	mls	r4, r0, r3, r4
 80003b6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ba:	fb03 fc0c 	mul.w	ip, r3, ip
 80003be:	45a4      	cmp	ip, r4
 80003c0:	d907      	bls.n	80003d2 <__udivmoddi4+0x1d2>
 80003c2:	193c      	adds	r4, r7, r4
 80003c4:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80003c8:	d267      	bcs.n	800049a <__udivmoddi4+0x29a>
 80003ca:	45a4      	cmp	ip, r4
 80003cc:	d965      	bls.n	800049a <__udivmoddi4+0x29a>
 80003ce:	3b02      	subs	r3, #2
 80003d0:	443c      	add	r4, r7
 80003d2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003d6:	fba0 9302 	umull	r9, r3, r0, r2
 80003da:	eba4 040c 	sub.w	r4, r4, ip
 80003de:	429c      	cmp	r4, r3
 80003e0:	46ce      	mov	lr, r9
 80003e2:	469c      	mov	ip, r3
 80003e4:	d351      	bcc.n	800048a <__udivmoddi4+0x28a>
 80003e6:	d04e      	beq.n	8000486 <__udivmoddi4+0x286>
 80003e8:	b155      	cbz	r5, 8000400 <__udivmoddi4+0x200>
 80003ea:	ebb8 030e 	subs.w	r3, r8, lr
 80003ee:	eb64 040c 	sbc.w	r4, r4, ip
 80003f2:	fa04 f606 	lsl.w	r6, r4, r6
 80003f6:	40cb      	lsrs	r3, r1
 80003f8:	431e      	orrs	r6, r3
 80003fa:	40cc      	lsrs	r4, r1
 80003fc:	e9c5 6400 	strd	r6, r4, [r5]
 8000400:	2100      	movs	r1, #0
 8000402:	e750      	b.n	80002a6 <__udivmoddi4+0xa6>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f103 	lsr.w	r1, r0, r3
 800040c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000410:	fa24 f303 	lsr.w	r3, r4, r3
 8000414:	4094      	lsls	r4, r2
 8000416:	430c      	orrs	r4, r1
 8000418:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800041c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000420:	fa1f f78c 	uxth.w	r7, ip
 8000424:	fbb3 f0f8 	udiv	r0, r3, r8
 8000428:	fb08 3110 	mls	r1, r8, r0, r3
 800042c:	0c23      	lsrs	r3, r4, #16
 800042e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000432:	fb00 f107 	mul.w	r1, r0, r7
 8000436:	4299      	cmp	r1, r3
 8000438:	d908      	bls.n	800044c <__udivmoddi4+0x24c>
 800043a:	eb1c 0303 	adds.w	r3, ip, r3
 800043e:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000442:	d22c      	bcs.n	800049e <__udivmoddi4+0x29e>
 8000444:	4299      	cmp	r1, r3
 8000446:	d92a      	bls.n	800049e <__udivmoddi4+0x29e>
 8000448:	3802      	subs	r0, #2
 800044a:	4463      	add	r3, ip
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b2a4      	uxth	r4, r4
 8000450:	fbb3 f1f8 	udiv	r1, r3, r8
 8000454:	fb08 3311 	mls	r3, r8, r1, r3
 8000458:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800045c:	fb01 f307 	mul.w	r3, r1, r7
 8000460:	42a3      	cmp	r3, r4
 8000462:	d908      	bls.n	8000476 <__udivmoddi4+0x276>
 8000464:	eb1c 0404 	adds.w	r4, ip, r4
 8000468:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800046c:	d213      	bcs.n	8000496 <__udivmoddi4+0x296>
 800046e:	42a3      	cmp	r3, r4
 8000470:	d911      	bls.n	8000496 <__udivmoddi4+0x296>
 8000472:	3902      	subs	r1, #2
 8000474:	4464      	add	r4, ip
 8000476:	1ae4      	subs	r4, r4, r3
 8000478:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800047c:	e739      	b.n	80002f2 <__udivmoddi4+0xf2>
 800047e:	4604      	mov	r4, r0
 8000480:	e6f0      	b.n	8000264 <__udivmoddi4+0x64>
 8000482:	4608      	mov	r0, r1
 8000484:	e706      	b.n	8000294 <__udivmoddi4+0x94>
 8000486:	45c8      	cmp	r8, r9
 8000488:	d2ae      	bcs.n	80003e8 <__udivmoddi4+0x1e8>
 800048a:	ebb9 0e02 	subs.w	lr, r9, r2
 800048e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000492:	3801      	subs	r0, #1
 8000494:	e7a8      	b.n	80003e8 <__udivmoddi4+0x1e8>
 8000496:	4631      	mov	r1, r6
 8000498:	e7ed      	b.n	8000476 <__udivmoddi4+0x276>
 800049a:	4603      	mov	r3, r0
 800049c:	e799      	b.n	80003d2 <__udivmoddi4+0x1d2>
 800049e:	4630      	mov	r0, r6
 80004a0:	e7d4      	b.n	800044c <__udivmoddi4+0x24c>
 80004a2:	46d6      	mov	lr, sl
 80004a4:	e77f      	b.n	80003a6 <__udivmoddi4+0x1a6>
 80004a6:	4463      	add	r3, ip
 80004a8:	3802      	subs	r0, #2
 80004aa:	e74d      	b.n	8000348 <__udivmoddi4+0x148>
 80004ac:	4606      	mov	r6, r0
 80004ae:	4623      	mov	r3, r4
 80004b0:	4608      	mov	r0, r1
 80004b2:	e70f      	b.n	80002d4 <__udivmoddi4+0xd4>
 80004b4:	3e02      	subs	r6, #2
 80004b6:	4463      	add	r3, ip
 80004b8:	e730      	b.n	800031c <__udivmoddi4+0x11c>
 80004ba:	bf00      	nop

080004bc <__aeabi_idiv0>:
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop

080004c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	b094      	sub	sp, #80	@ 0x50
 80004c4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004c6:	f000 f9b5 	bl	8000834 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004ca:	f000 f829 	bl	8000520 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004ce:	f000 f8bb 	bl	8000648 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80004d2:	f000 f88f 	bl	80005f4 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  csp_usart_conf_t uart_conf;
  uart_conf.baudrate=115200;
 80004d6:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 80004da:	64bb      	str	r3, [r7, #72]	@ 0x48
  uart_conf.
  databits=8;
 80004dc:	2308      	movs	r3, #8
 80004de:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
  uart_conf.device=&huart1;
 80004e2:	4b0c      	ldr	r3, [pc, #48]	@ (8000514 <main+0x54>)
 80004e4:	647b      	str	r3, [r7, #68]	@ 0x44
  uart_conf.paritysetting=1;
 80004e6:	2301      	movs	r3, #1
 80004e8:	f887 304e 	strb.w	r3, [r7, #78]	@ 0x4e
  uart_conf.stopbits=1;
 80004ec:	2301      	movs	r3, #1
 80004ee:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d

  /* Init CSP */
  csp_init();
 80004f2:	f002 fdfd 	bl	80030f0 <csp_init>

  /* Add interface(s) */
  csp_iface_t CSP_IF_CAN = {
 80004f6:	463b      	mov	r3, r7
 80004f8:	2244      	movs	r2, #68	@ 0x44
 80004fa:	2100      	movs	r1, #0
 80004fc:	4618      	mov	r0, r3
 80004fe:	f002 fea3 	bl	8003248 <memset>
 8000502:	4b05      	ldr	r3, [pc, #20]	@ (8000518 <main+0x58>)
 8000504:	607b      	str	r3, [r7, #4]
 8000506:	4b03      	ldr	r3, [pc, #12]	@ (8000514 <main+0x54>)
 8000508:	60fb      	str	r3, [r7, #12]
 800050a:	4b04      	ldr	r3, [pc, #16]	@ (800051c <main+0x5c>)
 800050c:	613b      	str	r3, [r7, #16]
//  xTaskCreate(Status_Led_Task, "statusLEDTask", configMINIMAL_STACK_SIZE * 10, NULL, 2, &status_task_Handle);
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800050e:	bf00      	nop
 8000510:	e7fd      	b.n	800050e <main+0x4e>
 8000512:	bf00      	nop
 8000514:	20000088 	.word	0x20000088
 8000518:	080032f8 	.word	0x080032f8
 800051c:	08002ddd 	.word	0x08002ddd

08000520 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000520:	b580      	push	{r7, lr}
 8000522:	b094      	sub	sp, #80	@ 0x50
 8000524:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000526:	f107 0320 	add.w	r3, r7, #32
 800052a:	2230      	movs	r2, #48	@ 0x30
 800052c:	2100      	movs	r1, #0
 800052e:	4618      	mov	r0, r3
 8000530:	f002 fe8a 	bl	8003248 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000534:	f107 030c 	add.w	r3, r7, #12
 8000538:	2200      	movs	r2, #0
 800053a:	601a      	str	r2, [r3, #0]
 800053c:	605a      	str	r2, [r3, #4]
 800053e:	609a      	str	r2, [r3, #8]
 8000540:	60da      	str	r2, [r3, #12]
 8000542:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000544:	2300      	movs	r3, #0
 8000546:	60bb      	str	r3, [r7, #8]
 8000548:	4b28      	ldr	r3, [pc, #160]	@ (80005ec <SystemClock_Config+0xcc>)
 800054a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800054c:	4a27      	ldr	r2, [pc, #156]	@ (80005ec <SystemClock_Config+0xcc>)
 800054e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000552:	6413      	str	r3, [r2, #64]	@ 0x40
 8000554:	4b25      	ldr	r3, [pc, #148]	@ (80005ec <SystemClock_Config+0xcc>)
 8000556:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000558:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800055c:	60bb      	str	r3, [r7, #8]
 800055e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000560:	2300      	movs	r3, #0
 8000562:	607b      	str	r3, [r7, #4]
 8000564:	4b22      	ldr	r3, [pc, #136]	@ (80005f0 <SystemClock_Config+0xd0>)
 8000566:	681b      	ldr	r3, [r3, #0]
 8000568:	4a21      	ldr	r2, [pc, #132]	@ (80005f0 <SystemClock_Config+0xd0>)
 800056a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800056e:	6013      	str	r3, [r2, #0]
 8000570:	4b1f      	ldr	r3, [pc, #124]	@ (80005f0 <SystemClock_Config+0xd0>)
 8000572:	681b      	ldr	r3, [r3, #0]
 8000574:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000578:	607b      	str	r3, [r7, #4]
 800057a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800057c:	2302      	movs	r3, #2
 800057e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000580:	2301      	movs	r3, #1
 8000582:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000584:	2310      	movs	r3, #16
 8000586:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000588:	2302      	movs	r3, #2
 800058a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800058c:	2300      	movs	r3, #0
 800058e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000590:	2308      	movs	r3, #8
 8000592:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 64;
 8000594:	2340      	movs	r3, #64	@ 0x40
 8000596:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000598:	2302      	movs	r3, #2
 800059a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800059c:	2304      	movs	r3, #4
 800059e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005a0:	f107 0320 	add.w	r3, r7, #32
 80005a4:	4618      	mov	r0, r3
 80005a6:	f000 fc25 	bl	8000df4 <HAL_RCC_OscConfig>
 80005aa:	4603      	mov	r3, r0
 80005ac:	2b00      	cmp	r3, #0
 80005ae:	d001      	beq.n	80005b4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80005b0:	f000 f872 	bl	8000698 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005b4:	230f      	movs	r3, #15
 80005b6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005b8:	2302      	movs	r3, #2
 80005ba:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV4;
 80005bc:	2390      	movs	r3, #144	@ 0x90
 80005be:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80005c0:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80005c4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80005c6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80005ca:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80005cc:	f107 030c 	add.w	r3, r7, #12
 80005d0:	2100      	movs	r1, #0
 80005d2:	4618      	mov	r0, r3
 80005d4:	f000 fe86 	bl	80012e4 <HAL_RCC_ClockConfig>
 80005d8:	4603      	mov	r3, r0
 80005da:	2b00      	cmp	r3, #0
 80005dc:	d001      	beq.n	80005e2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80005de:	f000 f85b 	bl	8000698 <Error_Handler>
  }
}
 80005e2:	bf00      	nop
 80005e4:	3750      	adds	r7, #80	@ 0x50
 80005e6:	46bd      	mov	sp, r7
 80005e8:	bd80      	pop	{r7, pc}
 80005ea:	bf00      	nop
 80005ec:	40023800 	.word	0x40023800
 80005f0:	40007000 	.word	0x40007000

080005f4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80005f8:	4b11      	ldr	r3, [pc, #68]	@ (8000640 <MX_USART1_UART_Init+0x4c>)
 80005fa:	4a12      	ldr	r2, [pc, #72]	@ (8000644 <MX_USART1_UART_Init+0x50>)
 80005fc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80005fe:	4b10      	ldr	r3, [pc, #64]	@ (8000640 <MX_USART1_UART_Init+0x4c>)
 8000600:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000604:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000606:	4b0e      	ldr	r3, [pc, #56]	@ (8000640 <MX_USART1_UART_Init+0x4c>)
 8000608:	2200      	movs	r2, #0
 800060a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800060c:	4b0c      	ldr	r3, [pc, #48]	@ (8000640 <MX_USART1_UART_Init+0x4c>)
 800060e:	2200      	movs	r2, #0
 8000610:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000612:	4b0b      	ldr	r3, [pc, #44]	@ (8000640 <MX_USART1_UART_Init+0x4c>)
 8000614:	2200      	movs	r2, #0
 8000616:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000618:	4b09      	ldr	r3, [pc, #36]	@ (8000640 <MX_USART1_UART_Init+0x4c>)
 800061a:	220c      	movs	r2, #12
 800061c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800061e:	4b08      	ldr	r3, [pc, #32]	@ (8000640 <MX_USART1_UART_Init+0x4c>)
 8000620:	2200      	movs	r2, #0
 8000622:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000624:	4b06      	ldr	r3, [pc, #24]	@ (8000640 <MX_USART1_UART_Init+0x4c>)
 8000626:	2200      	movs	r2, #0
 8000628:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800062a:	4805      	ldr	r0, [pc, #20]	@ (8000640 <MX_USART1_UART_Init+0x4c>)
 800062c:	f001 f87a 	bl	8001724 <HAL_UART_Init>
 8000630:	4603      	mov	r3, r0
 8000632:	2b00      	cmp	r3, #0
 8000634:	d001      	beq.n	800063a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000636:	f000 f82f 	bl	8000698 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800063a:	bf00      	nop
 800063c:	bd80      	pop	{r7, pc}
 800063e:	bf00      	nop
 8000640:	20000088 	.word	0x20000088
 8000644:	40011000 	.word	0x40011000

08000648 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000648:	b480      	push	{r7}
 800064a:	b083      	sub	sp, #12
 800064c:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800064e:	2300      	movs	r3, #0
 8000650:	607b      	str	r3, [r7, #4]
 8000652:	4b10      	ldr	r3, [pc, #64]	@ (8000694 <MX_GPIO_Init+0x4c>)
 8000654:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000656:	4a0f      	ldr	r2, [pc, #60]	@ (8000694 <MX_GPIO_Init+0x4c>)
 8000658:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800065c:	6313      	str	r3, [r2, #48]	@ 0x30
 800065e:	4b0d      	ldr	r3, [pc, #52]	@ (8000694 <MX_GPIO_Init+0x4c>)
 8000660:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000662:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000666:	607b      	str	r3, [r7, #4]
 8000668:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800066a:	2300      	movs	r3, #0
 800066c:	603b      	str	r3, [r7, #0]
 800066e:	4b09      	ldr	r3, [pc, #36]	@ (8000694 <MX_GPIO_Init+0x4c>)
 8000670:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000672:	4a08      	ldr	r2, [pc, #32]	@ (8000694 <MX_GPIO_Init+0x4c>)
 8000674:	f043 0301 	orr.w	r3, r3, #1
 8000678:	6313      	str	r3, [r2, #48]	@ 0x30
 800067a:	4b06      	ldr	r3, [pc, #24]	@ (8000694 <MX_GPIO_Init+0x4c>)
 800067c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800067e:	f003 0301 	and.w	r3, r3, #1
 8000682:	603b      	str	r3, [r7, #0]
 8000684:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000686:	bf00      	nop
 8000688:	370c      	adds	r7, #12
 800068a:	46bd      	mov	sp, r7
 800068c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000690:	4770      	bx	lr
 8000692:	bf00      	nop
 8000694:	40023800 	.word	0x40023800

08000698 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000698:	b480      	push	{r7}
 800069a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800069c:	b672      	cpsid	i
}
 800069e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006a0:	bf00      	nop
 80006a2:	e7fd      	b.n	80006a0 <Error_Handler+0x8>

080006a4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006a4:	b480      	push	{r7}
 80006a6:	b083      	sub	sp, #12
 80006a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006aa:	2300      	movs	r3, #0
 80006ac:	607b      	str	r3, [r7, #4]
 80006ae:	4b10      	ldr	r3, [pc, #64]	@ (80006f0 <HAL_MspInit+0x4c>)
 80006b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80006b2:	4a0f      	ldr	r2, [pc, #60]	@ (80006f0 <HAL_MspInit+0x4c>)
 80006b4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80006b8:	6453      	str	r3, [r2, #68]	@ 0x44
 80006ba:	4b0d      	ldr	r3, [pc, #52]	@ (80006f0 <HAL_MspInit+0x4c>)
 80006bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80006be:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80006c2:	607b      	str	r3, [r7, #4]
 80006c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006c6:	2300      	movs	r3, #0
 80006c8:	603b      	str	r3, [r7, #0]
 80006ca:	4b09      	ldr	r3, [pc, #36]	@ (80006f0 <HAL_MspInit+0x4c>)
 80006cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006ce:	4a08      	ldr	r2, [pc, #32]	@ (80006f0 <HAL_MspInit+0x4c>)
 80006d0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80006d4:	6413      	str	r3, [r2, #64]	@ 0x40
 80006d6:	4b06      	ldr	r3, [pc, #24]	@ (80006f0 <HAL_MspInit+0x4c>)
 80006d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006da:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80006de:	603b      	str	r3, [r7, #0]
 80006e0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006e2:	bf00      	nop
 80006e4:	370c      	adds	r7, #12
 80006e6:	46bd      	mov	sp, r7
 80006e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ec:	4770      	bx	lr
 80006ee:	bf00      	nop
 80006f0:	40023800 	.word	0x40023800

080006f4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b08a      	sub	sp, #40	@ 0x28
 80006f8:	af00      	add	r7, sp, #0
 80006fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006fc:	f107 0314 	add.w	r3, r7, #20
 8000700:	2200      	movs	r2, #0
 8000702:	601a      	str	r2, [r3, #0]
 8000704:	605a      	str	r2, [r3, #4]
 8000706:	609a      	str	r2, [r3, #8]
 8000708:	60da      	str	r2, [r3, #12]
 800070a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	4a19      	ldr	r2, [pc, #100]	@ (8000778 <HAL_UART_MspInit+0x84>)
 8000712:	4293      	cmp	r3, r2
 8000714:	d12c      	bne.n	8000770 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000716:	2300      	movs	r3, #0
 8000718:	613b      	str	r3, [r7, #16]
 800071a:	4b18      	ldr	r3, [pc, #96]	@ (800077c <HAL_UART_MspInit+0x88>)
 800071c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800071e:	4a17      	ldr	r2, [pc, #92]	@ (800077c <HAL_UART_MspInit+0x88>)
 8000720:	f043 0310 	orr.w	r3, r3, #16
 8000724:	6453      	str	r3, [r2, #68]	@ 0x44
 8000726:	4b15      	ldr	r3, [pc, #84]	@ (800077c <HAL_UART_MspInit+0x88>)
 8000728:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800072a:	f003 0310 	and.w	r3, r3, #16
 800072e:	613b      	str	r3, [r7, #16]
 8000730:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000732:	2300      	movs	r3, #0
 8000734:	60fb      	str	r3, [r7, #12]
 8000736:	4b11      	ldr	r3, [pc, #68]	@ (800077c <HAL_UART_MspInit+0x88>)
 8000738:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800073a:	4a10      	ldr	r2, [pc, #64]	@ (800077c <HAL_UART_MspInit+0x88>)
 800073c:	f043 0301 	orr.w	r3, r3, #1
 8000740:	6313      	str	r3, [r2, #48]	@ 0x30
 8000742:	4b0e      	ldr	r3, [pc, #56]	@ (800077c <HAL_UART_MspInit+0x88>)
 8000744:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000746:	f003 0301 	and.w	r3, r3, #1
 800074a:	60fb      	str	r3, [r7, #12]
 800074c:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800074e:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000752:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000754:	2302      	movs	r3, #2
 8000756:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000758:	2300      	movs	r3, #0
 800075a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800075c:	2303      	movs	r3, #3
 800075e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000760:	2307      	movs	r3, #7
 8000762:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000764:	f107 0314 	add.w	r3, r7, #20
 8000768:	4619      	mov	r1, r3
 800076a:	4805      	ldr	r0, [pc, #20]	@ (8000780 <HAL_UART_MspInit+0x8c>)
 800076c:	f000 f9a6 	bl	8000abc <HAL_GPIO_Init>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8000770:	bf00      	nop
 8000772:	3728      	adds	r7, #40	@ 0x28
 8000774:	46bd      	mov	sp, r7
 8000776:	bd80      	pop	{r7, pc}
 8000778:	40011000 	.word	0x40011000
 800077c:	40023800 	.word	0x40023800
 8000780:	40020000 	.word	0x40020000

08000784 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000784:	b480      	push	{r7}
 8000786:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000788:	bf00      	nop
 800078a:	e7fd      	b.n	8000788 <NMI_Handler+0x4>

0800078c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800078c:	b480      	push	{r7}
 800078e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000790:	bf00      	nop
 8000792:	e7fd      	b.n	8000790 <HardFault_Handler+0x4>

08000794 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000794:	b480      	push	{r7}
 8000796:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000798:	bf00      	nop
 800079a:	e7fd      	b.n	8000798 <MemManage_Handler+0x4>

0800079c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800079c:	b480      	push	{r7}
 800079e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80007a0:	bf00      	nop
 80007a2:	e7fd      	b.n	80007a0 <BusFault_Handler+0x4>

080007a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80007a4:	b480      	push	{r7}
 80007a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007a8:	bf00      	nop
 80007aa:	e7fd      	b.n	80007a8 <UsageFault_Handler+0x4>

080007ac <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80007ac:	b480      	push	{r7}
 80007ae:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007b0:	bf00      	nop
 80007b2:	46bd      	mov	sp, r7
 80007b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b8:	4770      	bx	lr
	...

080007bc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80007bc:	b480      	push	{r7}
 80007be:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80007c0:	4b06      	ldr	r3, [pc, #24]	@ (80007dc <SystemInit+0x20>)
 80007c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80007c6:	4a05      	ldr	r2, [pc, #20]	@ (80007dc <SystemInit+0x20>)
 80007c8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80007cc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80007d0:	bf00      	nop
 80007d2:	46bd      	mov	sp, r7
 80007d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d8:	4770      	bx	lr
 80007da:	bf00      	nop
 80007dc:	e000ed00 	.word	0xe000ed00

080007e0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80007e0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000818 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80007e4:	f7ff ffea 	bl	80007bc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80007e8:	480c      	ldr	r0, [pc, #48]	@ (800081c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80007ea:	490d      	ldr	r1, [pc, #52]	@ (8000820 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80007ec:	4a0d      	ldr	r2, [pc, #52]	@ (8000824 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80007ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80007f0:	e002      	b.n	80007f8 <LoopCopyDataInit>

080007f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80007f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80007f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80007f6:	3304      	adds	r3, #4

080007f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80007f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80007fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80007fc:	d3f9      	bcc.n	80007f2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80007fe:	4a0a      	ldr	r2, [pc, #40]	@ (8000828 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000800:	4c0a      	ldr	r4, [pc, #40]	@ (800082c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000802:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000804:	e001      	b.n	800080a <LoopFillZerobss>

08000806 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000806:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000808:	3204      	adds	r2, #4

0800080a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800080a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800080c:	d3fb      	bcc.n	8000806 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800080e:	f002 fd35 	bl	800327c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000812:	f7ff fe55 	bl	80004c0 <main>
  bx  lr    
 8000816:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000818:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800081c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000820:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8000824:	08003338 	.word	0x08003338
  ldr r2, =_sbss
 8000828:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 800082c:	20000198 	.word	0x20000198

08000830 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000830:	e7fe      	b.n	8000830 <ADC_IRQHandler>
	...

08000834 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000838:	4b0e      	ldr	r3, [pc, #56]	@ (8000874 <HAL_Init+0x40>)
 800083a:	681b      	ldr	r3, [r3, #0]
 800083c:	4a0d      	ldr	r2, [pc, #52]	@ (8000874 <HAL_Init+0x40>)
 800083e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000842:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000844:	4b0b      	ldr	r3, [pc, #44]	@ (8000874 <HAL_Init+0x40>)
 8000846:	681b      	ldr	r3, [r3, #0]
 8000848:	4a0a      	ldr	r2, [pc, #40]	@ (8000874 <HAL_Init+0x40>)
 800084a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800084e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000850:	4b08      	ldr	r3, [pc, #32]	@ (8000874 <HAL_Init+0x40>)
 8000852:	681b      	ldr	r3, [r3, #0]
 8000854:	4a07      	ldr	r2, [pc, #28]	@ (8000874 <HAL_Init+0x40>)
 8000856:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800085a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800085c:	2003      	movs	r0, #3
 800085e:	f000 f8f9 	bl	8000a54 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000862:	200f      	movs	r0, #15
 8000864:	f000 f808 	bl	8000878 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000868:	f7ff ff1c 	bl	80006a4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800086c:	2300      	movs	r3, #0
}
 800086e:	4618      	mov	r0, r3
 8000870:	bd80      	pop	{r7, pc}
 8000872:	bf00      	nop
 8000874:	40023c00 	.word	0x40023c00

08000878 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	b082      	sub	sp, #8
 800087c:	af00      	add	r7, sp, #0
 800087e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000880:	4b12      	ldr	r3, [pc, #72]	@ (80008cc <HAL_InitTick+0x54>)
 8000882:	681a      	ldr	r2, [r3, #0]
 8000884:	4b12      	ldr	r3, [pc, #72]	@ (80008d0 <HAL_InitTick+0x58>)
 8000886:	781b      	ldrb	r3, [r3, #0]
 8000888:	4619      	mov	r1, r3
 800088a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800088e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000892:	fbb2 f3f3 	udiv	r3, r2, r3
 8000896:	4618      	mov	r0, r3
 8000898:	f000 f903 	bl	8000aa2 <HAL_SYSTICK_Config>
 800089c:	4603      	mov	r3, r0
 800089e:	2b00      	cmp	r3, #0
 80008a0:	d001      	beq.n	80008a6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80008a2:	2301      	movs	r3, #1
 80008a4:	e00e      	b.n	80008c4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	2b0f      	cmp	r3, #15
 80008aa:	d80a      	bhi.n	80008c2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80008ac:	2200      	movs	r2, #0
 80008ae:	6879      	ldr	r1, [r7, #4]
 80008b0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80008b4:	f000 f8d9 	bl	8000a6a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80008b8:	4a06      	ldr	r2, [pc, #24]	@ (80008d4 <HAL_InitTick+0x5c>)
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80008be:	2300      	movs	r3, #0
 80008c0:	e000      	b.n	80008c4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80008c2:	2301      	movs	r3, #1
}
 80008c4:	4618      	mov	r0, r3
 80008c6:	3708      	adds	r7, #8
 80008c8:	46bd      	mov	sp, r7
 80008ca:	bd80      	pop	{r7, pc}
 80008cc:	20000000 	.word	0x20000000
 80008d0:	20000008 	.word	0x20000008
 80008d4:	20000004 	.word	0x20000004

080008d8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80008d8:	b480      	push	{r7}
 80008da:	af00      	add	r7, sp, #0
  return uwTick;
 80008dc:	4b03      	ldr	r3, [pc, #12]	@ (80008ec <HAL_GetTick+0x14>)
 80008de:	681b      	ldr	r3, [r3, #0]
}
 80008e0:	4618      	mov	r0, r3
 80008e2:	46bd      	mov	sp, r7
 80008e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e8:	4770      	bx	lr
 80008ea:	bf00      	nop
 80008ec:	200000d0 	.word	0x200000d0

080008f0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008f0:	b480      	push	{r7}
 80008f2:	b085      	sub	sp, #20
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	f003 0307 	and.w	r3, r3, #7
 80008fe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000900:	4b0c      	ldr	r3, [pc, #48]	@ (8000934 <__NVIC_SetPriorityGrouping+0x44>)
 8000902:	68db      	ldr	r3, [r3, #12]
 8000904:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000906:	68ba      	ldr	r2, [r7, #8]
 8000908:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800090c:	4013      	ands	r3, r2
 800090e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000910:	68fb      	ldr	r3, [r7, #12]
 8000912:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000914:	68bb      	ldr	r3, [r7, #8]
 8000916:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000918:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800091c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000920:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000922:	4a04      	ldr	r2, [pc, #16]	@ (8000934 <__NVIC_SetPriorityGrouping+0x44>)
 8000924:	68bb      	ldr	r3, [r7, #8]
 8000926:	60d3      	str	r3, [r2, #12]
}
 8000928:	bf00      	nop
 800092a:	3714      	adds	r7, #20
 800092c:	46bd      	mov	sp, r7
 800092e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000932:	4770      	bx	lr
 8000934:	e000ed00 	.word	0xe000ed00

08000938 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000938:	b480      	push	{r7}
 800093a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800093c:	4b04      	ldr	r3, [pc, #16]	@ (8000950 <__NVIC_GetPriorityGrouping+0x18>)
 800093e:	68db      	ldr	r3, [r3, #12]
 8000940:	0a1b      	lsrs	r3, r3, #8
 8000942:	f003 0307 	and.w	r3, r3, #7
}
 8000946:	4618      	mov	r0, r3
 8000948:	46bd      	mov	sp, r7
 800094a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800094e:	4770      	bx	lr
 8000950:	e000ed00 	.word	0xe000ed00

08000954 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000954:	b480      	push	{r7}
 8000956:	b083      	sub	sp, #12
 8000958:	af00      	add	r7, sp, #0
 800095a:	4603      	mov	r3, r0
 800095c:	6039      	str	r1, [r7, #0]
 800095e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000960:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000964:	2b00      	cmp	r3, #0
 8000966:	db0a      	blt.n	800097e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000968:	683b      	ldr	r3, [r7, #0]
 800096a:	b2da      	uxtb	r2, r3
 800096c:	490c      	ldr	r1, [pc, #48]	@ (80009a0 <__NVIC_SetPriority+0x4c>)
 800096e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000972:	0112      	lsls	r2, r2, #4
 8000974:	b2d2      	uxtb	r2, r2
 8000976:	440b      	add	r3, r1
 8000978:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800097c:	e00a      	b.n	8000994 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800097e:	683b      	ldr	r3, [r7, #0]
 8000980:	b2da      	uxtb	r2, r3
 8000982:	4908      	ldr	r1, [pc, #32]	@ (80009a4 <__NVIC_SetPriority+0x50>)
 8000984:	79fb      	ldrb	r3, [r7, #7]
 8000986:	f003 030f 	and.w	r3, r3, #15
 800098a:	3b04      	subs	r3, #4
 800098c:	0112      	lsls	r2, r2, #4
 800098e:	b2d2      	uxtb	r2, r2
 8000990:	440b      	add	r3, r1
 8000992:	761a      	strb	r2, [r3, #24]
}
 8000994:	bf00      	nop
 8000996:	370c      	adds	r7, #12
 8000998:	46bd      	mov	sp, r7
 800099a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800099e:	4770      	bx	lr
 80009a0:	e000e100 	.word	0xe000e100
 80009a4:	e000ed00 	.word	0xe000ed00

080009a8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80009a8:	b480      	push	{r7}
 80009aa:	b089      	sub	sp, #36	@ 0x24
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	60f8      	str	r0, [r7, #12]
 80009b0:	60b9      	str	r1, [r7, #8]
 80009b2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80009b4:	68fb      	ldr	r3, [r7, #12]
 80009b6:	f003 0307 	and.w	r3, r3, #7
 80009ba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80009bc:	69fb      	ldr	r3, [r7, #28]
 80009be:	f1c3 0307 	rsb	r3, r3, #7
 80009c2:	2b04      	cmp	r3, #4
 80009c4:	bf28      	it	cs
 80009c6:	2304      	movcs	r3, #4
 80009c8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80009ca:	69fb      	ldr	r3, [r7, #28]
 80009cc:	3304      	adds	r3, #4
 80009ce:	2b06      	cmp	r3, #6
 80009d0:	d902      	bls.n	80009d8 <NVIC_EncodePriority+0x30>
 80009d2:	69fb      	ldr	r3, [r7, #28]
 80009d4:	3b03      	subs	r3, #3
 80009d6:	e000      	b.n	80009da <NVIC_EncodePriority+0x32>
 80009d8:	2300      	movs	r3, #0
 80009da:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009dc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80009e0:	69bb      	ldr	r3, [r7, #24]
 80009e2:	fa02 f303 	lsl.w	r3, r2, r3
 80009e6:	43da      	mvns	r2, r3
 80009e8:	68bb      	ldr	r3, [r7, #8]
 80009ea:	401a      	ands	r2, r3
 80009ec:	697b      	ldr	r3, [r7, #20]
 80009ee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80009f0:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80009f4:	697b      	ldr	r3, [r7, #20]
 80009f6:	fa01 f303 	lsl.w	r3, r1, r3
 80009fa:	43d9      	mvns	r1, r3
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a00:	4313      	orrs	r3, r2
         );
}
 8000a02:	4618      	mov	r0, r3
 8000a04:	3724      	adds	r7, #36	@ 0x24
 8000a06:	46bd      	mov	sp, r7
 8000a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a0c:	4770      	bx	lr
	...

08000a10 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b082      	sub	sp, #8
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	3b01      	subs	r3, #1
 8000a1c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000a20:	d301      	bcc.n	8000a26 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000a22:	2301      	movs	r3, #1
 8000a24:	e00f      	b.n	8000a46 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a26:	4a0a      	ldr	r2, [pc, #40]	@ (8000a50 <SysTick_Config+0x40>)
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	3b01      	subs	r3, #1
 8000a2c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000a2e:	210f      	movs	r1, #15
 8000a30:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000a34:	f7ff ff8e 	bl	8000954 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a38:	4b05      	ldr	r3, [pc, #20]	@ (8000a50 <SysTick_Config+0x40>)
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a3e:	4b04      	ldr	r3, [pc, #16]	@ (8000a50 <SysTick_Config+0x40>)
 8000a40:	2207      	movs	r2, #7
 8000a42:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000a44:	2300      	movs	r3, #0
}
 8000a46:	4618      	mov	r0, r3
 8000a48:	3708      	adds	r7, #8
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	bd80      	pop	{r7, pc}
 8000a4e:	bf00      	nop
 8000a50:	e000e010 	.word	0xe000e010

08000a54 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b082      	sub	sp, #8
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000a5c:	6878      	ldr	r0, [r7, #4]
 8000a5e:	f7ff ff47 	bl	80008f0 <__NVIC_SetPriorityGrouping>
}
 8000a62:	bf00      	nop
 8000a64:	3708      	adds	r7, #8
 8000a66:	46bd      	mov	sp, r7
 8000a68:	bd80      	pop	{r7, pc}

08000a6a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000a6a:	b580      	push	{r7, lr}
 8000a6c:	b086      	sub	sp, #24
 8000a6e:	af00      	add	r7, sp, #0
 8000a70:	4603      	mov	r3, r0
 8000a72:	60b9      	str	r1, [r7, #8]
 8000a74:	607a      	str	r2, [r7, #4]
 8000a76:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000a78:	2300      	movs	r3, #0
 8000a7a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000a7c:	f7ff ff5c 	bl	8000938 <__NVIC_GetPriorityGrouping>
 8000a80:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000a82:	687a      	ldr	r2, [r7, #4]
 8000a84:	68b9      	ldr	r1, [r7, #8]
 8000a86:	6978      	ldr	r0, [r7, #20]
 8000a88:	f7ff ff8e 	bl	80009a8 <NVIC_EncodePriority>
 8000a8c:	4602      	mov	r2, r0
 8000a8e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a92:	4611      	mov	r1, r2
 8000a94:	4618      	mov	r0, r3
 8000a96:	f7ff ff5d 	bl	8000954 <__NVIC_SetPriority>
}
 8000a9a:	bf00      	nop
 8000a9c:	3718      	adds	r7, #24
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	bd80      	pop	{r7, pc}

08000aa2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000aa2:	b580      	push	{r7, lr}
 8000aa4:	b082      	sub	sp, #8
 8000aa6:	af00      	add	r7, sp, #0
 8000aa8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000aaa:	6878      	ldr	r0, [r7, #4]
 8000aac:	f7ff ffb0 	bl	8000a10 <SysTick_Config>
 8000ab0:	4603      	mov	r3, r0
}
 8000ab2:	4618      	mov	r0, r3
 8000ab4:	3708      	adds	r7, #8
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	bd80      	pop	{r7, pc}
	...

08000abc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000abc:	b480      	push	{r7}
 8000abe:	b089      	sub	sp, #36	@ 0x24
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	6078      	str	r0, [r7, #4]
 8000ac4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000aca:	2300      	movs	r3, #0
 8000acc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	61fb      	str	r3, [r7, #28]
 8000ad6:	e16b      	b.n	8000db0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000ad8:	2201      	movs	r2, #1
 8000ada:	69fb      	ldr	r3, [r7, #28]
 8000adc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ae0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000ae2:	683b      	ldr	r3, [r7, #0]
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	697a      	ldr	r2, [r7, #20]
 8000ae8:	4013      	ands	r3, r2
 8000aea:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000aec:	693a      	ldr	r2, [r7, #16]
 8000aee:	697b      	ldr	r3, [r7, #20]
 8000af0:	429a      	cmp	r2, r3
 8000af2:	f040 815a 	bne.w	8000daa <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000af6:	683b      	ldr	r3, [r7, #0]
 8000af8:	685b      	ldr	r3, [r3, #4]
 8000afa:	f003 0303 	and.w	r3, r3, #3
 8000afe:	2b01      	cmp	r3, #1
 8000b00:	d005      	beq.n	8000b0e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000b02:	683b      	ldr	r3, [r7, #0]
 8000b04:	685b      	ldr	r3, [r3, #4]
 8000b06:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000b0a:	2b02      	cmp	r3, #2
 8000b0c:	d130      	bne.n	8000b70 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	689b      	ldr	r3, [r3, #8]
 8000b12:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000b14:	69fb      	ldr	r3, [r7, #28]
 8000b16:	005b      	lsls	r3, r3, #1
 8000b18:	2203      	movs	r2, #3
 8000b1a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b1e:	43db      	mvns	r3, r3
 8000b20:	69ba      	ldr	r2, [r7, #24]
 8000b22:	4013      	ands	r3, r2
 8000b24:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000b26:	683b      	ldr	r3, [r7, #0]
 8000b28:	68da      	ldr	r2, [r3, #12]
 8000b2a:	69fb      	ldr	r3, [r7, #28]
 8000b2c:	005b      	lsls	r3, r3, #1
 8000b2e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b32:	69ba      	ldr	r2, [r7, #24]
 8000b34:	4313      	orrs	r3, r2
 8000b36:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	69ba      	ldr	r2, [r7, #24]
 8000b3c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	685b      	ldr	r3, [r3, #4]
 8000b42:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000b44:	2201      	movs	r2, #1
 8000b46:	69fb      	ldr	r3, [r7, #28]
 8000b48:	fa02 f303 	lsl.w	r3, r2, r3
 8000b4c:	43db      	mvns	r3, r3
 8000b4e:	69ba      	ldr	r2, [r7, #24]
 8000b50:	4013      	ands	r3, r2
 8000b52:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000b54:	683b      	ldr	r3, [r7, #0]
 8000b56:	685b      	ldr	r3, [r3, #4]
 8000b58:	091b      	lsrs	r3, r3, #4
 8000b5a:	f003 0201 	and.w	r2, r3, #1
 8000b5e:	69fb      	ldr	r3, [r7, #28]
 8000b60:	fa02 f303 	lsl.w	r3, r2, r3
 8000b64:	69ba      	ldr	r2, [r7, #24]
 8000b66:	4313      	orrs	r3, r2
 8000b68:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	69ba      	ldr	r2, [r7, #24]
 8000b6e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000b70:	683b      	ldr	r3, [r7, #0]
 8000b72:	685b      	ldr	r3, [r3, #4]
 8000b74:	f003 0303 	and.w	r3, r3, #3
 8000b78:	2b03      	cmp	r3, #3
 8000b7a:	d017      	beq.n	8000bac <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	68db      	ldr	r3, [r3, #12]
 8000b80:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000b82:	69fb      	ldr	r3, [r7, #28]
 8000b84:	005b      	lsls	r3, r3, #1
 8000b86:	2203      	movs	r2, #3
 8000b88:	fa02 f303 	lsl.w	r3, r2, r3
 8000b8c:	43db      	mvns	r3, r3
 8000b8e:	69ba      	ldr	r2, [r7, #24]
 8000b90:	4013      	ands	r3, r2
 8000b92:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000b94:	683b      	ldr	r3, [r7, #0]
 8000b96:	689a      	ldr	r2, [r3, #8]
 8000b98:	69fb      	ldr	r3, [r7, #28]
 8000b9a:	005b      	lsls	r3, r3, #1
 8000b9c:	fa02 f303 	lsl.w	r3, r2, r3
 8000ba0:	69ba      	ldr	r2, [r7, #24]
 8000ba2:	4313      	orrs	r3, r2
 8000ba4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	69ba      	ldr	r2, [r7, #24]
 8000baa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000bac:	683b      	ldr	r3, [r7, #0]
 8000bae:	685b      	ldr	r3, [r3, #4]
 8000bb0:	f003 0303 	and.w	r3, r3, #3
 8000bb4:	2b02      	cmp	r3, #2
 8000bb6:	d123      	bne.n	8000c00 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000bb8:	69fb      	ldr	r3, [r7, #28]
 8000bba:	08da      	lsrs	r2, r3, #3
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	3208      	adds	r2, #8
 8000bc0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000bc4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000bc6:	69fb      	ldr	r3, [r7, #28]
 8000bc8:	f003 0307 	and.w	r3, r3, #7
 8000bcc:	009b      	lsls	r3, r3, #2
 8000bce:	220f      	movs	r2, #15
 8000bd0:	fa02 f303 	lsl.w	r3, r2, r3
 8000bd4:	43db      	mvns	r3, r3
 8000bd6:	69ba      	ldr	r2, [r7, #24]
 8000bd8:	4013      	ands	r3, r2
 8000bda:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000bdc:	683b      	ldr	r3, [r7, #0]
 8000bde:	691a      	ldr	r2, [r3, #16]
 8000be0:	69fb      	ldr	r3, [r7, #28]
 8000be2:	f003 0307 	and.w	r3, r3, #7
 8000be6:	009b      	lsls	r3, r3, #2
 8000be8:	fa02 f303 	lsl.w	r3, r2, r3
 8000bec:	69ba      	ldr	r2, [r7, #24]
 8000bee:	4313      	orrs	r3, r2
 8000bf0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000bf2:	69fb      	ldr	r3, [r7, #28]
 8000bf4:	08da      	lsrs	r2, r3, #3
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	3208      	adds	r2, #8
 8000bfa:	69b9      	ldr	r1, [r7, #24]
 8000bfc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000c06:	69fb      	ldr	r3, [r7, #28]
 8000c08:	005b      	lsls	r3, r3, #1
 8000c0a:	2203      	movs	r2, #3
 8000c0c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c10:	43db      	mvns	r3, r3
 8000c12:	69ba      	ldr	r2, [r7, #24]
 8000c14:	4013      	ands	r3, r2
 8000c16:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000c18:	683b      	ldr	r3, [r7, #0]
 8000c1a:	685b      	ldr	r3, [r3, #4]
 8000c1c:	f003 0203 	and.w	r2, r3, #3
 8000c20:	69fb      	ldr	r3, [r7, #28]
 8000c22:	005b      	lsls	r3, r3, #1
 8000c24:	fa02 f303 	lsl.w	r3, r2, r3
 8000c28:	69ba      	ldr	r2, [r7, #24]
 8000c2a:	4313      	orrs	r3, r2
 8000c2c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	69ba      	ldr	r2, [r7, #24]
 8000c32:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000c34:	683b      	ldr	r3, [r7, #0]
 8000c36:	685b      	ldr	r3, [r3, #4]
 8000c38:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	f000 80b4 	beq.w	8000daa <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c42:	2300      	movs	r3, #0
 8000c44:	60fb      	str	r3, [r7, #12]
 8000c46:	4b60      	ldr	r3, [pc, #384]	@ (8000dc8 <HAL_GPIO_Init+0x30c>)
 8000c48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c4a:	4a5f      	ldr	r2, [pc, #380]	@ (8000dc8 <HAL_GPIO_Init+0x30c>)
 8000c4c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000c50:	6453      	str	r3, [r2, #68]	@ 0x44
 8000c52:	4b5d      	ldr	r3, [pc, #372]	@ (8000dc8 <HAL_GPIO_Init+0x30c>)
 8000c54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c56:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000c5a:	60fb      	str	r3, [r7, #12]
 8000c5c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000c5e:	4a5b      	ldr	r2, [pc, #364]	@ (8000dcc <HAL_GPIO_Init+0x310>)
 8000c60:	69fb      	ldr	r3, [r7, #28]
 8000c62:	089b      	lsrs	r3, r3, #2
 8000c64:	3302      	adds	r3, #2
 8000c66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000c6c:	69fb      	ldr	r3, [r7, #28]
 8000c6e:	f003 0303 	and.w	r3, r3, #3
 8000c72:	009b      	lsls	r3, r3, #2
 8000c74:	220f      	movs	r2, #15
 8000c76:	fa02 f303 	lsl.w	r3, r2, r3
 8000c7a:	43db      	mvns	r3, r3
 8000c7c:	69ba      	ldr	r2, [r7, #24]
 8000c7e:	4013      	ands	r3, r2
 8000c80:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	4a52      	ldr	r2, [pc, #328]	@ (8000dd0 <HAL_GPIO_Init+0x314>)
 8000c86:	4293      	cmp	r3, r2
 8000c88:	d02b      	beq.n	8000ce2 <HAL_GPIO_Init+0x226>
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	4a51      	ldr	r2, [pc, #324]	@ (8000dd4 <HAL_GPIO_Init+0x318>)
 8000c8e:	4293      	cmp	r3, r2
 8000c90:	d025      	beq.n	8000cde <HAL_GPIO_Init+0x222>
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	4a50      	ldr	r2, [pc, #320]	@ (8000dd8 <HAL_GPIO_Init+0x31c>)
 8000c96:	4293      	cmp	r3, r2
 8000c98:	d01f      	beq.n	8000cda <HAL_GPIO_Init+0x21e>
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	4a4f      	ldr	r2, [pc, #316]	@ (8000ddc <HAL_GPIO_Init+0x320>)
 8000c9e:	4293      	cmp	r3, r2
 8000ca0:	d019      	beq.n	8000cd6 <HAL_GPIO_Init+0x21a>
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	4a4e      	ldr	r2, [pc, #312]	@ (8000de0 <HAL_GPIO_Init+0x324>)
 8000ca6:	4293      	cmp	r3, r2
 8000ca8:	d013      	beq.n	8000cd2 <HAL_GPIO_Init+0x216>
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	4a4d      	ldr	r2, [pc, #308]	@ (8000de4 <HAL_GPIO_Init+0x328>)
 8000cae:	4293      	cmp	r3, r2
 8000cb0:	d00d      	beq.n	8000cce <HAL_GPIO_Init+0x212>
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	4a4c      	ldr	r2, [pc, #304]	@ (8000de8 <HAL_GPIO_Init+0x32c>)
 8000cb6:	4293      	cmp	r3, r2
 8000cb8:	d007      	beq.n	8000cca <HAL_GPIO_Init+0x20e>
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	4a4b      	ldr	r2, [pc, #300]	@ (8000dec <HAL_GPIO_Init+0x330>)
 8000cbe:	4293      	cmp	r3, r2
 8000cc0:	d101      	bne.n	8000cc6 <HAL_GPIO_Init+0x20a>
 8000cc2:	2307      	movs	r3, #7
 8000cc4:	e00e      	b.n	8000ce4 <HAL_GPIO_Init+0x228>
 8000cc6:	2308      	movs	r3, #8
 8000cc8:	e00c      	b.n	8000ce4 <HAL_GPIO_Init+0x228>
 8000cca:	2306      	movs	r3, #6
 8000ccc:	e00a      	b.n	8000ce4 <HAL_GPIO_Init+0x228>
 8000cce:	2305      	movs	r3, #5
 8000cd0:	e008      	b.n	8000ce4 <HAL_GPIO_Init+0x228>
 8000cd2:	2304      	movs	r3, #4
 8000cd4:	e006      	b.n	8000ce4 <HAL_GPIO_Init+0x228>
 8000cd6:	2303      	movs	r3, #3
 8000cd8:	e004      	b.n	8000ce4 <HAL_GPIO_Init+0x228>
 8000cda:	2302      	movs	r3, #2
 8000cdc:	e002      	b.n	8000ce4 <HAL_GPIO_Init+0x228>
 8000cde:	2301      	movs	r3, #1
 8000ce0:	e000      	b.n	8000ce4 <HAL_GPIO_Init+0x228>
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	69fa      	ldr	r2, [r7, #28]
 8000ce6:	f002 0203 	and.w	r2, r2, #3
 8000cea:	0092      	lsls	r2, r2, #2
 8000cec:	4093      	lsls	r3, r2
 8000cee:	69ba      	ldr	r2, [r7, #24]
 8000cf0:	4313      	orrs	r3, r2
 8000cf2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000cf4:	4935      	ldr	r1, [pc, #212]	@ (8000dcc <HAL_GPIO_Init+0x310>)
 8000cf6:	69fb      	ldr	r3, [r7, #28]
 8000cf8:	089b      	lsrs	r3, r3, #2
 8000cfa:	3302      	adds	r3, #2
 8000cfc:	69ba      	ldr	r2, [r7, #24]
 8000cfe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000d02:	4b3b      	ldr	r3, [pc, #236]	@ (8000df0 <HAL_GPIO_Init+0x334>)
 8000d04:	689b      	ldr	r3, [r3, #8]
 8000d06:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000d08:	693b      	ldr	r3, [r7, #16]
 8000d0a:	43db      	mvns	r3, r3
 8000d0c:	69ba      	ldr	r2, [r7, #24]
 8000d0e:	4013      	ands	r3, r2
 8000d10:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000d12:	683b      	ldr	r3, [r7, #0]
 8000d14:	685b      	ldr	r3, [r3, #4]
 8000d16:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d003      	beq.n	8000d26 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8000d1e:	69ba      	ldr	r2, [r7, #24]
 8000d20:	693b      	ldr	r3, [r7, #16]
 8000d22:	4313      	orrs	r3, r2
 8000d24:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000d26:	4a32      	ldr	r2, [pc, #200]	@ (8000df0 <HAL_GPIO_Init+0x334>)
 8000d28:	69bb      	ldr	r3, [r7, #24]
 8000d2a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000d2c:	4b30      	ldr	r3, [pc, #192]	@ (8000df0 <HAL_GPIO_Init+0x334>)
 8000d2e:	68db      	ldr	r3, [r3, #12]
 8000d30:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000d32:	693b      	ldr	r3, [r7, #16]
 8000d34:	43db      	mvns	r3, r3
 8000d36:	69ba      	ldr	r2, [r7, #24]
 8000d38:	4013      	ands	r3, r2
 8000d3a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000d3c:	683b      	ldr	r3, [r7, #0]
 8000d3e:	685b      	ldr	r3, [r3, #4]
 8000d40:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d003      	beq.n	8000d50 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8000d48:	69ba      	ldr	r2, [r7, #24]
 8000d4a:	693b      	ldr	r3, [r7, #16]
 8000d4c:	4313      	orrs	r3, r2
 8000d4e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000d50:	4a27      	ldr	r2, [pc, #156]	@ (8000df0 <HAL_GPIO_Init+0x334>)
 8000d52:	69bb      	ldr	r3, [r7, #24]
 8000d54:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000d56:	4b26      	ldr	r3, [pc, #152]	@ (8000df0 <HAL_GPIO_Init+0x334>)
 8000d58:	685b      	ldr	r3, [r3, #4]
 8000d5a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000d5c:	693b      	ldr	r3, [r7, #16]
 8000d5e:	43db      	mvns	r3, r3
 8000d60:	69ba      	ldr	r2, [r7, #24]
 8000d62:	4013      	ands	r3, r2
 8000d64:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000d66:	683b      	ldr	r3, [r7, #0]
 8000d68:	685b      	ldr	r3, [r3, #4]
 8000d6a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d003      	beq.n	8000d7a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8000d72:	69ba      	ldr	r2, [r7, #24]
 8000d74:	693b      	ldr	r3, [r7, #16]
 8000d76:	4313      	orrs	r3, r2
 8000d78:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000d7a:	4a1d      	ldr	r2, [pc, #116]	@ (8000df0 <HAL_GPIO_Init+0x334>)
 8000d7c:	69bb      	ldr	r3, [r7, #24]
 8000d7e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000d80:	4b1b      	ldr	r3, [pc, #108]	@ (8000df0 <HAL_GPIO_Init+0x334>)
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000d86:	693b      	ldr	r3, [r7, #16]
 8000d88:	43db      	mvns	r3, r3
 8000d8a:	69ba      	ldr	r2, [r7, #24]
 8000d8c:	4013      	ands	r3, r2
 8000d8e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000d90:	683b      	ldr	r3, [r7, #0]
 8000d92:	685b      	ldr	r3, [r3, #4]
 8000d94:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d003      	beq.n	8000da4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8000d9c:	69ba      	ldr	r2, [r7, #24]
 8000d9e:	693b      	ldr	r3, [r7, #16]
 8000da0:	4313      	orrs	r3, r2
 8000da2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000da4:	4a12      	ldr	r2, [pc, #72]	@ (8000df0 <HAL_GPIO_Init+0x334>)
 8000da6:	69bb      	ldr	r3, [r7, #24]
 8000da8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000daa:	69fb      	ldr	r3, [r7, #28]
 8000dac:	3301      	adds	r3, #1
 8000dae:	61fb      	str	r3, [r7, #28]
 8000db0:	69fb      	ldr	r3, [r7, #28]
 8000db2:	2b0f      	cmp	r3, #15
 8000db4:	f67f ae90 	bls.w	8000ad8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000db8:	bf00      	nop
 8000dba:	bf00      	nop
 8000dbc:	3724      	adds	r7, #36	@ 0x24
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc4:	4770      	bx	lr
 8000dc6:	bf00      	nop
 8000dc8:	40023800 	.word	0x40023800
 8000dcc:	40013800 	.word	0x40013800
 8000dd0:	40020000 	.word	0x40020000
 8000dd4:	40020400 	.word	0x40020400
 8000dd8:	40020800 	.word	0x40020800
 8000ddc:	40020c00 	.word	0x40020c00
 8000de0:	40021000 	.word	0x40021000
 8000de4:	40021400 	.word	0x40021400
 8000de8:	40021800 	.word	0x40021800
 8000dec:	40021c00 	.word	0x40021c00
 8000df0:	40013c00 	.word	0x40013c00

08000df4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b086      	sub	sp, #24
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d101      	bne.n	8000e06 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000e02:	2301      	movs	r3, #1
 8000e04:	e267      	b.n	80012d6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	f003 0301 	and.w	r3, r3, #1
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d075      	beq.n	8000efe <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000e12:	4b88      	ldr	r3, [pc, #544]	@ (8001034 <HAL_RCC_OscConfig+0x240>)
 8000e14:	689b      	ldr	r3, [r3, #8]
 8000e16:	f003 030c 	and.w	r3, r3, #12
 8000e1a:	2b04      	cmp	r3, #4
 8000e1c:	d00c      	beq.n	8000e38 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000e1e:	4b85      	ldr	r3, [pc, #532]	@ (8001034 <HAL_RCC_OscConfig+0x240>)
 8000e20:	689b      	ldr	r3, [r3, #8]
 8000e22:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000e26:	2b08      	cmp	r3, #8
 8000e28:	d112      	bne.n	8000e50 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000e2a:	4b82      	ldr	r3, [pc, #520]	@ (8001034 <HAL_RCC_OscConfig+0x240>)
 8000e2c:	685b      	ldr	r3, [r3, #4]
 8000e2e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000e32:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8000e36:	d10b      	bne.n	8000e50 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e38:	4b7e      	ldr	r3, [pc, #504]	@ (8001034 <HAL_RCC_OscConfig+0x240>)
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d05b      	beq.n	8000efc <HAL_RCC_OscConfig+0x108>
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	685b      	ldr	r3, [r3, #4]
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d157      	bne.n	8000efc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8000e4c:	2301      	movs	r3, #1
 8000e4e:	e242      	b.n	80012d6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	685b      	ldr	r3, [r3, #4]
 8000e54:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000e58:	d106      	bne.n	8000e68 <HAL_RCC_OscConfig+0x74>
 8000e5a:	4b76      	ldr	r3, [pc, #472]	@ (8001034 <HAL_RCC_OscConfig+0x240>)
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	4a75      	ldr	r2, [pc, #468]	@ (8001034 <HAL_RCC_OscConfig+0x240>)
 8000e60:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000e64:	6013      	str	r3, [r2, #0]
 8000e66:	e01d      	b.n	8000ea4 <HAL_RCC_OscConfig+0xb0>
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	685b      	ldr	r3, [r3, #4]
 8000e6c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8000e70:	d10c      	bne.n	8000e8c <HAL_RCC_OscConfig+0x98>
 8000e72:	4b70      	ldr	r3, [pc, #448]	@ (8001034 <HAL_RCC_OscConfig+0x240>)
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	4a6f      	ldr	r2, [pc, #444]	@ (8001034 <HAL_RCC_OscConfig+0x240>)
 8000e78:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000e7c:	6013      	str	r3, [r2, #0]
 8000e7e:	4b6d      	ldr	r3, [pc, #436]	@ (8001034 <HAL_RCC_OscConfig+0x240>)
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	4a6c      	ldr	r2, [pc, #432]	@ (8001034 <HAL_RCC_OscConfig+0x240>)
 8000e84:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000e88:	6013      	str	r3, [r2, #0]
 8000e8a:	e00b      	b.n	8000ea4 <HAL_RCC_OscConfig+0xb0>
 8000e8c:	4b69      	ldr	r3, [pc, #420]	@ (8001034 <HAL_RCC_OscConfig+0x240>)
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	4a68      	ldr	r2, [pc, #416]	@ (8001034 <HAL_RCC_OscConfig+0x240>)
 8000e92:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000e96:	6013      	str	r3, [r2, #0]
 8000e98:	4b66      	ldr	r3, [pc, #408]	@ (8001034 <HAL_RCC_OscConfig+0x240>)
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	4a65      	ldr	r2, [pc, #404]	@ (8001034 <HAL_RCC_OscConfig+0x240>)
 8000e9e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000ea2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	685b      	ldr	r3, [r3, #4]
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d013      	beq.n	8000ed4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000eac:	f7ff fd14 	bl	80008d8 <HAL_GetTick>
 8000eb0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000eb2:	e008      	b.n	8000ec6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000eb4:	f7ff fd10 	bl	80008d8 <HAL_GetTick>
 8000eb8:	4602      	mov	r2, r0
 8000eba:	693b      	ldr	r3, [r7, #16]
 8000ebc:	1ad3      	subs	r3, r2, r3
 8000ebe:	2b64      	cmp	r3, #100	@ 0x64
 8000ec0:	d901      	bls.n	8000ec6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8000ec2:	2303      	movs	r3, #3
 8000ec4:	e207      	b.n	80012d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000ec6:	4b5b      	ldr	r3, [pc, #364]	@ (8001034 <HAL_RCC_OscConfig+0x240>)
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d0f0      	beq.n	8000eb4 <HAL_RCC_OscConfig+0xc0>
 8000ed2:	e014      	b.n	8000efe <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ed4:	f7ff fd00 	bl	80008d8 <HAL_GetTick>
 8000ed8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000eda:	e008      	b.n	8000eee <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000edc:	f7ff fcfc 	bl	80008d8 <HAL_GetTick>
 8000ee0:	4602      	mov	r2, r0
 8000ee2:	693b      	ldr	r3, [r7, #16]
 8000ee4:	1ad3      	subs	r3, r2, r3
 8000ee6:	2b64      	cmp	r3, #100	@ 0x64
 8000ee8:	d901      	bls.n	8000eee <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8000eea:	2303      	movs	r3, #3
 8000eec:	e1f3      	b.n	80012d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000eee:	4b51      	ldr	r3, [pc, #324]	@ (8001034 <HAL_RCC_OscConfig+0x240>)
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d1f0      	bne.n	8000edc <HAL_RCC_OscConfig+0xe8>
 8000efa:	e000      	b.n	8000efe <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000efc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	f003 0302 	and.w	r3, r3, #2
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d063      	beq.n	8000fd2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000f0a:	4b4a      	ldr	r3, [pc, #296]	@ (8001034 <HAL_RCC_OscConfig+0x240>)
 8000f0c:	689b      	ldr	r3, [r3, #8]
 8000f0e:	f003 030c 	and.w	r3, r3, #12
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d00b      	beq.n	8000f2e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000f16:	4b47      	ldr	r3, [pc, #284]	@ (8001034 <HAL_RCC_OscConfig+0x240>)
 8000f18:	689b      	ldr	r3, [r3, #8]
 8000f1a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000f1e:	2b08      	cmp	r3, #8
 8000f20:	d11c      	bne.n	8000f5c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000f22:	4b44      	ldr	r3, [pc, #272]	@ (8001034 <HAL_RCC_OscConfig+0x240>)
 8000f24:	685b      	ldr	r3, [r3, #4]
 8000f26:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d116      	bne.n	8000f5c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000f2e:	4b41      	ldr	r3, [pc, #260]	@ (8001034 <HAL_RCC_OscConfig+0x240>)
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	f003 0302 	and.w	r3, r3, #2
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d005      	beq.n	8000f46 <HAL_RCC_OscConfig+0x152>
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	68db      	ldr	r3, [r3, #12]
 8000f3e:	2b01      	cmp	r3, #1
 8000f40:	d001      	beq.n	8000f46 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8000f42:	2301      	movs	r3, #1
 8000f44:	e1c7      	b.n	80012d6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f46:	4b3b      	ldr	r3, [pc, #236]	@ (8001034 <HAL_RCC_OscConfig+0x240>)
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	691b      	ldr	r3, [r3, #16]
 8000f52:	00db      	lsls	r3, r3, #3
 8000f54:	4937      	ldr	r1, [pc, #220]	@ (8001034 <HAL_RCC_OscConfig+0x240>)
 8000f56:	4313      	orrs	r3, r2
 8000f58:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000f5a:	e03a      	b.n	8000fd2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	68db      	ldr	r3, [r3, #12]
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d020      	beq.n	8000fa6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000f64:	4b34      	ldr	r3, [pc, #208]	@ (8001038 <HAL_RCC_OscConfig+0x244>)
 8000f66:	2201      	movs	r2, #1
 8000f68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000f6a:	f7ff fcb5 	bl	80008d8 <HAL_GetTick>
 8000f6e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000f70:	e008      	b.n	8000f84 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000f72:	f7ff fcb1 	bl	80008d8 <HAL_GetTick>
 8000f76:	4602      	mov	r2, r0
 8000f78:	693b      	ldr	r3, [r7, #16]
 8000f7a:	1ad3      	subs	r3, r2, r3
 8000f7c:	2b02      	cmp	r3, #2
 8000f7e:	d901      	bls.n	8000f84 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8000f80:	2303      	movs	r3, #3
 8000f82:	e1a8      	b.n	80012d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000f84:	4b2b      	ldr	r3, [pc, #172]	@ (8001034 <HAL_RCC_OscConfig+0x240>)
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	f003 0302 	and.w	r3, r3, #2
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d0f0      	beq.n	8000f72 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f90:	4b28      	ldr	r3, [pc, #160]	@ (8001034 <HAL_RCC_OscConfig+0x240>)
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	691b      	ldr	r3, [r3, #16]
 8000f9c:	00db      	lsls	r3, r3, #3
 8000f9e:	4925      	ldr	r1, [pc, #148]	@ (8001034 <HAL_RCC_OscConfig+0x240>)
 8000fa0:	4313      	orrs	r3, r2
 8000fa2:	600b      	str	r3, [r1, #0]
 8000fa4:	e015      	b.n	8000fd2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000fa6:	4b24      	ldr	r3, [pc, #144]	@ (8001038 <HAL_RCC_OscConfig+0x244>)
 8000fa8:	2200      	movs	r2, #0
 8000faa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000fac:	f7ff fc94 	bl	80008d8 <HAL_GetTick>
 8000fb0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000fb2:	e008      	b.n	8000fc6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000fb4:	f7ff fc90 	bl	80008d8 <HAL_GetTick>
 8000fb8:	4602      	mov	r2, r0
 8000fba:	693b      	ldr	r3, [r7, #16]
 8000fbc:	1ad3      	subs	r3, r2, r3
 8000fbe:	2b02      	cmp	r3, #2
 8000fc0:	d901      	bls.n	8000fc6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8000fc2:	2303      	movs	r3, #3
 8000fc4:	e187      	b.n	80012d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000fc6:	4b1b      	ldr	r3, [pc, #108]	@ (8001034 <HAL_RCC_OscConfig+0x240>)
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	f003 0302 	and.w	r3, r3, #2
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d1f0      	bne.n	8000fb4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	f003 0308 	and.w	r3, r3, #8
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d036      	beq.n	800104c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	695b      	ldr	r3, [r3, #20]
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d016      	beq.n	8001014 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000fe6:	4b15      	ldr	r3, [pc, #84]	@ (800103c <HAL_RCC_OscConfig+0x248>)
 8000fe8:	2201      	movs	r2, #1
 8000fea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000fec:	f7ff fc74 	bl	80008d8 <HAL_GetTick>
 8000ff0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000ff2:	e008      	b.n	8001006 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000ff4:	f7ff fc70 	bl	80008d8 <HAL_GetTick>
 8000ff8:	4602      	mov	r2, r0
 8000ffa:	693b      	ldr	r3, [r7, #16]
 8000ffc:	1ad3      	subs	r3, r2, r3
 8000ffe:	2b02      	cmp	r3, #2
 8001000:	d901      	bls.n	8001006 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001002:	2303      	movs	r3, #3
 8001004:	e167      	b.n	80012d6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001006:	4b0b      	ldr	r3, [pc, #44]	@ (8001034 <HAL_RCC_OscConfig+0x240>)
 8001008:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800100a:	f003 0302 	and.w	r3, r3, #2
 800100e:	2b00      	cmp	r3, #0
 8001010:	d0f0      	beq.n	8000ff4 <HAL_RCC_OscConfig+0x200>
 8001012:	e01b      	b.n	800104c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001014:	4b09      	ldr	r3, [pc, #36]	@ (800103c <HAL_RCC_OscConfig+0x248>)
 8001016:	2200      	movs	r2, #0
 8001018:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800101a:	f7ff fc5d 	bl	80008d8 <HAL_GetTick>
 800101e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001020:	e00e      	b.n	8001040 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001022:	f7ff fc59 	bl	80008d8 <HAL_GetTick>
 8001026:	4602      	mov	r2, r0
 8001028:	693b      	ldr	r3, [r7, #16]
 800102a:	1ad3      	subs	r3, r2, r3
 800102c:	2b02      	cmp	r3, #2
 800102e:	d907      	bls.n	8001040 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001030:	2303      	movs	r3, #3
 8001032:	e150      	b.n	80012d6 <HAL_RCC_OscConfig+0x4e2>
 8001034:	40023800 	.word	0x40023800
 8001038:	42470000 	.word	0x42470000
 800103c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001040:	4b88      	ldr	r3, [pc, #544]	@ (8001264 <HAL_RCC_OscConfig+0x470>)
 8001042:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001044:	f003 0302 	and.w	r3, r3, #2
 8001048:	2b00      	cmp	r3, #0
 800104a:	d1ea      	bne.n	8001022 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	f003 0304 	and.w	r3, r3, #4
 8001054:	2b00      	cmp	r3, #0
 8001056:	f000 8097 	beq.w	8001188 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800105a:	2300      	movs	r3, #0
 800105c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800105e:	4b81      	ldr	r3, [pc, #516]	@ (8001264 <HAL_RCC_OscConfig+0x470>)
 8001060:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001062:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001066:	2b00      	cmp	r3, #0
 8001068:	d10f      	bne.n	800108a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800106a:	2300      	movs	r3, #0
 800106c:	60bb      	str	r3, [r7, #8]
 800106e:	4b7d      	ldr	r3, [pc, #500]	@ (8001264 <HAL_RCC_OscConfig+0x470>)
 8001070:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001072:	4a7c      	ldr	r2, [pc, #496]	@ (8001264 <HAL_RCC_OscConfig+0x470>)
 8001074:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001078:	6413      	str	r3, [r2, #64]	@ 0x40
 800107a:	4b7a      	ldr	r3, [pc, #488]	@ (8001264 <HAL_RCC_OscConfig+0x470>)
 800107c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800107e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001082:	60bb      	str	r3, [r7, #8]
 8001084:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001086:	2301      	movs	r3, #1
 8001088:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800108a:	4b77      	ldr	r3, [pc, #476]	@ (8001268 <HAL_RCC_OscConfig+0x474>)
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001092:	2b00      	cmp	r3, #0
 8001094:	d118      	bne.n	80010c8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001096:	4b74      	ldr	r3, [pc, #464]	@ (8001268 <HAL_RCC_OscConfig+0x474>)
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	4a73      	ldr	r2, [pc, #460]	@ (8001268 <HAL_RCC_OscConfig+0x474>)
 800109c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80010a0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80010a2:	f7ff fc19 	bl	80008d8 <HAL_GetTick>
 80010a6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80010a8:	e008      	b.n	80010bc <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80010aa:	f7ff fc15 	bl	80008d8 <HAL_GetTick>
 80010ae:	4602      	mov	r2, r0
 80010b0:	693b      	ldr	r3, [r7, #16]
 80010b2:	1ad3      	subs	r3, r2, r3
 80010b4:	2b02      	cmp	r3, #2
 80010b6:	d901      	bls.n	80010bc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80010b8:	2303      	movs	r3, #3
 80010ba:	e10c      	b.n	80012d6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80010bc:	4b6a      	ldr	r3, [pc, #424]	@ (8001268 <HAL_RCC_OscConfig+0x474>)
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d0f0      	beq.n	80010aa <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	689b      	ldr	r3, [r3, #8]
 80010cc:	2b01      	cmp	r3, #1
 80010ce:	d106      	bne.n	80010de <HAL_RCC_OscConfig+0x2ea>
 80010d0:	4b64      	ldr	r3, [pc, #400]	@ (8001264 <HAL_RCC_OscConfig+0x470>)
 80010d2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80010d4:	4a63      	ldr	r2, [pc, #396]	@ (8001264 <HAL_RCC_OscConfig+0x470>)
 80010d6:	f043 0301 	orr.w	r3, r3, #1
 80010da:	6713      	str	r3, [r2, #112]	@ 0x70
 80010dc:	e01c      	b.n	8001118 <HAL_RCC_OscConfig+0x324>
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	689b      	ldr	r3, [r3, #8]
 80010e2:	2b05      	cmp	r3, #5
 80010e4:	d10c      	bne.n	8001100 <HAL_RCC_OscConfig+0x30c>
 80010e6:	4b5f      	ldr	r3, [pc, #380]	@ (8001264 <HAL_RCC_OscConfig+0x470>)
 80010e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80010ea:	4a5e      	ldr	r2, [pc, #376]	@ (8001264 <HAL_RCC_OscConfig+0x470>)
 80010ec:	f043 0304 	orr.w	r3, r3, #4
 80010f0:	6713      	str	r3, [r2, #112]	@ 0x70
 80010f2:	4b5c      	ldr	r3, [pc, #368]	@ (8001264 <HAL_RCC_OscConfig+0x470>)
 80010f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80010f6:	4a5b      	ldr	r2, [pc, #364]	@ (8001264 <HAL_RCC_OscConfig+0x470>)
 80010f8:	f043 0301 	orr.w	r3, r3, #1
 80010fc:	6713      	str	r3, [r2, #112]	@ 0x70
 80010fe:	e00b      	b.n	8001118 <HAL_RCC_OscConfig+0x324>
 8001100:	4b58      	ldr	r3, [pc, #352]	@ (8001264 <HAL_RCC_OscConfig+0x470>)
 8001102:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001104:	4a57      	ldr	r2, [pc, #348]	@ (8001264 <HAL_RCC_OscConfig+0x470>)
 8001106:	f023 0301 	bic.w	r3, r3, #1
 800110a:	6713      	str	r3, [r2, #112]	@ 0x70
 800110c:	4b55      	ldr	r3, [pc, #340]	@ (8001264 <HAL_RCC_OscConfig+0x470>)
 800110e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001110:	4a54      	ldr	r2, [pc, #336]	@ (8001264 <HAL_RCC_OscConfig+0x470>)
 8001112:	f023 0304 	bic.w	r3, r3, #4
 8001116:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	689b      	ldr	r3, [r3, #8]
 800111c:	2b00      	cmp	r3, #0
 800111e:	d015      	beq.n	800114c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001120:	f7ff fbda 	bl	80008d8 <HAL_GetTick>
 8001124:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001126:	e00a      	b.n	800113e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001128:	f7ff fbd6 	bl	80008d8 <HAL_GetTick>
 800112c:	4602      	mov	r2, r0
 800112e:	693b      	ldr	r3, [r7, #16]
 8001130:	1ad3      	subs	r3, r2, r3
 8001132:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001136:	4293      	cmp	r3, r2
 8001138:	d901      	bls.n	800113e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800113a:	2303      	movs	r3, #3
 800113c:	e0cb      	b.n	80012d6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800113e:	4b49      	ldr	r3, [pc, #292]	@ (8001264 <HAL_RCC_OscConfig+0x470>)
 8001140:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001142:	f003 0302 	and.w	r3, r3, #2
 8001146:	2b00      	cmp	r3, #0
 8001148:	d0ee      	beq.n	8001128 <HAL_RCC_OscConfig+0x334>
 800114a:	e014      	b.n	8001176 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800114c:	f7ff fbc4 	bl	80008d8 <HAL_GetTick>
 8001150:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001152:	e00a      	b.n	800116a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001154:	f7ff fbc0 	bl	80008d8 <HAL_GetTick>
 8001158:	4602      	mov	r2, r0
 800115a:	693b      	ldr	r3, [r7, #16]
 800115c:	1ad3      	subs	r3, r2, r3
 800115e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001162:	4293      	cmp	r3, r2
 8001164:	d901      	bls.n	800116a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001166:	2303      	movs	r3, #3
 8001168:	e0b5      	b.n	80012d6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800116a:	4b3e      	ldr	r3, [pc, #248]	@ (8001264 <HAL_RCC_OscConfig+0x470>)
 800116c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800116e:	f003 0302 	and.w	r3, r3, #2
 8001172:	2b00      	cmp	r3, #0
 8001174:	d1ee      	bne.n	8001154 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001176:	7dfb      	ldrb	r3, [r7, #23]
 8001178:	2b01      	cmp	r3, #1
 800117a:	d105      	bne.n	8001188 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800117c:	4b39      	ldr	r3, [pc, #228]	@ (8001264 <HAL_RCC_OscConfig+0x470>)
 800117e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001180:	4a38      	ldr	r2, [pc, #224]	@ (8001264 <HAL_RCC_OscConfig+0x470>)
 8001182:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001186:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	699b      	ldr	r3, [r3, #24]
 800118c:	2b00      	cmp	r3, #0
 800118e:	f000 80a1 	beq.w	80012d4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001192:	4b34      	ldr	r3, [pc, #208]	@ (8001264 <HAL_RCC_OscConfig+0x470>)
 8001194:	689b      	ldr	r3, [r3, #8]
 8001196:	f003 030c 	and.w	r3, r3, #12
 800119a:	2b08      	cmp	r3, #8
 800119c:	d05c      	beq.n	8001258 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	699b      	ldr	r3, [r3, #24]
 80011a2:	2b02      	cmp	r3, #2
 80011a4:	d141      	bne.n	800122a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80011a6:	4b31      	ldr	r3, [pc, #196]	@ (800126c <HAL_RCC_OscConfig+0x478>)
 80011a8:	2200      	movs	r2, #0
 80011aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011ac:	f7ff fb94 	bl	80008d8 <HAL_GetTick>
 80011b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80011b2:	e008      	b.n	80011c6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80011b4:	f7ff fb90 	bl	80008d8 <HAL_GetTick>
 80011b8:	4602      	mov	r2, r0
 80011ba:	693b      	ldr	r3, [r7, #16]
 80011bc:	1ad3      	subs	r3, r2, r3
 80011be:	2b02      	cmp	r3, #2
 80011c0:	d901      	bls.n	80011c6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80011c2:	2303      	movs	r3, #3
 80011c4:	e087      	b.n	80012d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80011c6:	4b27      	ldr	r3, [pc, #156]	@ (8001264 <HAL_RCC_OscConfig+0x470>)
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d1f0      	bne.n	80011b4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	69da      	ldr	r2, [r3, #28]
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	6a1b      	ldr	r3, [r3, #32]
 80011da:	431a      	orrs	r2, r3
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80011e0:	019b      	lsls	r3, r3, #6
 80011e2:	431a      	orrs	r2, r3
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80011e8:	085b      	lsrs	r3, r3, #1
 80011ea:	3b01      	subs	r3, #1
 80011ec:	041b      	lsls	r3, r3, #16
 80011ee:	431a      	orrs	r2, r3
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80011f4:	061b      	lsls	r3, r3, #24
 80011f6:	491b      	ldr	r1, [pc, #108]	@ (8001264 <HAL_RCC_OscConfig+0x470>)
 80011f8:	4313      	orrs	r3, r2
 80011fa:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80011fc:	4b1b      	ldr	r3, [pc, #108]	@ (800126c <HAL_RCC_OscConfig+0x478>)
 80011fe:	2201      	movs	r2, #1
 8001200:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001202:	f7ff fb69 	bl	80008d8 <HAL_GetTick>
 8001206:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001208:	e008      	b.n	800121c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800120a:	f7ff fb65 	bl	80008d8 <HAL_GetTick>
 800120e:	4602      	mov	r2, r0
 8001210:	693b      	ldr	r3, [r7, #16]
 8001212:	1ad3      	subs	r3, r2, r3
 8001214:	2b02      	cmp	r3, #2
 8001216:	d901      	bls.n	800121c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001218:	2303      	movs	r3, #3
 800121a:	e05c      	b.n	80012d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800121c:	4b11      	ldr	r3, [pc, #68]	@ (8001264 <HAL_RCC_OscConfig+0x470>)
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001224:	2b00      	cmp	r3, #0
 8001226:	d0f0      	beq.n	800120a <HAL_RCC_OscConfig+0x416>
 8001228:	e054      	b.n	80012d4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800122a:	4b10      	ldr	r3, [pc, #64]	@ (800126c <HAL_RCC_OscConfig+0x478>)
 800122c:	2200      	movs	r2, #0
 800122e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001230:	f7ff fb52 	bl	80008d8 <HAL_GetTick>
 8001234:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001236:	e008      	b.n	800124a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001238:	f7ff fb4e 	bl	80008d8 <HAL_GetTick>
 800123c:	4602      	mov	r2, r0
 800123e:	693b      	ldr	r3, [r7, #16]
 8001240:	1ad3      	subs	r3, r2, r3
 8001242:	2b02      	cmp	r3, #2
 8001244:	d901      	bls.n	800124a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001246:	2303      	movs	r3, #3
 8001248:	e045      	b.n	80012d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800124a:	4b06      	ldr	r3, [pc, #24]	@ (8001264 <HAL_RCC_OscConfig+0x470>)
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001252:	2b00      	cmp	r3, #0
 8001254:	d1f0      	bne.n	8001238 <HAL_RCC_OscConfig+0x444>
 8001256:	e03d      	b.n	80012d4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	699b      	ldr	r3, [r3, #24]
 800125c:	2b01      	cmp	r3, #1
 800125e:	d107      	bne.n	8001270 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001260:	2301      	movs	r3, #1
 8001262:	e038      	b.n	80012d6 <HAL_RCC_OscConfig+0x4e2>
 8001264:	40023800 	.word	0x40023800
 8001268:	40007000 	.word	0x40007000
 800126c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001270:	4b1b      	ldr	r3, [pc, #108]	@ (80012e0 <HAL_RCC_OscConfig+0x4ec>)
 8001272:	685b      	ldr	r3, [r3, #4]
 8001274:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	699b      	ldr	r3, [r3, #24]
 800127a:	2b01      	cmp	r3, #1
 800127c:	d028      	beq.n	80012d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800127e:	68fb      	ldr	r3, [r7, #12]
 8001280:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001288:	429a      	cmp	r2, r3
 800128a:	d121      	bne.n	80012d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001296:	429a      	cmp	r2, r3
 8001298:	d11a      	bne.n	80012d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800129a:	68fa      	ldr	r2, [r7, #12]
 800129c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80012a0:	4013      	ands	r3, r2
 80012a2:	687a      	ldr	r2, [r7, #4]
 80012a4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80012a6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80012a8:	4293      	cmp	r3, r2
 80012aa:	d111      	bne.n	80012d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80012b6:	085b      	lsrs	r3, r3, #1
 80012b8:	3b01      	subs	r3, #1
 80012ba:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80012bc:	429a      	cmp	r2, r3
 80012be:	d107      	bne.n	80012d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80012ca:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80012cc:	429a      	cmp	r2, r3
 80012ce:	d001      	beq.n	80012d4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80012d0:	2301      	movs	r3, #1
 80012d2:	e000      	b.n	80012d6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80012d4:	2300      	movs	r3, #0
}
 80012d6:	4618      	mov	r0, r3
 80012d8:	3718      	adds	r7, #24
 80012da:	46bd      	mov	sp, r7
 80012dc:	bd80      	pop	{r7, pc}
 80012de:	bf00      	nop
 80012e0:	40023800 	.word	0x40023800

080012e4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b084      	sub	sp, #16
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
 80012ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d101      	bne.n	80012f8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80012f4:	2301      	movs	r3, #1
 80012f6:	e0cc      	b.n	8001492 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80012f8:	4b68      	ldr	r3, [pc, #416]	@ (800149c <HAL_RCC_ClockConfig+0x1b8>)
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	f003 0307 	and.w	r3, r3, #7
 8001300:	683a      	ldr	r2, [r7, #0]
 8001302:	429a      	cmp	r2, r3
 8001304:	d90c      	bls.n	8001320 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001306:	4b65      	ldr	r3, [pc, #404]	@ (800149c <HAL_RCC_ClockConfig+0x1b8>)
 8001308:	683a      	ldr	r2, [r7, #0]
 800130a:	b2d2      	uxtb	r2, r2
 800130c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800130e:	4b63      	ldr	r3, [pc, #396]	@ (800149c <HAL_RCC_ClockConfig+0x1b8>)
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	f003 0307 	and.w	r3, r3, #7
 8001316:	683a      	ldr	r2, [r7, #0]
 8001318:	429a      	cmp	r2, r3
 800131a:	d001      	beq.n	8001320 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800131c:	2301      	movs	r3, #1
 800131e:	e0b8      	b.n	8001492 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	f003 0302 	and.w	r3, r3, #2
 8001328:	2b00      	cmp	r3, #0
 800132a:	d020      	beq.n	800136e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	f003 0304 	and.w	r3, r3, #4
 8001334:	2b00      	cmp	r3, #0
 8001336:	d005      	beq.n	8001344 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001338:	4b59      	ldr	r3, [pc, #356]	@ (80014a0 <HAL_RCC_ClockConfig+0x1bc>)
 800133a:	689b      	ldr	r3, [r3, #8]
 800133c:	4a58      	ldr	r2, [pc, #352]	@ (80014a0 <HAL_RCC_ClockConfig+0x1bc>)
 800133e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001342:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	f003 0308 	and.w	r3, r3, #8
 800134c:	2b00      	cmp	r3, #0
 800134e:	d005      	beq.n	800135c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001350:	4b53      	ldr	r3, [pc, #332]	@ (80014a0 <HAL_RCC_ClockConfig+0x1bc>)
 8001352:	689b      	ldr	r3, [r3, #8]
 8001354:	4a52      	ldr	r2, [pc, #328]	@ (80014a0 <HAL_RCC_ClockConfig+0x1bc>)
 8001356:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800135a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800135c:	4b50      	ldr	r3, [pc, #320]	@ (80014a0 <HAL_RCC_ClockConfig+0x1bc>)
 800135e:	689b      	ldr	r3, [r3, #8]
 8001360:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	689b      	ldr	r3, [r3, #8]
 8001368:	494d      	ldr	r1, [pc, #308]	@ (80014a0 <HAL_RCC_ClockConfig+0x1bc>)
 800136a:	4313      	orrs	r3, r2
 800136c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	f003 0301 	and.w	r3, r3, #1
 8001376:	2b00      	cmp	r3, #0
 8001378:	d044      	beq.n	8001404 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	685b      	ldr	r3, [r3, #4]
 800137e:	2b01      	cmp	r3, #1
 8001380:	d107      	bne.n	8001392 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001382:	4b47      	ldr	r3, [pc, #284]	@ (80014a0 <HAL_RCC_ClockConfig+0x1bc>)
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800138a:	2b00      	cmp	r3, #0
 800138c:	d119      	bne.n	80013c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800138e:	2301      	movs	r3, #1
 8001390:	e07f      	b.n	8001492 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	685b      	ldr	r3, [r3, #4]
 8001396:	2b02      	cmp	r3, #2
 8001398:	d003      	beq.n	80013a2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800139e:	2b03      	cmp	r3, #3
 80013a0:	d107      	bne.n	80013b2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80013a2:	4b3f      	ldr	r3, [pc, #252]	@ (80014a0 <HAL_RCC_ClockConfig+0x1bc>)
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d109      	bne.n	80013c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80013ae:	2301      	movs	r3, #1
 80013b0:	e06f      	b.n	8001492 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013b2:	4b3b      	ldr	r3, [pc, #236]	@ (80014a0 <HAL_RCC_ClockConfig+0x1bc>)
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	f003 0302 	and.w	r3, r3, #2
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d101      	bne.n	80013c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80013be:	2301      	movs	r3, #1
 80013c0:	e067      	b.n	8001492 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80013c2:	4b37      	ldr	r3, [pc, #220]	@ (80014a0 <HAL_RCC_ClockConfig+0x1bc>)
 80013c4:	689b      	ldr	r3, [r3, #8]
 80013c6:	f023 0203 	bic.w	r2, r3, #3
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	685b      	ldr	r3, [r3, #4]
 80013ce:	4934      	ldr	r1, [pc, #208]	@ (80014a0 <HAL_RCC_ClockConfig+0x1bc>)
 80013d0:	4313      	orrs	r3, r2
 80013d2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80013d4:	f7ff fa80 	bl	80008d8 <HAL_GetTick>
 80013d8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80013da:	e00a      	b.n	80013f2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80013dc:	f7ff fa7c 	bl	80008d8 <HAL_GetTick>
 80013e0:	4602      	mov	r2, r0
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	1ad3      	subs	r3, r2, r3
 80013e6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80013ea:	4293      	cmp	r3, r2
 80013ec:	d901      	bls.n	80013f2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80013ee:	2303      	movs	r3, #3
 80013f0:	e04f      	b.n	8001492 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80013f2:	4b2b      	ldr	r3, [pc, #172]	@ (80014a0 <HAL_RCC_ClockConfig+0x1bc>)
 80013f4:	689b      	ldr	r3, [r3, #8]
 80013f6:	f003 020c 	and.w	r2, r3, #12
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	685b      	ldr	r3, [r3, #4]
 80013fe:	009b      	lsls	r3, r3, #2
 8001400:	429a      	cmp	r2, r3
 8001402:	d1eb      	bne.n	80013dc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001404:	4b25      	ldr	r3, [pc, #148]	@ (800149c <HAL_RCC_ClockConfig+0x1b8>)
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	f003 0307 	and.w	r3, r3, #7
 800140c:	683a      	ldr	r2, [r7, #0]
 800140e:	429a      	cmp	r2, r3
 8001410:	d20c      	bcs.n	800142c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001412:	4b22      	ldr	r3, [pc, #136]	@ (800149c <HAL_RCC_ClockConfig+0x1b8>)
 8001414:	683a      	ldr	r2, [r7, #0]
 8001416:	b2d2      	uxtb	r2, r2
 8001418:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800141a:	4b20      	ldr	r3, [pc, #128]	@ (800149c <HAL_RCC_ClockConfig+0x1b8>)
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	f003 0307 	and.w	r3, r3, #7
 8001422:	683a      	ldr	r2, [r7, #0]
 8001424:	429a      	cmp	r2, r3
 8001426:	d001      	beq.n	800142c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001428:	2301      	movs	r3, #1
 800142a:	e032      	b.n	8001492 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	f003 0304 	and.w	r3, r3, #4
 8001434:	2b00      	cmp	r3, #0
 8001436:	d008      	beq.n	800144a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001438:	4b19      	ldr	r3, [pc, #100]	@ (80014a0 <HAL_RCC_ClockConfig+0x1bc>)
 800143a:	689b      	ldr	r3, [r3, #8]
 800143c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	68db      	ldr	r3, [r3, #12]
 8001444:	4916      	ldr	r1, [pc, #88]	@ (80014a0 <HAL_RCC_ClockConfig+0x1bc>)
 8001446:	4313      	orrs	r3, r2
 8001448:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	f003 0308 	and.w	r3, r3, #8
 8001452:	2b00      	cmp	r3, #0
 8001454:	d009      	beq.n	800146a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001456:	4b12      	ldr	r3, [pc, #72]	@ (80014a0 <HAL_RCC_ClockConfig+0x1bc>)
 8001458:	689b      	ldr	r3, [r3, #8]
 800145a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	691b      	ldr	r3, [r3, #16]
 8001462:	00db      	lsls	r3, r3, #3
 8001464:	490e      	ldr	r1, [pc, #56]	@ (80014a0 <HAL_RCC_ClockConfig+0x1bc>)
 8001466:	4313      	orrs	r3, r2
 8001468:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800146a:	f000 f821 	bl	80014b0 <HAL_RCC_GetSysClockFreq>
 800146e:	4602      	mov	r2, r0
 8001470:	4b0b      	ldr	r3, [pc, #44]	@ (80014a0 <HAL_RCC_ClockConfig+0x1bc>)
 8001472:	689b      	ldr	r3, [r3, #8]
 8001474:	091b      	lsrs	r3, r3, #4
 8001476:	f003 030f 	and.w	r3, r3, #15
 800147a:	490a      	ldr	r1, [pc, #40]	@ (80014a4 <HAL_RCC_ClockConfig+0x1c0>)
 800147c:	5ccb      	ldrb	r3, [r1, r3]
 800147e:	fa22 f303 	lsr.w	r3, r2, r3
 8001482:	4a09      	ldr	r2, [pc, #36]	@ (80014a8 <HAL_RCC_ClockConfig+0x1c4>)
 8001484:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001486:	4b09      	ldr	r3, [pc, #36]	@ (80014ac <HAL_RCC_ClockConfig+0x1c8>)
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	4618      	mov	r0, r3
 800148c:	f7ff f9f4 	bl	8000878 <HAL_InitTick>

  return HAL_OK;
 8001490:	2300      	movs	r3, #0
}
 8001492:	4618      	mov	r0, r3
 8001494:	3710      	adds	r7, #16
 8001496:	46bd      	mov	sp, r7
 8001498:	bd80      	pop	{r7, pc}
 800149a:	bf00      	nop
 800149c:	40023c00 	.word	0x40023c00
 80014a0:	40023800 	.word	0x40023800
 80014a4:	08003310 	.word	0x08003310
 80014a8:	20000000 	.word	0x20000000
 80014ac:	20000004 	.word	0x20000004

080014b0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80014b0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80014b4:	b094      	sub	sp, #80	@ 0x50
 80014b6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80014b8:	2300      	movs	r3, #0
 80014ba:	647b      	str	r3, [r7, #68]	@ 0x44
 80014bc:	2300      	movs	r3, #0
 80014be:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80014c0:	2300      	movs	r3, #0
 80014c2:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80014c4:	2300      	movs	r3, #0
 80014c6:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80014c8:	4b79      	ldr	r3, [pc, #484]	@ (80016b0 <HAL_RCC_GetSysClockFreq+0x200>)
 80014ca:	689b      	ldr	r3, [r3, #8]
 80014cc:	f003 030c 	and.w	r3, r3, #12
 80014d0:	2b08      	cmp	r3, #8
 80014d2:	d00d      	beq.n	80014f0 <HAL_RCC_GetSysClockFreq+0x40>
 80014d4:	2b08      	cmp	r3, #8
 80014d6:	f200 80e1 	bhi.w	800169c <HAL_RCC_GetSysClockFreq+0x1ec>
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d002      	beq.n	80014e4 <HAL_RCC_GetSysClockFreq+0x34>
 80014de:	2b04      	cmp	r3, #4
 80014e0:	d003      	beq.n	80014ea <HAL_RCC_GetSysClockFreq+0x3a>
 80014e2:	e0db      	b.n	800169c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80014e4:	4b73      	ldr	r3, [pc, #460]	@ (80016b4 <HAL_RCC_GetSysClockFreq+0x204>)
 80014e6:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 80014e8:	e0db      	b.n	80016a2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80014ea:	4b73      	ldr	r3, [pc, #460]	@ (80016b8 <HAL_RCC_GetSysClockFreq+0x208>)
 80014ec:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80014ee:	e0d8      	b.n	80016a2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80014f0:	4b6f      	ldr	r3, [pc, #444]	@ (80016b0 <HAL_RCC_GetSysClockFreq+0x200>)
 80014f2:	685b      	ldr	r3, [r3, #4]
 80014f4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80014f8:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80014fa:	4b6d      	ldr	r3, [pc, #436]	@ (80016b0 <HAL_RCC_GetSysClockFreq+0x200>)
 80014fc:	685b      	ldr	r3, [r3, #4]
 80014fe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001502:	2b00      	cmp	r3, #0
 8001504:	d063      	beq.n	80015ce <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001506:	4b6a      	ldr	r3, [pc, #424]	@ (80016b0 <HAL_RCC_GetSysClockFreq+0x200>)
 8001508:	685b      	ldr	r3, [r3, #4]
 800150a:	099b      	lsrs	r3, r3, #6
 800150c:	2200      	movs	r2, #0
 800150e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001510:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8001512:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001514:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001518:	633b      	str	r3, [r7, #48]	@ 0x30
 800151a:	2300      	movs	r3, #0
 800151c:	637b      	str	r3, [r7, #52]	@ 0x34
 800151e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8001522:	4622      	mov	r2, r4
 8001524:	462b      	mov	r3, r5
 8001526:	f04f 0000 	mov.w	r0, #0
 800152a:	f04f 0100 	mov.w	r1, #0
 800152e:	0159      	lsls	r1, r3, #5
 8001530:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001534:	0150      	lsls	r0, r2, #5
 8001536:	4602      	mov	r2, r0
 8001538:	460b      	mov	r3, r1
 800153a:	4621      	mov	r1, r4
 800153c:	1a51      	subs	r1, r2, r1
 800153e:	6139      	str	r1, [r7, #16]
 8001540:	4629      	mov	r1, r5
 8001542:	eb63 0301 	sbc.w	r3, r3, r1
 8001546:	617b      	str	r3, [r7, #20]
 8001548:	f04f 0200 	mov.w	r2, #0
 800154c:	f04f 0300 	mov.w	r3, #0
 8001550:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001554:	4659      	mov	r1, fp
 8001556:	018b      	lsls	r3, r1, #6
 8001558:	4651      	mov	r1, sl
 800155a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800155e:	4651      	mov	r1, sl
 8001560:	018a      	lsls	r2, r1, #6
 8001562:	4651      	mov	r1, sl
 8001564:	ebb2 0801 	subs.w	r8, r2, r1
 8001568:	4659      	mov	r1, fp
 800156a:	eb63 0901 	sbc.w	r9, r3, r1
 800156e:	f04f 0200 	mov.w	r2, #0
 8001572:	f04f 0300 	mov.w	r3, #0
 8001576:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800157a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800157e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001582:	4690      	mov	r8, r2
 8001584:	4699      	mov	r9, r3
 8001586:	4623      	mov	r3, r4
 8001588:	eb18 0303 	adds.w	r3, r8, r3
 800158c:	60bb      	str	r3, [r7, #8]
 800158e:	462b      	mov	r3, r5
 8001590:	eb49 0303 	adc.w	r3, r9, r3
 8001594:	60fb      	str	r3, [r7, #12]
 8001596:	f04f 0200 	mov.w	r2, #0
 800159a:	f04f 0300 	mov.w	r3, #0
 800159e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80015a2:	4629      	mov	r1, r5
 80015a4:	024b      	lsls	r3, r1, #9
 80015a6:	4621      	mov	r1, r4
 80015a8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80015ac:	4621      	mov	r1, r4
 80015ae:	024a      	lsls	r2, r1, #9
 80015b0:	4610      	mov	r0, r2
 80015b2:	4619      	mov	r1, r3
 80015b4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80015b6:	2200      	movs	r2, #0
 80015b8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80015ba:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80015bc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80015c0:	f7fe fe06 	bl	80001d0 <__aeabi_uldivmod>
 80015c4:	4602      	mov	r2, r0
 80015c6:	460b      	mov	r3, r1
 80015c8:	4613      	mov	r3, r2
 80015ca:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80015cc:	e058      	b.n	8001680 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80015ce:	4b38      	ldr	r3, [pc, #224]	@ (80016b0 <HAL_RCC_GetSysClockFreq+0x200>)
 80015d0:	685b      	ldr	r3, [r3, #4]
 80015d2:	099b      	lsrs	r3, r3, #6
 80015d4:	2200      	movs	r2, #0
 80015d6:	4618      	mov	r0, r3
 80015d8:	4611      	mov	r1, r2
 80015da:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80015de:	623b      	str	r3, [r7, #32]
 80015e0:	2300      	movs	r3, #0
 80015e2:	627b      	str	r3, [r7, #36]	@ 0x24
 80015e4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80015e8:	4642      	mov	r2, r8
 80015ea:	464b      	mov	r3, r9
 80015ec:	f04f 0000 	mov.w	r0, #0
 80015f0:	f04f 0100 	mov.w	r1, #0
 80015f4:	0159      	lsls	r1, r3, #5
 80015f6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80015fa:	0150      	lsls	r0, r2, #5
 80015fc:	4602      	mov	r2, r0
 80015fe:	460b      	mov	r3, r1
 8001600:	4641      	mov	r1, r8
 8001602:	ebb2 0a01 	subs.w	sl, r2, r1
 8001606:	4649      	mov	r1, r9
 8001608:	eb63 0b01 	sbc.w	fp, r3, r1
 800160c:	f04f 0200 	mov.w	r2, #0
 8001610:	f04f 0300 	mov.w	r3, #0
 8001614:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001618:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800161c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001620:	ebb2 040a 	subs.w	r4, r2, sl
 8001624:	eb63 050b 	sbc.w	r5, r3, fp
 8001628:	f04f 0200 	mov.w	r2, #0
 800162c:	f04f 0300 	mov.w	r3, #0
 8001630:	00eb      	lsls	r3, r5, #3
 8001632:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001636:	00e2      	lsls	r2, r4, #3
 8001638:	4614      	mov	r4, r2
 800163a:	461d      	mov	r5, r3
 800163c:	4643      	mov	r3, r8
 800163e:	18e3      	adds	r3, r4, r3
 8001640:	603b      	str	r3, [r7, #0]
 8001642:	464b      	mov	r3, r9
 8001644:	eb45 0303 	adc.w	r3, r5, r3
 8001648:	607b      	str	r3, [r7, #4]
 800164a:	f04f 0200 	mov.w	r2, #0
 800164e:	f04f 0300 	mov.w	r3, #0
 8001652:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001656:	4629      	mov	r1, r5
 8001658:	028b      	lsls	r3, r1, #10
 800165a:	4621      	mov	r1, r4
 800165c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001660:	4621      	mov	r1, r4
 8001662:	028a      	lsls	r2, r1, #10
 8001664:	4610      	mov	r0, r2
 8001666:	4619      	mov	r1, r3
 8001668:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800166a:	2200      	movs	r2, #0
 800166c:	61bb      	str	r3, [r7, #24]
 800166e:	61fa      	str	r2, [r7, #28]
 8001670:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001674:	f7fe fdac 	bl	80001d0 <__aeabi_uldivmod>
 8001678:	4602      	mov	r2, r0
 800167a:	460b      	mov	r3, r1
 800167c:	4613      	mov	r3, r2
 800167e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001680:	4b0b      	ldr	r3, [pc, #44]	@ (80016b0 <HAL_RCC_GetSysClockFreq+0x200>)
 8001682:	685b      	ldr	r3, [r3, #4]
 8001684:	0c1b      	lsrs	r3, r3, #16
 8001686:	f003 0303 	and.w	r3, r3, #3
 800168a:	3301      	adds	r3, #1
 800168c:	005b      	lsls	r3, r3, #1
 800168e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8001690:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001692:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001694:	fbb2 f3f3 	udiv	r3, r2, r3
 8001698:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800169a:	e002      	b.n	80016a2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800169c:	4b05      	ldr	r3, [pc, #20]	@ (80016b4 <HAL_RCC_GetSysClockFreq+0x204>)
 800169e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80016a0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80016a2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80016a4:	4618      	mov	r0, r3
 80016a6:	3750      	adds	r7, #80	@ 0x50
 80016a8:	46bd      	mov	sp, r7
 80016aa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80016ae:	bf00      	nop
 80016b0:	40023800 	.word	0x40023800
 80016b4:	00f42400 	.word	0x00f42400
 80016b8:	007a1200 	.word	0x007a1200

080016bc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80016bc:	b480      	push	{r7}
 80016be:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80016c0:	4b03      	ldr	r3, [pc, #12]	@ (80016d0 <HAL_RCC_GetHCLKFreq+0x14>)
 80016c2:	681b      	ldr	r3, [r3, #0]
}
 80016c4:	4618      	mov	r0, r3
 80016c6:	46bd      	mov	sp, r7
 80016c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016cc:	4770      	bx	lr
 80016ce:	bf00      	nop
 80016d0:	20000000 	.word	0x20000000

080016d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80016d8:	f7ff fff0 	bl	80016bc <HAL_RCC_GetHCLKFreq>
 80016dc:	4602      	mov	r2, r0
 80016de:	4b05      	ldr	r3, [pc, #20]	@ (80016f4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80016e0:	689b      	ldr	r3, [r3, #8]
 80016e2:	0a9b      	lsrs	r3, r3, #10
 80016e4:	f003 0307 	and.w	r3, r3, #7
 80016e8:	4903      	ldr	r1, [pc, #12]	@ (80016f8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80016ea:	5ccb      	ldrb	r3, [r1, r3]
 80016ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80016f0:	4618      	mov	r0, r3
 80016f2:	bd80      	pop	{r7, pc}
 80016f4:	40023800 	.word	0x40023800
 80016f8:	08003320 	.word	0x08003320

080016fc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001700:	f7ff ffdc 	bl	80016bc <HAL_RCC_GetHCLKFreq>
 8001704:	4602      	mov	r2, r0
 8001706:	4b05      	ldr	r3, [pc, #20]	@ (800171c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001708:	689b      	ldr	r3, [r3, #8]
 800170a:	0b5b      	lsrs	r3, r3, #13
 800170c:	f003 0307 	and.w	r3, r3, #7
 8001710:	4903      	ldr	r1, [pc, #12]	@ (8001720 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001712:	5ccb      	ldrb	r3, [r1, r3]
 8001714:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001718:	4618      	mov	r0, r3
 800171a:	bd80      	pop	{r7, pc}
 800171c:	40023800 	.word	0x40023800
 8001720:	08003320 	.word	0x08003320

08001724 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b082      	sub	sp, #8
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	2b00      	cmp	r3, #0
 8001730:	d101      	bne.n	8001736 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001732:	2301      	movs	r3, #1
 8001734:	e042      	b.n	80017bc <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800173c:	b2db      	uxtb	r3, r3
 800173e:	2b00      	cmp	r3, #0
 8001740:	d106      	bne.n	8001750 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	2200      	movs	r2, #0
 8001746:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800174a:	6878      	ldr	r0, [r7, #4]
 800174c:	f7fe ffd2 	bl	80006f4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	2224      	movs	r2, #36	@ 0x24
 8001754:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	68da      	ldr	r2, [r3, #12]
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8001766:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001768:	6878      	ldr	r0, [r7, #4]
 800176a:	f000 f82b 	bl	80017c4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	691a      	ldr	r2, [r3, #16]
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800177c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	695a      	ldr	r2, [r3, #20]
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800178c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	68da      	ldr	r2, [r3, #12]
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800179c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	2200      	movs	r2, #0
 80017a2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	2220      	movs	r2, #32
 80017a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	2220      	movs	r2, #32
 80017b0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	2200      	movs	r2, #0
 80017b8:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80017ba:	2300      	movs	r3, #0
}
 80017bc:	4618      	mov	r0, r3
 80017be:	3708      	adds	r7, #8
 80017c0:	46bd      	mov	sp, r7
 80017c2:	bd80      	pop	{r7, pc}

080017c4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80017c4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80017c8:	b0c0      	sub	sp, #256	@ 0x100
 80017ca:	af00      	add	r7, sp, #0
 80017cc:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80017d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	691b      	ldr	r3, [r3, #16]
 80017d8:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80017dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80017e0:	68d9      	ldr	r1, [r3, #12]
 80017e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80017e6:	681a      	ldr	r2, [r3, #0]
 80017e8:	ea40 0301 	orr.w	r3, r0, r1
 80017ec:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80017ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80017f2:	689a      	ldr	r2, [r3, #8]
 80017f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80017f8:	691b      	ldr	r3, [r3, #16]
 80017fa:	431a      	orrs	r2, r3
 80017fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001800:	695b      	ldr	r3, [r3, #20]
 8001802:	431a      	orrs	r2, r3
 8001804:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001808:	69db      	ldr	r3, [r3, #28]
 800180a:	4313      	orrs	r3, r2
 800180c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8001810:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	68db      	ldr	r3, [r3, #12]
 8001818:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800181c:	f021 010c 	bic.w	r1, r1, #12
 8001820:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001824:	681a      	ldr	r2, [r3, #0]
 8001826:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800182a:	430b      	orrs	r3, r1
 800182c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800182e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	695b      	ldr	r3, [r3, #20]
 8001836:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800183a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800183e:	6999      	ldr	r1, [r3, #24]
 8001840:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001844:	681a      	ldr	r2, [r3, #0]
 8001846:	ea40 0301 	orr.w	r3, r0, r1
 800184a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800184c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001850:	681a      	ldr	r2, [r3, #0]
 8001852:	4b8f      	ldr	r3, [pc, #572]	@ (8001a90 <UART_SetConfig+0x2cc>)
 8001854:	429a      	cmp	r2, r3
 8001856:	d005      	beq.n	8001864 <UART_SetConfig+0xa0>
 8001858:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800185c:	681a      	ldr	r2, [r3, #0]
 800185e:	4b8d      	ldr	r3, [pc, #564]	@ (8001a94 <UART_SetConfig+0x2d0>)
 8001860:	429a      	cmp	r2, r3
 8001862:	d104      	bne.n	800186e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8001864:	f7ff ff4a 	bl	80016fc <HAL_RCC_GetPCLK2Freq>
 8001868:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800186c:	e003      	b.n	8001876 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800186e:	f7ff ff31 	bl	80016d4 <HAL_RCC_GetPCLK1Freq>
 8001872:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001876:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800187a:	69db      	ldr	r3, [r3, #28]
 800187c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001880:	f040 810c 	bne.w	8001a9c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8001884:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8001888:	2200      	movs	r2, #0
 800188a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800188e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8001892:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8001896:	4622      	mov	r2, r4
 8001898:	462b      	mov	r3, r5
 800189a:	1891      	adds	r1, r2, r2
 800189c:	65b9      	str	r1, [r7, #88]	@ 0x58
 800189e:	415b      	adcs	r3, r3
 80018a0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80018a2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80018a6:	4621      	mov	r1, r4
 80018a8:	eb12 0801 	adds.w	r8, r2, r1
 80018ac:	4629      	mov	r1, r5
 80018ae:	eb43 0901 	adc.w	r9, r3, r1
 80018b2:	f04f 0200 	mov.w	r2, #0
 80018b6:	f04f 0300 	mov.w	r3, #0
 80018ba:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80018be:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80018c2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80018c6:	4690      	mov	r8, r2
 80018c8:	4699      	mov	r9, r3
 80018ca:	4623      	mov	r3, r4
 80018cc:	eb18 0303 	adds.w	r3, r8, r3
 80018d0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80018d4:	462b      	mov	r3, r5
 80018d6:	eb49 0303 	adc.w	r3, r9, r3
 80018da:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80018de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80018e2:	685b      	ldr	r3, [r3, #4]
 80018e4:	2200      	movs	r2, #0
 80018e6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80018ea:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80018ee:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80018f2:	460b      	mov	r3, r1
 80018f4:	18db      	adds	r3, r3, r3
 80018f6:	653b      	str	r3, [r7, #80]	@ 0x50
 80018f8:	4613      	mov	r3, r2
 80018fa:	eb42 0303 	adc.w	r3, r2, r3
 80018fe:	657b      	str	r3, [r7, #84]	@ 0x54
 8001900:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8001904:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8001908:	f7fe fc62 	bl	80001d0 <__aeabi_uldivmod>
 800190c:	4602      	mov	r2, r0
 800190e:	460b      	mov	r3, r1
 8001910:	4b61      	ldr	r3, [pc, #388]	@ (8001a98 <UART_SetConfig+0x2d4>)
 8001912:	fba3 2302 	umull	r2, r3, r3, r2
 8001916:	095b      	lsrs	r3, r3, #5
 8001918:	011c      	lsls	r4, r3, #4
 800191a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800191e:	2200      	movs	r2, #0
 8001920:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8001924:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8001928:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800192c:	4642      	mov	r2, r8
 800192e:	464b      	mov	r3, r9
 8001930:	1891      	adds	r1, r2, r2
 8001932:	64b9      	str	r1, [r7, #72]	@ 0x48
 8001934:	415b      	adcs	r3, r3
 8001936:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001938:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800193c:	4641      	mov	r1, r8
 800193e:	eb12 0a01 	adds.w	sl, r2, r1
 8001942:	4649      	mov	r1, r9
 8001944:	eb43 0b01 	adc.w	fp, r3, r1
 8001948:	f04f 0200 	mov.w	r2, #0
 800194c:	f04f 0300 	mov.w	r3, #0
 8001950:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8001954:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8001958:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800195c:	4692      	mov	sl, r2
 800195e:	469b      	mov	fp, r3
 8001960:	4643      	mov	r3, r8
 8001962:	eb1a 0303 	adds.w	r3, sl, r3
 8001966:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800196a:	464b      	mov	r3, r9
 800196c:	eb4b 0303 	adc.w	r3, fp, r3
 8001970:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8001974:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001978:	685b      	ldr	r3, [r3, #4]
 800197a:	2200      	movs	r2, #0
 800197c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8001980:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8001984:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8001988:	460b      	mov	r3, r1
 800198a:	18db      	adds	r3, r3, r3
 800198c:	643b      	str	r3, [r7, #64]	@ 0x40
 800198e:	4613      	mov	r3, r2
 8001990:	eb42 0303 	adc.w	r3, r2, r3
 8001994:	647b      	str	r3, [r7, #68]	@ 0x44
 8001996:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800199a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800199e:	f7fe fc17 	bl	80001d0 <__aeabi_uldivmod>
 80019a2:	4602      	mov	r2, r0
 80019a4:	460b      	mov	r3, r1
 80019a6:	4611      	mov	r1, r2
 80019a8:	4b3b      	ldr	r3, [pc, #236]	@ (8001a98 <UART_SetConfig+0x2d4>)
 80019aa:	fba3 2301 	umull	r2, r3, r3, r1
 80019ae:	095b      	lsrs	r3, r3, #5
 80019b0:	2264      	movs	r2, #100	@ 0x64
 80019b2:	fb02 f303 	mul.w	r3, r2, r3
 80019b6:	1acb      	subs	r3, r1, r3
 80019b8:	00db      	lsls	r3, r3, #3
 80019ba:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80019be:	4b36      	ldr	r3, [pc, #216]	@ (8001a98 <UART_SetConfig+0x2d4>)
 80019c0:	fba3 2302 	umull	r2, r3, r3, r2
 80019c4:	095b      	lsrs	r3, r3, #5
 80019c6:	005b      	lsls	r3, r3, #1
 80019c8:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80019cc:	441c      	add	r4, r3
 80019ce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80019d2:	2200      	movs	r2, #0
 80019d4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80019d8:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80019dc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80019e0:	4642      	mov	r2, r8
 80019e2:	464b      	mov	r3, r9
 80019e4:	1891      	adds	r1, r2, r2
 80019e6:	63b9      	str	r1, [r7, #56]	@ 0x38
 80019e8:	415b      	adcs	r3, r3
 80019ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80019ec:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80019f0:	4641      	mov	r1, r8
 80019f2:	1851      	adds	r1, r2, r1
 80019f4:	6339      	str	r1, [r7, #48]	@ 0x30
 80019f6:	4649      	mov	r1, r9
 80019f8:	414b      	adcs	r3, r1
 80019fa:	637b      	str	r3, [r7, #52]	@ 0x34
 80019fc:	f04f 0200 	mov.w	r2, #0
 8001a00:	f04f 0300 	mov.w	r3, #0
 8001a04:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8001a08:	4659      	mov	r1, fp
 8001a0a:	00cb      	lsls	r3, r1, #3
 8001a0c:	4651      	mov	r1, sl
 8001a0e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001a12:	4651      	mov	r1, sl
 8001a14:	00ca      	lsls	r2, r1, #3
 8001a16:	4610      	mov	r0, r2
 8001a18:	4619      	mov	r1, r3
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	4642      	mov	r2, r8
 8001a1e:	189b      	adds	r3, r3, r2
 8001a20:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8001a24:	464b      	mov	r3, r9
 8001a26:	460a      	mov	r2, r1
 8001a28:	eb42 0303 	adc.w	r3, r2, r3
 8001a2c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8001a30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001a34:	685b      	ldr	r3, [r3, #4]
 8001a36:	2200      	movs	r2, #0
 8001a38:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8001a3c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8001a40:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8001a44:	460b      	mov	r3, r1
 8001a46:	18db      	adds	r3, r3, r3
 8001a48:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001a4a:	4613      	mov	r3, r2
 8001a4c:	eb42 0303 	adc.w	r3, r2, r3
 8001a50:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001a52:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001a56:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8001a5a:	f7fe fbb9 	bl	80001d0 <__aeabi_uldivmod>
 8001a5e:	4602      	mov	r2, r0
 8001a60:	460b      	mov	r3, r1
 8001a62:	4b0d      	ldr	r3, [pc, #52]	@ (8001a98 <UART_SetConfig+0x2d4>)
 8001a64:	fba3 1302 	umull	r1, r3, r3, r2
 8001a68:	095b      	lsrs	r3, r3, #5
 8001a6a:	2164      	movs	r1, #100	@ 0x64
 8001a6c:	fb01 f303 	mul.w	r3, r1, r3
 8001a70:	1ad3      	subs	r3, r2, r3
 8001a72:	00db      	lsls	r3, r3, #3
 8001a74:	3332      	adds	r3, #50	@ 0x32
 8001a76:	4a08      	ldr	r2, [pc, #32]	@ (8001a98 <UART_SetConfig+0x2d4>)
 8001a78:	fba2 2303 	umull	r2, r3, r2, r3
 8001a7c:	095b      	lsrs	r3, r3, #5
 8001a7e:	f003 0207 	and.w	r2, r3, #7
 8001a82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	4422      	add	r2, r4
 8001a8a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8001a8c:	e106      	b.n	8001c9c <UART_SetConfig+0x4d8>
 8001a8e:	bf00      	nop
 8001a90:	40011000 	.word	0x40011000
 8001a94:	40011400 	.word	0x40011400
 8001a98:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001a9c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8001aa6:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8001aaa:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8001aae:	4642      	mov	r2, r8
 8001ab0:	464b      	mov	r3, r9
 8001ab2:	1891      	adds	r1, r2, r2
 8001ab4:	6239      	str	r1, [r7, #32]
 8001ab6:	415b      	adcs	r3, r3
 8001ab8:	627b      	str	r3, [r7, #36]	@ 0x24
 8001aba:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001abe:	4641      	mov	r1, r8
 8001ac0:	1854      	adds	r4, r2, r1
 8001ac2:	4649      	mov	r1, r9
 8001ac4:	eb43 0501 	adc.w	r5, r3, r1
 8001ac8:	f04f 0200 	mov.w	r2, #0
 8001acc:	f04f 0300 	mov.w	r3, #0
 8001ad0:	00eb      	lsls	r3, r5, #3
 8001ad2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001ad6:	00e2      	lsls	r2, r4, #3
 8001ad8:	4614      	mov	r4, r2
 8001ada:	461d      	mov	r5, r3
 8001adc:	4643      	mov	r3, r8
 8001ade:	18e3      	adds	r3, r4, r3
 8001ae0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8001ae4:	464b      	mov	r3, r9
 8001ae6:	eb45 0303 	adc.w	r3, r5, r3
 8001aea:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8001aee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001af2:	685b      	ldr	r3, [r3, #4]
 8001af4:	2200      	movs	r2, #0
 8001af6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8001afa:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8001afe:	f04f 0200 	mov.w	r2, #0
 8001b02:	f04f 0300 	mov.w	r3, #0
 8001b06:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8001b0a:	4629      	mov	r1, r5
 8001b0c:	008b      	lsls	r3, r1, #2
 8001b0e:	4621      	mov	r1, r4
 8001b10:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001b14:	4621      	mov	r1, r4
 8001b16:	008a      	lsls	r2, r1, #2
 8001b18:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8001b1c:	f7fe fb58 	bl	80001d0 <__aeabi_uldivmod>
 8001b20:	4602      	mov	r2, r0
 8001b22:	460b      	mov	r3, r1
 8001b24:	4b60      	ldr	r3, [pc, #384]	@ (8001ca8 <UART_SetConfig+0x4e4>)
 8001b26:	fba3 2302 	umull	r2, r3, r3, r2
 8001b2a:	095b      	lsrs	r3, r3, #5
 8001b2c:	011c      	lsls	r4, r3, #4
 8001b2e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8001b32:	2200      	movs	r2, #0
 8001b34:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8001b38:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8001b3c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8001b40:	4642      	mov	r2, r8
 8001b42:	464b      	mov	r3, r9
 8001b44:	1891      	adds	r1, r2, r2
 8001b46:	61b9      	str	r1, [r7, #24]
 8001b48:	415b      	adcs	r3, r3
 8001b4a:	61fb      	str	r3, [r7, #28]
 8001b4c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001b50:	4641      	mov	r1, r8
 8001b52:	1851      	adds	r1, r2, r1
 8001b54:	6139      	str	r1, [r7, #16]
 8001b56:	4649      	mov	r1, r9
 8001b58:	414b      	adcs	r3, r1
 8001b5a:	617b      	str	r3, [r7, #20]
 8001b5c:	f04f 0200 	mov.w	r2, #0
 8001b60:	f04f 0300 	mov.w	r3, #0
 8001b64:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001b68:	4659      	mov	r1, fp
 8001b6a:	00cb      	lsls	r3, r1, #3
 8001b6c:	4651      	mov	r1, sl
 8001b6e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001b72:	4651      	mov	r1, sl
 8001b74:	00ca      	lsls	r2, r1, #3
 8001b76:	4610      	mov	r0, r2
 8001b78:	4619      	mov	r1, r3
 8001b7a:	4603      	mov	r3, r0
 8001b7c:	4642      	mov	r2, r8
 8001b7e:	189b      	adds	r3, r3, r2
 8001b80:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8001b84:	464b      	mov	r3, r9
 8001b86:	460a      	mov	r2, r1
 8001b88:	eb42 0303 	adc.w	r3, r2, r3
 8001b8c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8001b90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001b94:	685b      	ldr	r3, [r3, #4]
 8001b96:	2200      	movs	r2, #0
 8001b98:	67bb      	str	r3, [r7, #120]	@ 0x78
 8001b9a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8001b9c:	f04f 0200 	mov.w	r2, #0
 8001ba0:	f04f 0300 	mov.w	r3, #0
 8001ba4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8001ba8:	4649      	mov	r1, r9
 8001baa:	008b      	lsls	r3, r1, #2
 8001bac:	4641      	mov	r1, r8
 8001bae:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001bb2:	4641      	mov	r1, r8
 8001bb4:	008a      	lsls	r2, r1, #2
 8001bb6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8001bba:	f7fe fb09 	bl	80001d0 <__aeabi_uldivmod>
 8001bbe:	4602      	mov	r2, r0
 8001bc0:	460b      	mov	r3, r1
 8001bc2:	4611      	mov	r1, r2
 8001bc4:	4b38      	ldr	r3, [pc, #224]	@ (8001ca8 <UART_SetConfig+0x4e4>)
 8001bc6:	fba3 2301 	umull	r2, r3, r3, r1
 8001bca:	095b      	lsrs	r3, r3, #5
 8001bcc:	2264      	movs	r2, #100	@ 0x64
 8001bce:	fb02 f303 	mul.w	r3, r2, r3
 8001bd2:	1acb      	subs	r3, r1, r3
 8001bd4:	011b      	lsls	r3, r3, #4
 8001bd6:	3332      	adds	r3, #50	@ 0x32
 8001bd8:	4a33      	ldr	r2, [pc, #204]	@ (8001ca8 <UART_SetConfig+0x4e4>)
 8001bda:	fba2 2303 	umull	r2, r3, r2, r3
 8001bde:	095b      	lsrs	r3, r3, #5
 8001be0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001be4:	441c      	add	r4, r3
 8001be6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8001bea:	2200      	movs	r2, #0
 8001bec:	673b      	str	r3, [r7, #112]	@ 0x70
 8001bee:	677a      	str	r2, [r7, #116]	@ 0x74
 8001bf0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8001bf4:	4642      	mov	r2, r8
 8001bf6:	464b      	mov	r3, r9
 8001bf8:	1891      	adds	r1, r2, r2
 8001bfa:	60b9      	str	r1, [r7, #8]
 8001bfc:	415b      	adcs	r3, r3
 8001bfe:	60fb      	str	r3, [r7, #12]
 8001c00:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001c04:	4641      	mov	r1, r8
 8001c06:	1851      	adds	r1, r2, r1
 8001c08:	6039      	str	r1, [r7, #0]
 8001c0a:	4649      	mov	r1, r9
 8001c0c:	414b      	adcs	r3, r1
 8001c0e:	607b      	str	r3, [r7, #4]
 8001c10:	f04f 0200 	mov.w	r2, #0
 8001c14:	f04f 0300 	mov.w	r3, #0
 8001c18:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8001c1c:	4659      	mov	r1, fp
 8001c1e:	00cb      	lsls	r3, r1, #3
 8001c20:	4651      	mov	r1, sl
 8001c22:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001c26:	4651      	mov	r1, sl
 8001c28:	00ca      	lsls	r2, r1, #3
 8001c2a:	4610      	mov	r0, r2
 8001c2c:	4619      	mov	r1, r3
 8001c2e:	4603      	mov	r3, r0
 8001c30:	4642      	mov	r2, r8
 8001c32:	189b      	adds	r3, r3, r2
 8001c34:	66bb      	str	r3, [r7, #104]	@ 0x68
 8001c36:	464b      	mov	r3, r9
 8001c38:	460a      	mov	r2, r1
 8001c3a:	eb42 0303 	adc.w	r3, r2, r3
 8001c3e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8001c40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001c44:	685b      	ldr	r3, [r3, #4]
 8001c46:	2200      	movs	r2, #0
 8001c48:	663b      	str	r3, [r7, #96]	@ 0x60
 8001c4a:	667a      	str	r2, [r7, #100]	@ 0x64
 8001c4c:	f04f 0200 	mov.w	r2, #0
 8001c50:	f04f 0300 	mov.w	r3, #0
 8001c54:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8001c58:	4649      	mov	r1, r9
 8001c5a:	008b      	lsls	r3, r1, #2
 8001c5c:	4641      	mov	r1, r8
 8001c5e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001c62:	4641      	mov	r1, r8
 8001c64:	008a      	lsls	r2, r1, #2
 8001c66:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8001c6a:	f7fe fab1 	bl	80001d0 <__aeabi_uldivmod>
 8001c6e:	4602      	mov	r2, r0
 8001c70:	460b      	mov	r3, r1
 8001c72:	4b0d      	ldr	r3, [pc, #52]	@ (8001ca8 <UART_SetConfig+0x4e4>)
 8001c74:	fba3 1302 	umull	r1, r3, r3, r2
 8001c78:	095b      	lsrs	r3, r3, #5
 8001c7a:	2164      	movs	r1, #100	@ 0x64
 8001c7c:	fb01 f303 	mul.w	r3, r1, r3
 8001c80:	1ad3      	subs	r3, r2, r3
 8001c82:	011b      	lsls	r3, r3, #4
 8001c84:	3332      	adds	r3, #50	@ 0x32
 8001c86:	4a08      	ldr	r2, [pc, #32]	@ (8001ca8 <UART_SetConfig+0x4e4>)
 8001c88:	fba2 2303 	umull	r2, r3, r2, r3
 8001c8c:	095b      	lsrs	r3, r3, #5
 8001c8e:	f003 020f 	and.w	r2, r3, #15
 8001c92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	4422      	add	r2, r4
 8001c9a:	609a      	str	r2, [r3, #8]
}
 8001c9c:	bf00      	nop
 8001c9e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001ca8:	51eb851f 	.word	0x51eb851f

08001cac <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8001cac:	b480      	push	{r7}
 8001cae:	b083      	sub	sp, #12
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
    traceENTER_vListInitialise( pxList );

    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	f103 0208 	add.w	r2, r3, #8
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001cc4:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	f103 0208 	add.w	r2, r3, #8
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	f103 0208 	add.w	r2, r3, #8
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	2200      	movs	r2, #0
 8001cde:	601a      	str	r2, [r3, #0]
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );

    traceRETURN_vListInitialise();
}
 8001ce0:	bf00      	nop
 8001ce2:	370c      	adds	r7, #12
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cea:	4770      	bx	lr

08001cec <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8001cec:	b480      	push	{r7}
 8001cee:	b085      	sub	sp, #20
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
 8001cf4:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8001cf6:	683b      	ldr	r3, [r7, #0]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8001cfc:	68bb      	ldr	r3, [r7, #8]
 8001cfe:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001d02:	d103      	bne.n	8001d0c <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	691b      	ldr	r3, [r3, #16]
 8001d08:	60fb      	str	r3, [r7, #12]
 8001d0a:	e00c      	b.n	8001d26 <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	3308      	adds	r3, #8
 8001d10:	60fb      	str	r3, [r7, #12]
 8001d12:	e002      	b.n	8001d1a <vListInsert+0x2e>
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	685b      	ldr	r3, [r3, #4]
 8001d18:	60fb      	str	r3, [r7, #12]
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	685b      	ldr	r3, [r3, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	68ba      	ldr	r2, [r7, #8]
 8001d22:	429a      	cmp	r2, r3
 8001d24:	d2f6      	bcs.n	8001d14 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	685a      	ldr	r2, [r3, #4]
 8001d2a:	683b      	ldr	r3, [r7, #0]
 8001d2c:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8001d2e:	683b      	ldr	r3, [r7, #0]
 8001d30:	685b      	ldr	r3, [r3, #4]
 8001d32:	683a      	ldr	r2, [r7, #0]
 8001d34:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8001d36:	683b      	ldr	r3, [r7, #0]
 8001d38:	68fa      	ldr	r2, [r7, #12]
 8001d3a:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	683a      	ldr	r2, [r7, #0]
 8001d40:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8001d42:	683b      	ldr	r3, [r7, #0]
 8001d44:	687a      	ldr	r2, [r7, #4]
 8001d46:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	1c5a      	adds	r2, r3, #1
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	601a      	str	r2, [r3, #0]

    traceRETURN_vListInsert();
}
 8001d52:	bf00      	nop
 8001d54:	3714      	adds	r7, #20
 8001d56:	46bd      	mov	sp, r7
 8001d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5c:	4770      	bx	lr

08001d5e <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8001d5e:	b480      	push	{r7}
 8001d60:	b085      	sub	sp, #20
 8001d62:	af00      	add	r7, sp, #0
 8001d64:	6078      	str	r0, [r7, #4]
    /* The list item knows which list it is in.  Obtain the list from the list
     * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	691b      	ldr	r3, [r3, #16]
 8001d6a:	60fb      	str	r3, [r7, #12]

    traceENTER_uxListRemove( pxItemToRemove );



    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	685b      	ldr	r3, [r3, #4]
 8001d70:	687a      	ldr	r2, [r7, #4]
 8001d72:	6892      	ldr	r2, [r2, #8]
 8001d74:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	689b      	ldr	r3, [r3, #8]
 8001d7a:	687a      	ldr	r2, [r7, #4]
 8001d7c:	6852      	ldr	r2, [r2, #4]
 8001d7e:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	685b      	ldr	r3, [r3, #4]
 8001d84:	687a      	ldr	r2, [r7, #4]
 8001d86:	429a      	cmp	r2, r3
 8001d88:	d103      	bne.n	8001d92 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	689a      	ldr	r2, [r3, #8]
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	2200      	movs	r2, #0
 8001d96:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	1e5a      	subs	r2, r3, #1
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	601a      	str	r2, [r3, #0]

    traceRETURN_uxListRemove( pxList->uxNumberOfItems );

    return pxList->uxNumberOfItems;
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	681b      	ldr	r3, [r3, #0]
}
 8001da6:	4618      	mov	r0, r3
 8001da8:	3714      	adds	r7, #20
 8001daa:	46bd      	mov	sp, r7
 8001dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db0:	4770      	bx	lr
	...

08001db4 <xQueueGenericReset>:
    } while( 0 )
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b084      	sub	sp, #16
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
 8001dbc:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 8001dbe:	2301      	movs	r3, #1
 8001dc0:	60fb      	str	r3, [r7, #12]
    Queue_t * const pxQueue = xQueue;
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	60bb      	str	r3, [r7, #8]

    traceENTER_xQueueGenericReset( xQueue, xNewQueue );

    configASSERT( pxQueue );

    if( ( pxQueue != NULL ) &&
 8001dc6:	68bb      	ldr	r3, [r7, #8]
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d05d      	beq.n	8001e88 <xQueueGenericReset+0xd4>
        ( pxQueue->uxLength >= 1U ) &&
 8001dcc:	68bb      	ldr	r3, [r7, #8]
 8001dce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    if( ( pxQueue != NULL ) &&
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d059      	beq.n	8001e88 <xQueueGenericReset+0xd4>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 8001dd4:	68bb      	ldr	r3, [r7, #8]
 8001dd6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001dd8:	68bb      	ldr	r3, [r7, #8]
 8001dda:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001ddc:	2100      	movs	r1, #0
 8001dde:	fba3 2302 	umull	r2, r3, r3, r2
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d000      	beq.n	8001de8 <xQueueGenericReset+0x34>
 8001de6:	2101      	movs	r1, #1
 8001de8:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d14c      	bne.n	8001e88 <xQueueGenericReset+0xd4>
    {
        taskENTER_CRITICAL();
 8001dee:	f000 ff6b 	bl	8002cc8 <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8001df2:	68bb      	ldr	r3, [r7, #8]
 8001df4:	681a      	ldr	r2, [r3, #0]
 8001df6:	68bb      	ldr	r3, [r7, #8]
 8001df8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001dfa:	68b9      	ldr	r1, [r7, #8]
 8001dfc:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8001dfe:	fb01 f303 	mul.w	r3, r1, r3
 8001e02:	441a      	add	r2, r3
 8001e04:	68bb      	ldr	r3, [r7, #8]
 8001e06:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8001e08:	68bb      	ldr	r3, [r7, #8]
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	639a      	str	r2, [r3, #56]	@ 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8001e0e:	68bb      	ldr	r3, [r7, #8]
 8001e10:	681a      	ldr	r2, [r3, #0]
 8001e12:	68bb      	ldr	r3, [r7, #8]
 8001e14:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize );
 8001e16:	68bb      	ldr	r3, [r7, #8]
 8001e18:	681a      	ldr	r2, [r3, #0]
 8001e1a:	68bb      	ldr	r3, [r7, #8]
 8001e1c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001e1e:	3b01      	subs	r3, #1
 8001e20:	68b9      	ldr	r1, [r7, #8]
 8001e22:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8001e24:	fb01 f303 	mul.w	r3, r1, r3
 8001e28:	441a      	add	r2, r3
 8001e2a:	68bb      	ldr	r3, [r7, #8]
 8001e2c:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 8001e2e:	68bb      	ldr	r3, [r7, #8]
 8001e30:	22ff      	movs	r2, #255	@ 0xff
 8001e32:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 8001e36:	68bb      	ldr	r3, [r7, #8]
 8001e38:	22ff      	movs	r2, #255	@ 0xff
 8001e3a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

            if( xNewQueue == pdFALSE )
 8001e3e:	683b      	ldr	r3, [r7, #0]
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d114      	bne.n	8001e6e <xQueueGenericReset+0xba>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001e44:	68bb      	ldr	r3, [r7, #8]
 8001e46:	691b      	ldr	r3, [r3, #16]
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d01a      	beq.n	8001e82 <xQueueGenericReset+0xce>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001e4c:	68bb      	ldr	r3, [r7, #8]
 8001e4e:	3310      	adds	r3, #16
 8001e50:	4618      	mov	r0, r3
 8001e52:	f000 fccb 	bl	80027ec <xTaskRemoveFromEventList>
 8001e56:	4603      	mov	r3, r0
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d012      	beq.n	8001e82 <xQueueGenericReset+0xce>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8001e5c:	4b0e      	ldr	r3, [pc, #56]	@ (8001e98 <xQueueGenericReset+0xe4>)
 8001e5e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001e62:	601a      	str	r2, [r3, #0]
 8001e64:	f3bf 8f4f 	dsb	sy
 8001e68:	f3bf 8f6f 	isb	sy
 8001e6c:	e009      	b.n	8001e82 <xQueueGenericReset+0xce>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8001e6e:	68bb      	ldr	r3, [r7, #8]
 8001e70:	3310      	adds	r3, #16
 8001e72:	4618      	mov	r0, r3
 8001e74:	f7ff ff1a 	bl	8001cac <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8001e78:	68bb      	ldr	r3, [r7, #8]
 8001e7a:	3324      	adds	r3, #36	@ 0x24
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	f7ff ff15 	bl	8001cac <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 8001e82:	f000 ff3b 	bl	8002cfc <vPortExitCritical>
 8001e86:	e001      	b.n	8001e8c <xQueueGenericReset+0xd8>
    }
    else
    {
        xReturn = pdFAIL;
 8001e88:	2300      	movs	r3, #0
 8001e8a:	60fb      	str	r3, [r7, #12]

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    traceRETURN_xQueueGenericReset( xReturn );

    return xReturn;
 8001e8c:	68fb      	ldr	r3, [r7, #12]
}
 8001e8e:	4618      	mov	r0, r3
 8001e90:	3710      	adds	r7, #16
 8001e92:	46bd      	mov	sp, r7
 8001e94:	bd80      	pop	{r7, pc}
 8001e96:	bf00      	nop
 8001e98:	e000ed04 	.word	0xe000ed04

08001e9c <xQueueGenericCreateStatic>:
    QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength,
                                             const UBaseType_t uxItemSize,
                                             uint8_t * pucQueueStorage,
                                             StaticQueue_t * pxStaticQueue,
                                             const uint8_t ucQueueType )
    {
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	b088      	sub	sp, #32
 8001ea0:	af02      	add	r7, sp, #8
 8001ea2:	60f8      	str	r0, [r7, #12]
 8001ea4:	60b9      	str	r1, [r7, #8]
 8001ea6:	607a      	str	r2, [r7, #4]
 8001ea8:	603b      	str	r3, [r7, #0]
        Queue_t * pxNewQueue = NULL;
 8001eaa:	2300      	movs	r3, #0
 8001eac:	617b      	str	r3, [r7, #20]

        /* The StaticQueue_t structure and the queue storage area must be
         * supplied. */
        configASSERT( pxStaticQueue );

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d01e      	beq.n	8001ef2 <xQueueGenericCreateStatic+0x56>
 8001eb4:	683b      	ldr	r3, [r7, #0]
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d01b      	beq.n	8001ef2 <xQueueGenericCreateStatic+0x56>
            ( pxStaticQueue != NULL ) &&
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d002      	beq.n	8001ec6 <xQueueGenericCreateStatic+0x2a>

            /* A queue storage area should be provided if the item size is not 0, and
             * should not be provided if the item size is 0. */
            ( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0U ) ) ) &&
 8001ec0:	68bb      	ldr	r3, [r7, #8]
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d015      	beq.n	8001ef2 <xQueueGenericCreateStatic+0x56>
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d102      	bne.n	8001ed2 <xQueueGenericCreateStatic+0x36>
            ( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0U ) ) ) )
 8001ecc:	68bb      	ldr	r3, [r7, #8]
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d10f      	bne.n	8001ef2 <xQueueGenericCreateStatic+0x56>
             * The address of a statically allocated storage area was also passed in
             * but is already set. */
            /* MISRA Ref 11.3.1 [Misaligned access] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            pxNewQueue = ( Queue_t * ) pxStaticQueue;
 8001ed2:	683b      	ldr	r3, [r7, #0]
 8001ed4:	617b      	str	r3, [r7, #20]
            #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
            {
                /* Queues can be allocated wither statically or dynamically, so
                 * note this queue was allocated statically in case the queue is
                 * later deleted. */
                pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8001ed6:	697b      	ldr	r3, [r7, #20]
 8001ed8:	2201      	movs	r2, #1
 8001eda:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
            }
            #endif /* configSUPPORT_DYNAMIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8001ede:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001ee2:	697b      	ldr	r3, [r7, #20]
 8001ee4:	9300      	str	r3, [sp, #0]
 8001ee6:	4613      	mov	r3, r2
 8001ee8:	687a      	ldr	r2, [r7, #4]
 8001eea:	68b9      	ldr	r1, [r7, #8]
 8001eec:	68f8      	ldr	r0, [r7, #12]
 8001eee:	f000 f805 	bl	8001efc <prvInitialiseNewQueue>
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_xQueueGenericCreateStatic( pxNewQueue );

        return pxNewQueue;
 8001ef2:	697b      	ldr	r3, [r7, #20]
    }
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	3718      	adds	r7, #24
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	bd80      	pop	{r7, pc}

08001efc <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b084      	sub	sp, #16
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	60f8      	str	r0, [r7, #12]
 8001f04:	60b9      	str	r1, [r7, #8]
 8001f06:	607a      	str	r2, [r7, #4]
 8001f08:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8001f0a:	68bb      	ldr	r3, [r7, #8]
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d103      	bne.n	8001f18 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8001f10:	69bb      	ldr	r3, [r7, #24]
 8001f12:	69ba      	ldr	r2, [r7, #24]
 8001f14:	601a      	str	r2, [r3, #0]
 8001f16:	e002      	b.n	8001f1e <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8001f18:	69bb      	ldr	r3, [r7, #24]
 8001f1a:	687a      	ldr	r2, [r7, #4]
 8001f1c:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8001f1e:	69bb      	ldr	r3, [r7, #24]
 8001f20:	68fa      	ldr	r2, [r7, #12]
 8001f22:	63da      	str	r2, [r3, #60]	@ 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8001f24:	69bb      	ldr	r3, [r7, #24]
 8001f26:	68ba      	ldr	r2, [r7, #8]
 8001f28:	641a      	str	r2, [r3, #64]	@ 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8001f2a:	2101      	movs	r1, #1
 8001f2c:	69b8      	ldr	r0, [r7, #24]
 8001f2e:	f7ff ff41 	bl	8001db4 <xQueueGenericReset>
        pxNewQueue->pxQueueSetContainer = NULL;
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 8001f32:	bf00      	nop
 8001f34:	3710      	adds	r7, #16
 8001f36:	46bd      	mov	sp, r7
 8001f38:	bd80      	pop	{r7, pc}
	...

08001f3c <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	b08a      	sub	sp, #40	@ 0x28
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	60f8      	str	r0, [r7, #12]
 8001f44:	60b9      	str	r1, [r7, #8]
 8001f46:	607a      	str	r2, [r7, #4]
 8001f48:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	627b      	str	r3, [r7, #36]	@ 0x24
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	623b      	str	r3, [r7, #32]
    }
    #endif

    for( ; ; )
    {
        taskENTER_CRITICAL();
 8001f52:	f000 feb9 	bl	8002cc8 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8001f56:	6a3b      	ldr	r3, [r7, #32]
 8001f58:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001f5a:	6a3b      	ldr	r3, [r7, #32]
 8001f5c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001f5e:	429a      	cmp	r2, r3
 8001f60:	d302      	bcc.n	8001f68 <xQueueGenericSend+0x2c>
 8001f62:	683b      	ldr	r3, [r7, #0]
 8001f64:	2b02      	cmp	r3, #2
 8001f66:	d129      	bne.n	8001fbc <xQueueGenericSend+0x80>
                        }
                    }
                }
                #else /* configUSE_QUEUE_SETS */
                {
                    xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8001f68:	683a      	ldr	r2, [r7, #0]
 8001f6a:	68b9      	ldr	r1, [r7, #8]
 8001f6c:	6a38      	ldr	r0, [r7, #32]
 8001f6e:	f000 f8f4 	bl	800215a <prvCopyDataToQueue>
 8001f72:	61f8      	str	r0, [r7, #28]

                    /* If there was a task waiting for data to arrive on the
                     * queue then unblock it now. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001f74:	6a3b      	ldr	r3, [r7, #32]
 8001f76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d010      	beq.n	8001f9e <xQueueGenericSend+0x62>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001f7c:	6a3b      	ldr	r3, [r7, #32]
 8001f7e:	3324      	adds	r3, #36	@ 0x24
 8001f80:	4618      	mov	r0, r3
 8001f82:	f000 fc33 	bl	80027ec <xTaskRemoveFromEventList>
 8001f86:	4603      	mov	r3, r0
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d013      	beq.n	8001fb4 <xQueueGenericSend+0x78>
                        {
                            /* The unblocked task has a priority higher than
                             * our own so yield immediately.  Yes it is ok to do
                             * this from within the critical section - the kernel
                             * takes care of that. */
                            queueYIELD_IF_USING_PREEMPTION();
 8001f8c:	4b3f      	ldr	r3, [pc, #252]	@ (800208c <xQueueGenericSend+0x150>)
 8001f8e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001f92:	601a      	str	r2, [r3, #0]
 8001f94:	f3bf 8f4f 	dsb	sy
 8001f98:	f3bf 8f6f 	isb	sy
 8001f9c:	e00a      	b.n	8001fb4 <xQueueGenericSend+0x78>
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                    else if( xYieldRequired != pdFALSE )
 8001f9e:	69fb      	ldr	r3, [r7, #28]
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d007      	beq.n	8001fb4 <xQueueGenericSend+0x78>
                    {
                        /* This path is a special case that will only get
                         * executed if the task was holding multiple mutexes and
                         * the mutexes were given back in an order that is
                         * different to that in which they were taken. */
                        queueYIELD_IF_USING_PREEMPTION();
 8001fa4:	4b39      	ldr	r3, [pc, #228]	@ (800208c <xQueueGenericSend+0x150>)
 8001fa6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001faa:	601a      	str	r2, [r3, #0]
 8001fac:	f3bf 8f4f 	dsb	sy
 8001fb0:	f3bf 8f6f 	isb	sy
                        mtCOVERAGE_TEST_MARKER();
                    }
                }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 8001fb4:	f000 fea2 	bl	8002cfc <vPortExitCritical>

                traceRETURN_xQueueGenericSend( pdPASS );

                return pdPASS;
 8001fb8:	2301      	movs	r3, #1
 8001fba:	e063      	b.n	8002084 <xQueueGenericSend+0x148>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d103      	bne.n	8001fca <xQueueGenericSend+0x8e>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8001fc2:	f000 fe9b 	bl	8002cfc <vPortExitCritical>
                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
                    traceRETURN_xQueueGenericSend( errQUEUE_FULL );

                    return errQUEUE_FULL;
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	e05c      	b.n	8002084 <xQueueGenericSend+0x148>
                }
                else if( xEntryTimeSet == pdFALSE )
 8001fca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d106      	bne.n	8001fde <xQueueGenericSend+0xa2>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8001fd0:	f107 0314 	add.w	r3, r7, #20
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	f000 fcd1 	bl	800297c <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8001fda:	2301      	movs	r3, #1
 8001fdc:	627b      	str	r3, [r7, #36]	@ 0x24
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8001fde:	f000 fe8d 	bl	8002cfc <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8001fe2:	f000 f98f 	bl	8002304 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8001fe6:	f000 fe6f 	bl	8002cc8 <vPortEnterCritical>
 8001fea:	6a3b      	ldr	r3, [r7, #32]
 8001fec:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8001ff0:	b25b      	sxtb	r3, r3
 8001ff2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001ff6:	d103      	bne.n	8002000 <xQueueGenericSend+0xc4>
 8001ff8:	6a3b      	ldr	r3, [r7, #32]
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002000:	6a3b      	ldr	r3, [r7, #32]
 8002002:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002006:	b25b      	sxtb	r3, r3
 8002008:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800200c:	d103      	bne.n	8002016 <xQueueGenericSend+0xda>
 800200e:	6a3b      	ldr	r3, [r7, #32]
 8002010:	2200      	movs	r2, #0
 8002012:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002016:	f000 fe71 	bl	8002cfc <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800201a:	1d3a      	adds	r2, r7, #4
 800201c:	f107 0314 	add.w	r3, r7, #20
 8002020:	4611      	mov	r1, r2
 8002022:	4618      	mov	r0, r3
 8002024:	f000 fcc0 	bl	80029a8 <xTaskCheckForTimeOut>
 8002028:	4603      	mov	r3, r0
 800202a:	2b00      	cmp	r3, #0
 800202c:	d124      	bne.n	8002078 <xQueueGenericSend+0x13c>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800202e:	6a38      	ldr	r0, [r7, #32]
 8002030:	f000 f94f 	bl	80022d2 <prvIsQueueFull>
 8002034:	4603      	mov	r3, r0
 8002036:	2b00      	cmp	r3, #0
 8002038:	d018      	beq.n	800206c <xQueueGenericSend+0x130>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800203a:	6a3b      	ldr	r3, [r7, #32]
 800203c:	3310      	adds	r3, #16
 800203e:	687a      	ldr	r2, [r7, #4]
 8002040:	4611      	mov	r1, r2
 8002042:	4618      	mov	r0, r3
 8002044:	f000 fbbc 	bl	80027c0 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list. It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready list instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 8002048:	6a38      	ldr	r0, [r7, #32]
 800204a:	f000 f8f0 	bl	800222e <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in the ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 800204e:	f000 f967 	bl	8002320 <xTaskResumeAll>
 8002052:	4603      	mov	r3, r0
 8002054:	2b00      	cmp	r3, #0
 8002056:	f47f af7c 	bne.w	8001f52 <xQueueGenericSend+0x16>
                {
                    taskYIELD_WITHIN_API();
 800205a:	4b0c      	ldr	r3, [pc, #48]	@ (800208c <xQueueGenericSend+0x150>)
 800205c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002060:	601a      	str	r2, [r3, #0]
 8002062:	f3bf 8f4f 	dsb	sy
 8002066:	f3bf 8f6f 	isb	sy
 800206a:	e772      	b.n	8001f52 <xQueueGenericSend+0x16>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 800206c:	6a38      	ldr	r0, [r7, #32]
 800206e:	f000 f8de 	bl	800222e <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8002072:	f000 f955 	bl	8002320 <xTaskResumeAll>
 8002076:	e76c      	b.n	8001f52 <xQueueGenericSend+0x16>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 8002078:	6a38      	ldr	r0, [r7, #32]
 800207a:	f000 f8d8 	bl	800222e <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 800207e:	f000 f94f 	bl	8002320 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
            traceRETURN_xQueueGenericSend( errQUEUE_FULL );

            return errQUEUE_FULL;
 8002082:	2300      	movs	r3, #0
        }
    }
}
 8002084:	4618      	mov	r0, r3
 8002086:	3728      	adds	r7, #40	@ 0x28
 8002088:	46bd      	mov	sp, r7
 800208a:	bd80      	pop	{r7, pc}
 800208c:	e000ed04 	.word	0xe000ed04

08002090 <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 8002090:	b580      	push	{r7, lr}
 8002092:	b08e      	sub	sp, #56	@ 0x38
 8002094:	af00      	add	r7, sp, #0
 8002096:	60f8      	str	r0, [r7, #12]
 8002098:	60b9      	str	r1, [r7, #8]
 800209a:	607a      	str	r2, [r7, #4]
 800209c:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	633b      	str	r3, [r7, #48]	@ 0x30

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
    uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

    __asm volatile
 80020a2:	f3ef 8211 	mrs	r2, BASEPRI
 80020a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80020aa:	f383 8811 	msr	BASEPRI, r3
 80020ae:	f3bf 8f6f 	isb	sy
 80020b2:	f3bf 8f4f 	dsb	sy
 80020b6:	61fa      	str	r2, [r7, #28]
 80020b8:	61bb      	str	r3, [r7, #24]
        : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
    );

    /* This return will not be reached but is necessary to prevent compiler
     * warnings. */
    return ulOriginalBASEPRI;
 80020ba:	69fb      	ldr	r3, [r7, #28]
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = taskENTER_CRITICAL_FROM_ISR();
 80020bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80020be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80020c0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80020c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80020c4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80020c6:	429a      	cmp	r2, r3
 80020c8:	d302      	bcc.n	80020d0 <xQueueGenericSendFromISR+0x40>
 80020ca:	683b      	ldr	r3, [r7, #0]
 80020cc:	2b02      	cmp	r3, #2
 80020ce:	d137      	bne.n	8002140 <xQueueGenericSendFromISR+0xb0>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 80020d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80020d2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80020d6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80020da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80020dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80020de:	627b      	str	r3, [r7, #36]	@ 0x24
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80020e0:	683a      	ldr	r2, [r7, #0]
 80020e2:	68b9      	ldr	r1, [r7, #8]
 80020e4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80020e6:	f000 f838 	bl	800215a <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 80020ea:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 80020ee:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80020f2:	d112      	bne.n	800211a <xQueueGenericSendFromISR+0x8a>
                        }
                    }
                }
                #else /* configUSE_QUEUE_SETS */
                {
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80020f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80020f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d01e      	beq.n	800213a <xQueueGenericSendFromISR+0xaa>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80020fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80020fe:	3324      	adds	r3, #36	@ 0x24
 8002100:	4618      	mov	r0, r3
 8002102:	f000 fb73 	bl	80027ec <xTaskRemoveFromEventList>
 8002106:	4603      	mov	r3, r0
 8002108:	2b00      	cmp	r3, #0
 800210a:	d016      	beq.n	800213a <xQueueGenericSendFromISR+0xaa>
                        {
                            /* The task waiting has a higher priority so record that a
                             * context switch is required. */
                            if( pxHigherPriorityTaskWoken != NULL )
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	2b00      	cmp	r3, #0
 8002110:	d013      	beq.n	800213a <xQueueGenericSendFromISR+0xaa>
                            {
                                *pxHigherPriorityTaskWoken = pdTRUE;
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	2201      	movs	r2, #1
 8002116:	601a      	str	r2, [r3, #0]
 8002118:	e00f      	b.n	800213a <xQueueGenericSendFromISR+0xaa>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                prvIncrementQueueTxLock( pxQueue, cTxLock );
 800211a:	f000 f9f7 	bl	800250c <uxTaskGetNumberOfTasks>
 800211e:	6238      	str	r0, [r7, #32]
 8002120:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 8002124:	6a3a      	ldr	r2, [r7, #32]
 8002126:	429a      	cmp	r2, r3
 8002128:	d907      	bls.n	800213a <xQueueGenericSendFromISR+0xaa>
 800212a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800212e:	3301      	adds	r3, #1
 8002130:	b2db      	uxtb	r3, r3
 8002132:	b25a      	sxtb	r2, r3
 8002134:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002136:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
            }

            xReturn = pdPASS;
 800213a:	2301      	movs	r3, #1
 800213c:	637b      	str	r3, [r7, #52]	@ 0x34
        {
 800213e:	e001      	b.n	8002144 <xQueueGenericSendFromISR+0xb4>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
            xReturn = errQUEUE_FULL;
 8002140:	2300      	movs	r3, #0
 8002142:	637b      	str	r3, [r7, #52]	@ 0x34
 8002144:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002146:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
    __asm volatile
 8002148:	697b      	ldr	r3, [r7, #20]
 800214a:	f383 8811 	msr	BASEPRI, r3
    (
        "   msr basepri, %0 " ::"r" ( ulNewMaskValue ) : "memory"
    );
}
 800214e:	bf00      	nop
    }
    taskEXIT_CRITICAL_FROM_ISR( uxSavedInterruptStatus );

    traceRETURN_xQueueGenericSendFromISR( xReturn );

    return xReturn;
 8002150:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8002152:	4618      	mov	r0, r3
 8002154:	3738      	adds	r7, #56	@ 0x38
 8002156:	46bd      	mov	sp, r7
 8002158:	bd80      	pop	{r7, pc}

0800215a <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 800215a:	b580      	push	{r7, lr}
 800215c:	b086      	sub	sp, #24
 800215e:	af00      	add	r7, sp, #0
 8002160:	60f8      	str	r0, [r7, #12]
 8002162:	60b9      	str	r1, [r7, #8]
 8002164:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 8002166:	2300      	movs	r3, #0
 8002168:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800216e:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002174:	2b00      	cmp	r3, #0
 8002176:	d10d      	bne.n	8002194 <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
        {
            if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	2b00      	cmp	r3, #0
 800217e:	d14d      	bne.n	800221c <prvCopyDataToQueue+0xc2>
            {
                /* The mutex is no longer being held. */
                xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	689b      	ldr	r3, [r3, #8]
 8002184:	4618      	mov	r0, r3
 8002186:	f000 fc81 	bl	8002a8c <xTaskPriorityDisinherit>
 800218a:	6178      	str	r0, [r7, #20]
                pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	2200      	movs	r2, #0
 8002190:	609a      	str	r2, [r3, #8]
 8002192:	e043      	b.n	800221c <prvCopyDataToQueue+0xc2>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	2b00      	cmp	r3, #0
 8002198:	d119      	bne.n	80021ce <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize );
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	6858      	ldr	r0, [r3, #4]
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021a2:	461a      	mov	r2, r3
 80021a4:	68b9      	ldr	r1, [r7, #8]
 80021a6:	f001 f88d 	bl	80032c4 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	685a      	ldr	r2, [r3, #4]
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021b2:	441a      	add	r2, r3
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	685a      	ldr	r2, [r3, #4]
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	689b      	ldr	r3, [r3, #8]
 80021c0:	429a      	cmp	r2, r3
 80021c2:	d32b      	bcc.n	800221c <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	681a      	ldr	r2, [r3, #0]
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	605a      	str	r2, [r3, #4]
 80021cc:	e026      	b.n	800221c <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize );
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	68d8      	ldr	r0, [r3, #12]
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021d6:	461a      	mov	r2, r3
 80021d8:	68b9      	ldr	r1, [r7, #8]
 80021da:	f001 f873 	bl	80032c4 <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	68da      	ldr	r2, [r3, #12]
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021e6:	425b      	negs	r3, r3
 80021e8:	441a      	add	r2, r3
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead )
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	68da      	ldr	r2, [r3, #12]
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	429a      	cmp	r2, r3
 80021f8:	d207      	bcs.n	800220a <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	689a      	ldr	r2, [r3, #8]
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002202:	425b      	negs	r3, r3
 8002204:	441a      	add	r2, r3
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	2b02      	cmp	r3, #2
 800220e:	d105      	bne.n	800221c <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002210:	693b      	ldr	r3, [r7, #16]
 8002212:	2b00      	cmp	r3, #0
 8002214:	d002      	beq.n	800221c <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 8002216:	693b      	ldr	r3, [r7, #16]
 8002218:	3b01      	subs	r3, #1
 800221a:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = ( UBaseType_t ) ( uxMessagesWaiting + ( UBaseType_t ) 1 );
 800221c:	693b      	ldr	r3, [r7, #16]
 800221e:	1c5a      	adds	r2, r3, #1
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	639a      	str	r2, [r3, #56]	@ 0x38

    return xReturn;
 8002224:	697b      	ldr	r3, [r7, #20]
}
 8002226:	4618      	mov	r0, r3
 8002228:	3718      	adds	r7, #24
 800222a:	46bd      	mov	sp, r7
 800222c:	bd80      	pop	{r7, pc}

0800222e <prvUnlockQueue>:
    }
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800222e:	b580      	push	{r7, lr}
 8002230:	b084      	sub	sp, #16
 8002232:	af00      	add	r7, sp, #0
 8002234:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8002236:	f000 fd47 	bl	8002cc8 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002240:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8002242:	e011      	b.n	8002268 <prvUnlockQueue+0x3a>
            }
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002248:	2b00      	cmp	r3, #0
 800224a:	d012      	beq.n	8002272 <prvUnlockQueue+0x44>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	3324      	adds	r3, #36	@ 0x24
 8002250:	4618      	mov	r0, r3
 8002252:	f000 facb 	bl	80027ec <xTaskRemoveFromEventList>
 8002256:	4603      	mov	r3, r0
 8002258:	2b00      	cmp	r3, #0
 800225a:	d001      	beq.n	8002260 <prvUnlockQueue+0x32>
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
                        vTaskMissedYield();
 800225c:	f000 fbee 	bl	8002a3c <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8002260:	7bfb      	ldrb	r3, [r7, #15]
 8002262:	3b01      	subs	r3, #1
 8002264:	b2db      	uxtb	r3, r3
 8002266:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8002268:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800226c:	2b00      	cmp	r3, #0
 800226e:	dce9      	bgt.n	8002244 <prvUnlockQueue+0x16>
 8002270:	e000      	b.n	8002274 <prvUnlockQueue+0x46>
                    break;
 8002272:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	22ff      	movs	r2, #255	@ 0xff
 8002278:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
    taskEXIT_CRITICAL();
 800227c:	f000 fd3e 	bl	8002cfc <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8002280:	f000 fd22 	bl	8002cc8 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800228a:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 800228c:	e011      	b.n	80022b2 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	691b      	ldr	r3, [r3, #16]
 8002292:	2b00      	cmp	r3, #0
 8002294:	d012      	beq.n	80022bc <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	3310      	adds	r3, #16
 800229a:	4618      	mov	r0, r3
 800229c:	f000 faa6 	bl	80027ec <xTaskRemoveFromEventList>
 80022a0:	4603      	mov	r3, r0
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d001      	beq.n	80022aa <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 80022a6:	f000 fbc9 	bl	8002a3c <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 80022aa:	7bbb      	ldrb	r3, [r7, #14]
 80022ac:	3b01      	subs	r3, #1
 80022ae:	b2db      	uxtb	r3, r3
 80022b0:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 80022b2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	dce9      	bgt.n	800228e <prvUnlockQueue+0x60>
 80022ba:	e000      	b.n	80022be <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 80022bc:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	22ff      	movs	r2, #255	@ 0xff
 80022c2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    }
    taskEXIT_CRITICAL();
 80022c6:	f000 fd19 	bl	8002cfc <vPortExitCritical>
}
 80022ca:	bf00      	nop
 80022cc:	3710      	adds	r7, #16
 80022ce:	46bd      	mov	sp, r7
 80022d0:	bd80      	pop	{r7, pc}

080022d2 <prvIsQueueFull>:
    return xReturn;
}
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 80022d2:	b580      	push	{r7, lr}
 80022d4:	b084      	sub	sp, #16
 80022d6:	af00      	add	r7, sp, #0
 80022d8:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 80022da:	f000 fcf5 	bl	8002cc8 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80022e6:	429a      	cmp	r2, r3
 80022e8:	d102      	bne.n	80022f0 <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 80022ea:	2301      	movs	r3, #1
 80022ec:	60fb      	str	r3, [r7, #12]
 80022ee:	e001      	b.n	80022f4 <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 80022f0:	2300      	movs	r3, #0
 80022f2:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 80022f4:	f000 fd02 	bl	8002cfc <vPortExitCritical>

    return xReturn;
 80022f8:	68fb      	ldr	r3, [r7, #12]
}
 80022fa:	4618      	mov	r0, r3
 80022fc:	3710      	adds	r7, #16
 80022fe:	46bd      	mov	sp, r7
 8002300:	bd80      	pop	{r7, pc}
	...

08002304 <vTaskSuspendAll>:
    traceRETURN_vTaskEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002304:	b480      	push	{r7}
 8002306:	af00      	add	r7, sp, #0
         * do not otherwise exhibit real time behaviour. */
        portSOFTWARE_BARRIER();

        /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
         * is used to allow calls to vTaskSuspendAll() to nest. */
        ++uxSchedulerSuspended;
 8002308:	4b04      	ldr	r3, [pc, #16]	@ (800231c <vTaskSuspendAll+0x18>)
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	3301      	adds	r3, #1
 800230e:	4a03      	ldr	r2, [pc, #12]	@ (800231c <vTaskSuspendAll+0x18>)
 8002310:	6013      	str	r3, [r2, #0]
        }
    }
    #endif /* #if ( configNUMBER_OF_CORES == 1 ) */

    traceRETURN_vTaskSuspendAll();
}
 8002312:	bf00      	nop
 8002314:	46bd      	mov	sp, r7
 8002316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231a:	4770      	bx	lr
 800231c:	20000188 	.word	0x20000188

08002320 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002320:	b580      	push	{r7, lr}
 8002322:	b088      	sub	sp, #32
 8002324:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8002326:	2300      	movs	r3, #0
 8002328:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 800232a:	2300      	movs	r3, #0
 800232c:	61bb      	str	r3, [r7, #24]
        /* It is possible that an ISR caused a task to be removed from an event
         * list while the scheduler was suspended.  If this was the case then the
         * removed task will have been added to the xPendingReadyList.  Once the
         * scheduler has been resumed it is safe to move all the pending ready
         * tasks from this list into their appropriate ready list. */
        taskENTER_CRITICAL();
 800232e:	f000 fccb 	bl	8002cc8 <vPortEnterCritical>
        {
            BaseType_t xCoreID;
            xCoreID = ( BaseType_t ) portGET_CORE_ID();
 8002332:	2300      	movs	r3, #0
 8002334:	613b      	str	r3, [r7, #16]

            /* If uxSchedulerSuspended is zero then this function does not match a
             * previous call to vTaskSuspendAll(). */
            configASSERT( uxSchedulerSuspended != 0U );

            --uxSchedulerSuspended;
 8002336:	4b6c      	ldr	r3, [pc, #432]	@ (80024e8 <xTaskResumeAll+0x1c8>)
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	3b01      	subs	r3, #1
 800233c:	4a6a      	ldr	r2, [pc, #424]	@ (80024e8 <xTaskResumeAll+0x1c8>)
 800233e:	6013      	str	r3, [r2, #0]
            portRELEASE_TASK_LOCK();

            if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 8002340:	4b69      	ldr	r3, [pc, #420]	@ (80024e8 <xTaskResumeAll+0x1c8>)
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	2b00      	cmp	r3, #0
 8002346:	f040 80c8 	bne.w	80024da <xTaskResumeAll+0x1ba>
            {
                if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800234a:	4b68      	ldr	r3, [pc, #416]	@ (80024ec <xTaskResumeAll+0x1cc>)
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	2b00      	cmp	r3, #0
 8002350:	f000 80c3 	beq.w	80024da <xTaskResumeAll+0x1ba>
                {
                    /* Move any readied tasks from the pending list into the
                     * appropriate ready list. */
                    while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002354:	e08c      	b.n	8002470 <xTaskResumeAll+0x150>
                    {
                        /* MISRA Ref 11.5.3 [Void pointer assignment] */
                        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                        /* coverity[misra_c_2012_rule_11_5_violation] */
                        pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8002356:	4b66      	ldr	r3, [pc, #408]	@ (80024f0 <xTaskResumeAll+0x1d0>)
 8002358:	68db      	ldr	r3, [r3, #12]
 800235a:	68db      	ldr	r3, [r3, #12]
 800235c:	61fb      	str	r3, [r7, #28]
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 800235e:	69fb      	ldr	r3, [r7, #28]
 8002360:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002362:	60fb      	str	r3, [r7, #12]
 8002364:	69fb      	ldr	r3, [r7, #28]
 8002366:	69db      	ldr	r3, [r3, #28]
 8002368:	69fa      	ldr	r2, [r7, #28]
 800236a:	6a12      	ldr	r2, [r2, #32]
 800236c:	609a      	str	r2, [r3, #8]
 800236e:	69fb      	ldr	r3, [r7, #28]
 8002370:	6a1b      	ldr	r3, [r3, #32]
 8002372:	69fa      	ldr	r2, [r7, #28]
 8002374:	69d2      	ldr	r2, [r2, #28]
 8002376:	605a      	str	r2, [r3, #4]
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	685a      	ldr	r2, [r3, #4]
 800237c:	69fb      	ldr	r3, [r7, #28]
 800237e:	3318      	adds	r3, #24
 8002380:	429a      	cmp	r2, r3
 8002382:	d103      	bne.n	800238c <xTaskResumeAll+0x6c>
 8002384:	69fb      	ldr	r3, [r7, #28]
 8002386:	6a1a      	ldr	r2, [r3, #32]
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	605a      	str	r2, [r3, #4]
 800238c:	69fb      	ldr	r3, [r7, #28]
 800238e:	2200      	movs	r2, #0
 8002390:	629a      	str	r2, [r3, #40]	@ 0x28
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	1e5a      	subs	r2, r3, #1
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	601a      	str	r2, [r3, #0]
                        portMEMORY_BARRIER();
                        listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 800239c:	69fb      	ldr	r3, [r7, #28]
 800239e:	695b      	ldr	r3, [r3, #20]
 80023a0:	60bb      	str	r3, [r7, #8]
 80023a2:	69fb      	ldr	r3, [r7, #28]
 80023a4:	689b      	ldr	r3, [r3, #8]
 80023a6:	69fa      	ldr	r2, [r7, #28]
 80023a8:	68d2      	ldr	r2, [r2, #12]
 80023aa:	609a      	str	r2, [r3, #8]
 80023ac:	69fb      	ldr	r3, [r7, #28]
 80023ae:	68db      	ldr	r3, [r3, #12]
 80023b0:	69fa      	ldr	r2, [r7, #28]
 80023b2:	6892      	ldr	r2, [r2, #8]
 80023b4:	605a      	str	r2, [r3, #4]
 80023b6:	68bb      	ldr	r3, [r7, #8]
 80023b8:	685a      	ldr	r2, [r3, #4]
 80023ba:	69fb      	ldr	r3, [r7, #28]
 80023bc:	3304      	adds	r3, #4
 80023be:	429a      	cmp	r2, r3
 80023c0:	d103      	bne.n	80023ca <xTaskResumeAll+0xaa>
 80023c2:	69fb      	ldr	r3, [r7, #28]
 80023c4:	68da      	ldr	r2, [r3, #12]
 80023c6:	68bb      	ldr	r3, [r7, #8]
 80023c8:	605a      	str	r2, [r3, #4]
 80023ca:	69fb      	ldr	r3, [r7, #28]
 80023cc:	2200      	movs	r2, #0
 80023ce:	615a      	str	r2, [r3, #20]
 80023d0:	68bb      	ldr	r3, [r7, #8]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	1e5a      	subs	r2, r3, #1
 80023d6:	68bb      	ldr	r3, [r7, #8]
 80023d8:	601a      	str	r2, [r3, #0]
                        prvAddTaskToReadyList( pxTCB );
 80023da:	69fb      	ldr	r3, [r7, #28]
 80023dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023de:	2201      	movs	r2, #1
 80023e0:	409a      	lsls	r2, r3
 80023e2:	4b44      	ldr	r3, [pc, #272]	@ (80024f4 <xTaskResumeAll+0x1d4>)
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	4313      	orrs	r3, r2
 80023e8:	4a42      	ldr	r2, [pc, #264]	@ (80024f4 <xTaskResumeAll+0x1d4>)
 80023ea:	6013      	str	r3, [r2, #0]
 80023ec:	69fb      	ldr	r3, [r7, #28]
 80023ee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80023f0:	4941      	ldr	r1, [pc, #260]	@ (80024f8 <xTaskResumeAll+0x1d8>)
 80023f2:	4613      	mov	r3, r2
 80023f4:	009b      	lsls	r3, r3, #2
 80023f6:	4413      	add	r3, r2
 80023f8:	009b      	lsls	r3, r3, #2
 80023fa:	440b      	add	r3, r1
 80023fc:	3304      	adds	r3, #4
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	607b      	str	r3, [r7, #4]
 8002402:	69fb      	ldr	r3, [r7, #28]
 8002404:	687a      	ldr	r2, [r7, #4]
 8002406:	609a      	str	r2, [r3, #8]
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	689a      	ldr	r2, [r3, #8]
 800240c:	69fb      	ldr	r3, [r7, #28]
 800240e:	60da      	str	r2, [r3, #12]
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	689b      	ldr	r3, [r3, #8]
 8002414:	69fa      	ldr	r2, [r7, #28]
 8002416:	3204      	adds	r2, #4
 8002418:	605a      	str	r2, [r3, #4]
 800241a:	69fb      	ldr	r3, [r7, #28]
 800241c:	1d1a      	adds	r2, r3, #4
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	609a      	str	r2, [r3, #8]
 8002422:	69fb      	ldr	r3, [r7, #28]
 8002424:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002426:	4613      	mov	r3, r2
 8002428:	009b      	lsls	r3, r3, #2
 800242a:	4413      	add	r3, r2
 800242c:	009b      	lsls	r3, r3, #2
 800242e:	4a32      	ldr	r2, [pc, #200]	@ (80024f8 <xTaskResumeAll+0x1d8>)
 8002430:	441a      	add	r2, r3
 8002432:	69fb      	ldr	r3, [r7, #28]
 8002434:	615a      	str	r2, [r3, #20]
 8002436:	69fb      	ldr	r3, [r7, #28]
 8002438:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800243a:	492f      	ldr	r1, [pc, #188]	@ (80024f8 <xTaskResumeAll+0x1d8>)
 800243c:	4613      	mov	r3, r2
 800243e:	009b      	lsls	r3, r3, #2
 8002440:	4413      	add	r3, r2
 8002442:	009b      	lsls	r3, r3, #2
 8002444:	440b      	add	r3, r1
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	1c59      	adds	r1, r3, #1
 800244a:	482b      	ldr	r0, [pc, #172]	@ (80024f8 <xTaskResumeAll+0x1d8>)
 800244c:	4613      	mov	r3, r2
 800244e:	009b      	lsls	r3, r3, #2
 8002450:	4413      	add	r3, r2
 8002452:	009b      	lsls	r3, r3, #2
 8002454:	4403      	add	r3, r0
 8002456:	6019      	str	r1, [r3, #0]

                        #if ( configNUMBER_OF_CORES == 1 )
                        {
                            /* If the moved task has a priority higher than the current
                             * task then a yield must be performed. */
                            if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8002458:	69fb      	ldr	r3, [r7, #28]
 800245a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800245c:	4b27      	ldr	r3, [pc, #156]	@ (80024fc <xTaskResumeAll+0x1dc>)
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002462:	429a      	cmp	r2, r3
 8002464:	d904      	bls.n	8002470 <xTaskResumeAll+0x150>
                            {
                                xYieldPendings[ xCoreID ] = pdTRUE;
 8002466:	4a26      	ldr	r2, [pc, #152]	@ (8002500 <xTaskResumeAll+0x1e0>)
 8002468:	693b      	ldr	r3, [r7, #16]
 800246a:	2101      	movs	r1, #1
 800246c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                    while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002470:	4b1f      	ldr	r3, [pc, #124]	@ (80024f0 <xTaskResumeAll+0x1d0>)
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	2b00      	cmp	r3, #0
 8002476:	f47f af6e 	bne.w	8002356 <xTaskResumeAll+0x36>
                             * which sets xYieldPendings for the current core to pdTRUE. */
                        }
                        #endif /* #if ( configNUMBER_OF_CORES == 1 ) */
                    }

                    if( pxTCB != NULL )
 800247a:	69fb      	ldr	r3, [r7, #28]
 800247c:	2b00      	cmp	r3, #0
 800247e:	d001      	beq.n	8002484 <xTaskResumeAll+0x164>
                         * which may have prevented the next unblock time from being
                         * re-calculated, in which case re-calculate it now.  Mainly
                         * important for low power tickless implementations, where
                         * this can prevent an unnecessary exit from low power
                         * state. */
                        prvResetNextTaskUnblockTime();
 8002480:	f000 fae8 	bl	8002a54 <prvResetNextTaskUnblockTime>
                     * It should be safe to call xTaskIncrementTick here from any core
                     * since we are in a critical section and xTaskIncrementTick itself
                     * protects itself within a critical section. Suspending the scheduler
                     * from any core causes xTaskIncrementTick to increment uxPendedCounts. */
                    {
                        TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8002484:	4b1f      	ldr	r3, [pc, #124]	@ (8002504 <xTaskResumeAll+0x1e4>)
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	617b      	str	r3, [r7, #20]

                        if( xPendedCounts > ( TickType_t ) 0U )
 800248a:	697b      	ldr	r3, [r7, #20]
 800248c:	2b00      	cmp	r3, #0
 800248e:	d012      	beq.n	80024b6 <xTaskResumeAll+0x196>
                        {
                            do
                            {
                                if( xTaskIncrementTick() != pdFALSE )
 8002490:	f000 f848 	bl	8002524 <xTaskIncrementTick>
 8002494:	4603      	mov	r3, r0
 8002496:	2b00      	cmp	r3, #0
 8002498:	d004      	beq.n	80024a4 <xTaskResumeAll+0x184>
                                {
                                    /* Other cores are interrupted from
                                     * within xTaskIncrementTick(). */
                                    xYieldPendings[ xCoreID ] = pdTRUE;
 800249a:	4a19      	ldr	r2, [pc, #100]	@ (8002500 <xTaskResumeAll+0x1e0>)
 800249c:	693b      	ldr	r3, [r7, #16]
 800249e:	2101      	movs	r1, #1
 80024a0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                else
                                {
                                    mtCOVERAGE_TEST_MARKER();
                                }

                                --xPendedCounts;
 80024a4:	697b      	ldr	r3, [r7, #20]
 80024a6:	3b01      	subs	r3, #1
 80024a8:	617b      	str	r3, [r7, #20]
                            } while( xPendedCounts > ( TickType_t ) 0U );
 80024aa:	697b      	ldr	r3, [r7, #20]
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d1ef      	bne.n	8002490 <xTaskResumeAll+0x170>

                            xPendedTicks = 0;
 80024b0:	4b14      	ldr	r3, [pc, #80]	@ (8002504 <xTaskResumeAll+0x1e4>)
 80024b2:	2200      	movs	r2, #0
 80024b4:	601a      	str	r2, [r3, #0]
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }

                    if( xYieldPendings[ xCoreID ] != pdFALSE )
 80024b6:	4a12      	ldr	r2, [pc, #72]	@ (8002500 <xTaskResumeAll+0x1e0>)
 80024b8:	693b      	ldr	r3, [r7, #16]
 80024ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d00b      	beq.n	80024da <xTaskResumeAll+0x1ba>
                    {
                        #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 80024c2:	2301      	movs	r3, #1
 80024c4:	61bb      	str	r3, [r7, #24]
                        }
                        #endif /* #if ( configUSE_PREEMPTION != 0 ) */

                        #if ( configNUMBER_OF_CORES == 1 )
                        {
                            taskYIELD_TASK_CORE_IF_USING_PREEMPTION( pxCurrentTCB );
 80024c6:	4b0d      	ldr	r3, [pc, #52]	@ (80024fc <xTaskResumeAll+0x1dc>)
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	4b0f      	ldr	r3, [pc, #60]	@ (8002508 <xTaskResumeAll+0x1e8>)
 80024cc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80024d0:	601a      	str	r2, [r3, #0]
 80024d2:	f3bf 8f4f 	dsb	sy
 80024d6:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 80024da:	f000 fc0f 	bl	8002cfc <vPortExitCritical>
    }

    traceRETURN_xTaskResumeAll( xAlreadyYielded );

    return xAlreadyYielded;
 80024de:	69bb      	ldr	r3, [r7, #24]
}
 80024e0:	4618      	mov	r0, r3
 80024e2:	3720      	adds	r7, #32
 80024e4:	46bd      	mov	sp, r7
 80024e6:	bd80      	pop	{r7, pc}
 80024e8:	20000188 	.word	0x20000188
 80024ec:	2000016c 	.word	0x2000016c
 80024f0:	20000144 	.word	0x20000144
 80024f4:	20000174 	.word	0x20000174
 80024f8:	200000d8 	.word	0x200000d8
 80024fc:	200000d4 	.word	0x200000d4
 8002500:	2000017c 	.word	0x2000017c
 8002504:	20000178 	.word	0x20000178
 8002508:	e000ed04 	.word	0xe000ed04

0800250c <uxTaskGetNumberOfTasks>:
    return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxTaskGetNumberOfTasks( void )
{
 800250c:	b480      	push	{r7}
 800250e:	af00      	add	r7, sp, #0

    /* A critical section is not required because the variables are of type
     * BaseType_t. */
    traceRETURN_uxTaskGetNumberOfTasks( uxCurrentNumberOfTasks );

    return uxCurrentNumberOfTasks;
 8002510:	4b03      	ldr	r3, [pc, #12]	@ (8002520 <uxTaskGetNumberOfTasks+0x14>)
 8002512:	681b      	ldr	r3, [r3, #0]
}
 8002514:	4618      	mov	r0, r3
 8002516:	46bd      	mov	sp, r7
 8002518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251c:	4770      	bx	lr
 800251e:	bf00      	nop
 8002520:	2000016c 	.word	0x2000016c

08002524 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002524:	b580      	push	{r7, lr}
 8002526:	b088      	sub	sp, #32
 8002528:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 800252a:	2300      	movs	r3, #0
 800252c:	61fb      	str	r3, [r7, #28]

    /* Tick increment should occur on every kernel timer event. Core 0 has the
     * responsibility to increment the tick, or increment the pended ticks if the
     * scheduler is suspended.  If pended ticks is greater than zero, the core that
     * calls xTaskResumeAll has the responsibility to increment the tick. */
    if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 800252e:	4b75      	ldr	r3, [pc, #468]	@ (8002704 <xTaskIncrementTick+0x1e0>)
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	2b00      	cmp	r3, #0
 8002534:	f040 80dc 	bne.w	80026f0 <xTaskIncrementTick+0x1cc>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002538:	4b73      	ldr	r3, [pc, #460]	@ (8002708 <xTaskIncrementTick+0x1e4>)
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	3301      	adds	r3, #1
 800253e:	61bb      	str	r3, [r7, #24]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8002540:	4a71      	ldr	r2, [pc, #452]	@ (8002708 <xTaskIncrementTick+0x1e4>)
 8002542:	69bb      	ldr	r3, [r7, #24]
 8002544:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U )
 8002546:	69bb      	ldr	r3, [r7, #24]
 8002548:	2b00      	cmp	r3, #0
 800254a:	d110      	bne.n	800256e <xTaskIncrementTick+0x4a>
        {
            taskSWITCH_DELAYED_LISTS();
 800254c:	4b6f      	ldr	r3, [pc, #444]	@ (800270c <xTaskIncrementTick+0x1e8>)
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	617b      	str	r3, [r7, #20]
 8002552:	4b6f      	ldr	r3, [pc, #444]	@ (8002710 <xTaskIncrementTick+0x1ec>)
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	4a6d      	ldr	r2, [pc, #436]	@ (800270c <xTaskIncrementTick+0x1e8>)
 8002558:	6013      	str	r3, [r2, #0]
 800255a:	4a6d      	ldr	r2, [pc, #436]	@ (8002710 <xTaskIncrementTick+0x1ec>)
 800255c:	697b      	ldr	r3, [r7, #20]
 800255e:	6013      	str	r3, [r2, #0]
 8002560:	4b6c      	ldr	r3, [pc, #432]	@ (8002714 <xTaskIncrementTick+0x1f0>)
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	3301      	adds	r3, #1
 8002566:	4a6b      	ldr	r2, [pc, #428]	@ (8002714 <xTaskIncrementTick+0x1f0>)
 8002568:	6013      	str	r3, [r2, #0]
 800256a:	f000 fa73 	bl	8002a54 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 800256e:	4b6a      	ldr	r3, [pc, #424]	@ (8002718 <xTaskIncrementTick+0x1f4>)
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	69ba      	ldr	r2, [r7, #24]
 8002574:	429a      	cmp	r2, r3
 8002576:	f0c0 80a6 	bcc.w	80026c6 <xTaskIncrementTick+0x1a2>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800257a:	4b64      	ldr	r3, [pc, #400]	@ (800270c <xTaskIncrementTick+0x1e8>)
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	2b00      	cmp	r3, #0
 8002582:	d104      	bne.n	800258e <xTaskIncrementTick+0x6a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY;
 8002584:	4b64      	ldr	r3, [pc, #400]	@ (8002718 <xTaskIncrementTick+0x1f4>)
 8002586:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800258a:	601a      	str	r2, [r3, #0]
                    break;
 800258c:	e09b      	b.n	80026c6 <xTaskIncrementTick+0x1a2>
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    /* MISRA Ref 11.5.3 [Void pointer assignment] */
                    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                    /* coverity[misra_c_2012_rule_11_5_violation] */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800258e:	4b5f      	ldr	r3, [pc, #380]	@ (800270c <xTaskIncrementTick+0x1e8>)
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	68db      	ldr	r3, [r3, #12]
 8002594:	68db      	ldr	r3, [r3, #12]
 8002596:	613b      	str	r3, [r7, #16]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002598:	693b      	ldr	r3, [r7, #16]
 800259a:	685b      	ldr	r3, [r3, #4]
 800259c:	60fb      	str	r3, [r7, #12]

                    if( xConstTickCount < xItemValue )
 800259e:	69ba      	ldr	r2, [r7, #24]
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	429a      	cmp	r2, r3
 80025a4:	d203      	bcs.n	80025ae <xTaskIncrementTick+0x8a>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 80025a6:	4a5c      	ldr	r2, [pc, #368]	@ (8002718 <xTaskIncrementTick+0x1f4>)
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	6013      	str	r3, [r2, #0]
                        break;
 80025ac:	e08b      	b.n	80026c6 <xTaskIncrementTick+0x1a2>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 80025ae:	693b      	ldr	r3, [r7, #16]
 80025b0:	695b      	ldr	r3, [r3, #20]
 80025b2:	60bb      	str	r3, [r7, #8]
 80025b4:	693b      	ldr	r3, [r7, #16]
 80025b6:	689b      	ldr	r3, [r3, #8]
 80025b8:	693a      	ldr	r2, [r7, #16]
 80025ba:	68d2      	ldr	r2, [r2, #12]
 80025bc:	609a      	str	r2, [r3, #8]
 80025be:	693b      	ldr	r3, [r7, #16]
 80025c0:	68db      	ldr	r3, [r3, #12]
 80025c2:	693a      	ldr	r2, [r7, #16]
 80025c4:	6892      	ldr	r2, [r2, #8]
 80025c6:	605a      	str	r2, [r3, #4]
 80025c8:	68bb      	ldr	r3, [r7, #8]
 80025ca:	685a      	ldr	r2, [r3, #4]
 80025cc:	693b      	ldr	r3, [r7, #16]
 80025ce:	3304      	adds	r3, #4
 80025d0:	429a      	cmp	r2, r3
 80025d2:	d103      	bne.n	80025dc <xTaskIncrementTick+0xb8>
 80025d4:	693b      	ldr	r3, [r7, #16]
 80025d6:	68da      	ldr	r2, [r3, #12]
 80025d8:	68bb      	ldr	r3, [r7, #8]
 80025da:	605a      	str	r2, [r3, #4]
 80025dc:	693b      	ldr	r3, [r7, #16]
 80025de:	2200      	movs	r2, #0
 80025e0:	615a      	str	r2, [r3, #20]
 80025e2:	68bb      	ldr	r3, [r7, #8]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	1e5a      	subs	r2, r3, #1
 80025e8:	68bb      	ldr	r3, [r7, #8]
 80025ea:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80025ec:	693b      	ldr	r3, [r7, #16]
 80025ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d01e      	beq.n	8002632 <xTaskIncrementTick+0x10e>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 80025f4:	693b      	ldr	r3, [r7, #16]
 80025f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025f8:	607b      	str	r3, [r7, #4]
 80025fa:	693b      	ldr	r3, [r7, #16]
 80025fc:	69db      	ldr	r3, [r3, #28]
 80025fe:	693a      	ldr	r2, [r7, #16]
 8002600:	6a12      	ldr	r2, [r2, #32]
 8002602:	609a      	str	r2, [r3, #8]
 8002604:	693b      	ldr	r3, [r7, #16]
 8002606:	6a1b      	ldr	r3, [r3, #32]
 8002608:	693a      	ldr	r2, [r7, #16]
 800260a:	69d2      	ldr	r2, [r2, #28]
 800260c:	605a      	str	r2, [r3, #4]
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	685a      	ldr	r2, [r3, #4]
 8002612:	693b      	ldr	r3, [r7, #16]
 8002614:	3318      	adds	r3, #24
 8002616:	429a      	cmp	r2, r3
 8002618:	d103      	bne.n	8002622 <xTaskIncrementTick+0xfe>
 800261a:	693b      	ldr	r3, [r7, #16]
 800261c:	6a1a      	ldr	r2, [r3, #32]
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	605a      	str	r2, [r3, #4]
 8002622:	693b      	ldr	r3, [r7, #16]
 8002624:	2200      	movs	r2, #0
 8002626:	629a      	str	r2, [r3, #40]	@ 0x28
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	1e5a      	subs	r2, r3, #1
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8002632:	693b      	ldr	r3, [r7, #16]
 8002634:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002636:	2201      	movs	r2, #1
 8002638:	409a      	lsls	r2, r3
 800263a:	4b38      	ldr	r3, [pc, #224]	@ (800271c <xTaskIncrementTick+0x1f8>)
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	4313      	orrs	r3, r2
 8002640:	4a36      	ldr	r2, [pc, #216]	@ (800271c <xTaskIncrementTick+0x1f8>)
 8002642:	6013      	str	r3, [r2, #0]
 8002644:	693b      	ldr	r3, [r7, #16]
 8002646:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002648:	4935      	ldr	r1, [pc, #212]	@ (8002720 <xTaskIncrementTick+0x1fc>)
 800264a:	4613      	mov	r3, r2
 800264c:	009b      	lsls	r3, r3, #2
 800264e:	4413      	add	r3, r2
 8002650:	009b      	lsls	r3, r3, #2
 8002652:	440b      	add	r3, r1
 8002654:	3304      	adds	r3, #4
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	603b      	str	r3, [r7, #0]
 800265a:	693b      	ldr	r3, [r7, #16]
 800265c:	683a      	ldr	r2, [r7, #0]
 800265e:	609a      	str	r2, [r3, #8]
 8002660:	683b      	ldr	r3, [r7, #0]
 8002662:	689a      	ldr	r2, [r3, #8]
 8002664:	693b      	ldr	r3, [r7, #16]
 8002666:	60da      	str	r2, [r3, #12]
 8002668:	683b      	ldr	r3, [r7, #0]
 800266a:	689b      	ldr	r3, [r3, #8]
 800266c:	693a      	ldr	r2, [r7, #16]
 800266e:	3204      	adds	r2, #4
 8002670:	605a      	str	r2, [r3, #4]
 8002672:	693b      	ldr	r3, [r7, #16]
 8002674:	1d1a      	adds	r2, r3, #4
 8002676:	683b      	ldr	r3, [r7, #0]
 8002678:	609a      	str	r2, [r3, #8]
 800267a:	693b      	ldr	r3, [r7, #16]
 800267c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800267e:	4613      	mov	r3, r2
 8002680:	009b      	lsls	r3, r3, #2
 8002682:	4413      	add	r3, r2
 8002684:	009b      	lsls	r3, r3, #2
 8002686:	4a26      	ldr	r2, [pc, #152]	@ (8002720 <xTaskIncrementTick+0x1fc>)
 8002688:	441a      	add	r2, r3
 800268a:	693b      	ldr	r3, [r7, #16]
 800268c:	615a      	str	r2, [r3, #20]
 800268e:	693b      	ldr	r3, [r7, #16]
 8002690:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002692:	4923      	ldr	r1, [pc, #140]	@ (8002720 <xTaskIncrementTick+0x1fc>)
 8002694:	4613      	mov	r3, r2
 8002696:	009b      	lsls	r3, r3, #2
 8002698:	4413      	add	r3, r2
 800269a:	009b      	lsls	r3, r3, #2
 800269c:	440b      	add	r3, r1
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	1c59      	adds	r1, r3, #1
 80026a2:	481f      	ldr	r0, [pc, #124]	@ (8002720 <xTaskIncrementTick+0x1fc>)
 80026a4:	4613      	mov	r3, r2
 80026a6:	009b      	lsls	r3, r3, #2
 80026a8:	4413      	add	r3, r2
 80026aa:	009b      	lsls	r3, r3, #2
 80026ac:	4403      	add	r3, r0
 80026ae:	6019      	str	r1, [r3, #0]
                             * task.
                             * The case of equal priority tasks sharing
                             * processing time (which happens when both
                             * preemption and time slicing are on) is
                             * handled below.*/
                            if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80026b0:	693b      	ldr	r3, [r7, #16]
 80026b2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80026b4:	4b1b      	ldr	r3, [pc, #108]	@ (8002724 <xTaskIncrementTick+0x200>)
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026ba:	429a      	cmp	r2, r3
 80026bc:	f67f af5d 	bls.w	800257a <xTaskIncrementTick+0x56>
                            {
                                xSwitchRequired = pdTRUE;
 80026c0:	2301      	movs	r3, #1
 80026c2:	61fb      	str	r3, [r7, #28]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80026c4:	e759      	b.n	800257a <xTaskIncrementTick+0x56>
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            #if ( configNUMBER_OF_CORES == 1 )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > 1U )
 80026c6:	4b17      	ldr	r3, [pc, #92]	@ (8002724 <xTaskIncrementTick+0x200>)
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80026cc:	4914      	ldr	r1, [pc, #80]	@ (8002720 <xTaskIncrementTick+0x1fc>)
 80026ce:	4613      	mov	r3, r2
 80026d0:	009b      	lsls	r3, r3, #2
 80026d2:	4413      	add	r3, r2
 80026d4:	009b      	lsls	r3, r3, #2
 80026d6:	440b      	add	r3, r1
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	2b01      	cmp	r3, #1
 80026dc:	d901      	bls.n	80026e2 <xTaskIncrementTick+0x1be>
                {
                    xSwitchRequired = pdTRUE;
 80026de:	2301      	movs	r3, #1
 80026e0:	61fb      	str	r3, [r7, #28]
        #if ( configUSE_PREEMPTION == 1 )
        {
            #if ( configNUMBER_OF_CORES == 1 )
            {
                /* For single core the core ID is always 0. */
                if( xYieldPendings[ 0 ] != pdFALSE )
 80026e2:	4b11      	ldr	r3, [pc, #68]	@ (8002728 <xTaskIncrementTick+0x204>)
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d007      	beq.n	80026fa <xTaskIncrementTick+0x1d6>
                {
                    xSwitchRequired = pdTRUE;
 80026ea:	2301      	movs	r3, #1
 80026ec:	61fb      	str	r3, [r7, #28]
 80026ee:	e004      	b.n	80026fa <xTaskIncrementTick+0x1d6>
        }
        #endif /* #if ( configUSE_PREEMPTION == 1 ) */
    }
    else
    {
        ++xPendedTicks;
 80026f0:	4b0e      	ldr	r3, [pc, #56]	@ (800272c <xTaskIncrementTick+0x208>)
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	3301      	adds	r3, #1
 80026f6:	4a0d      	ldr	r2, [pc, #52]	@ (800272c <xTaskIncrementTick+0x208>)
 80026f8:	6013      	str	r3, [r2, #0]
        #endif
    }

    traceRETURN_xTaskIncrementTick( xSwitchRequired );

    return xSwitchRequired;
 80026fa:	69fb      	ldr	r3, [r7, #28]
}
 80026fc:	4618      	mov	r0, r3
 80026fe:	3720      	adds	r7, #32
 8002700:	46bd      	mov	sp, r7
 8002702:	bd80      	pop	{r7, pc}
 8002704:	20000188 	.word	0x20000188
 8002708:	20000170 	.word	0x20000170
 800270c:	2000013c 	.word	0x2000013c
 8002710:	20000140 	.word	0x20000140
 8002714:	20000180 	.word	0x20000180
 8002718:	20000184 	.word	0x20000184
 800271c:	20000174 	.word	0x20000174
 8002720:	200000d8 	.word	0x200000d8
 8002724:	200000d4 	.word	0x200000d4
 8002728:	2000017c 	.word	0x2000017c
 800272c:	20000178 	.word	0x20000178

08002730 <vTaskSwitchContext>:
#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

#if ( configNUMBER_OF_CORES == 1 )
    void vTaskSwitchContext( void )
    {
 8002730:	b480      	push	{r7}
 8002732:	b085      	sub	sp, #20
 8002734:	af00      	add	r7, sp, #0
        traceENTER_vTaskSwitchContext();

        if( uxSchedulerSuspended != ( UBaseType_t ) 0U )
 8002736:	4b1d      	ldr	r3, [pc, #116]	@ (80027ac <vTaskSwitchContext+0x7c>)
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	2b00      	cmp	r3, #0
 800273c:	d003      	beq.n	8002746 <vTaskSwitchContext+0x16>
        {
            /* The scheduler is currently suspended - do not allow a context
             * switch. */
            xYieldPendings[ 0 ] = pdTRUE;
 800273e:	4b1c      	ldr	r3, [pc, #112]	@ (80027b0 <vTaskSwitchContext+0x80>)
 8002740:	2201      	movs	r2, #1
 8002742:	601a      	str	r2, [r3, #0]
            }
            #endif
        }

        traceRETURN_vTaskSwitchContext();
    }
 8002744:	e02b      	b.n	800279e <vTaskSwitchContext+0x6e>
            xYieldPendings[ 0 ] = pdFALSE;
 8002746:	4b1a      	ldr	r3, [pc, #104]	@ (80027b0 <vTaskSwitchContext+0x80>)
 8002748:	2200      	movs	r2, #0
 800274a:	601a      	str	r2, [r3, #0]
            taskSELECT_HIGHEST_PRIORITY_TASK();
 800274c:	4b19      	ldr	r3, [pc, #100]	@ (80027b4 <vTaskSwitchContext+0x84>)
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	607b      	str	r3, [r7, #4]
        __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	fab3 f383 	clz	r3, r3
 8002758:	70fb      	strb	r3, [r7, #3]
        return ucReturn;
 800275a:	78fb      	ldrb	r3, [r7, #3]
 800275c:	f1c3 031f 	rsb	r3, r3, #31
 8002760:	60fb      	str	r3, [r7, #12]
 8002762:	68fa      	ldr	r2, [r7, #12]
 8002764:	4613      	mov	r3, r2
 8002766:	009b      	lsls	r3, r3, #2
 8002768:	4413      	add	r3, r2
 800276a:	009b      	lsls	r3, r3, #2
 800276c:	4a12      	ldr	r2, [pc, #72]	@ (80027b8 <vTaskSwitchContext+0x88>)
 800276e:	4413      	add	r3, r2
 8002770:	60bb      	str	r3, [r7, #8]
 8002772:	68bb      	ldr	r3, [r7, #8]
 8002774:	685b      	ldr	r3, [r3, #4]
 8002776:	685a      	ldr	r2, [r3, #4]
 8002778:	68bb      	ldr	r3, [r7, #8]
 800277a:	605a      	str	r2, [r3, #4]
 800277c:	68bb      	ldr	r3, [r7, #8]
 800277e:	685a      	ldr	r2, [r3, #4]
 8002780:	68bb      	ldr	r3, [r7, #8]
 8002782:	3308      	adds	r3, #8
 8002784:	429a      	cmp	r2, r3
 8002786:	d103      	bne.n	8002790 <vTaskSwitchContext+0x60>
 8002788:	68bb      	ldr	r3, [r7, #8]
 800278a:	68da      	ldr	r2, [r3, #12]
 800278c:	68bb      	ldr	r3, [r7, #8]
 800278e:	605a      	str	r2, [r3, #4]
 8002790:	68bb      	ldr	r3, [r7, #8]
 8002792:	685b      	ldr	r3, [r3, #4]
 8002794:	68db      	ldr	r3, [r3, #12]
 8002796:	4a09      	ldr	r2, [pc, #36]	@ (80027bc <vTaskSwitchContext+0x8c>)
 8002798:	6013      	str	r3, [r2, #0]
            portTASK_SWITCH_HOOK( pxCurrentTCB );
 800279a:	4b08      	ldr	r3, [pc, #32]	@ (80027bc <vTaskSwitchContext+0x8c>)
 800279c:	681b      	ldr	r3, [r3, #0]
    }
 800279e:	bf00      	nop
 80027a0:	3714      	adds	r7, #20
 80027a2:	46bd      	mov	sp, r7
 80027a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a8:	4770      	bx	lr
 80027aa:	bf00      	nop
 80027ac:	20000188 	.word	0x20000188
 80027b0:	2000017c 	.word	0x2000017c
 80027b4:	20000174 	.word	0x20000174
 80027b8:	200000d8 	.word	0x200000d8
 80027bc:	200000d4 	.word	0x200000d4

080027c0 <vTaskPlaceOnEventList>:
#endif /* if ( configNUMBER_OF_CORES > 1 ) */
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 80027c0:	b580      	push	{r7, lr}
 80027c2:	b082      	sub	sp, #8
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]
 80027c8:	6039      	str	r1, [r7, #0]
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80027ca:	4b07      	ldr	r3, [pc, #28]	@ (80027e8 <vTaskPlaceOnEventList+0x28>)
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	3318      	adds	r3, #24
 80027d0:	4619      	mov	r1, r3
 80027d2:	6878      	ldr	r0, [r7, #4]
 80027d4:	f7ff fa8a 	bl	8001cec <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80027d8:	2101      	movs	r1, #1
 80027da:	6838      	ldr	r0, [r7, #0]
 80027dc:	f000 f9d8 	bl	8002b90 <prvAddCurrentTaskToDelayedList>

    traceRETURN_vTaskPlaceOnEventList();
}
 80027e0:	bf00      	nop
 80027e2:	3708      	adds	r7, #8
 80027e4:	46bd      	mov	sp, r7
 80027e6:	bd80      	pop	{r7, pc}
 80027e8:	200000d4 	.word	0x200000d4

080027ec <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80027ec:	b480      	push	{r7}
 80027ee:	b089      	sub	sp, #36	@ 0x24
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	6078      	str	r0, [r7, #4]
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    /* MISRA Ref 11.5.3 [Void pointer assignment] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
    /* coverity[misra_c_2012_rule_11_5_violation] */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	68db      	ldr	r3, [r3, #12]
 80027f8:	68db      	ldr	r3, [r3, #12]
 80027fa:	61bb      	str	r3, [r7, #24]
    configASSERT( pxUnblockedTCB );
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 80027fc:	69bb      	ldr	r3, [r7, #24]
 80027fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002800:	617b      	str	r3, [r7, #20]
 8002802:	69bb      	ldr	r3, [r7, #24]
 8002804:	69db      	ldr	r3, [r3, #28]
 8002806:	69ba      	ldr	r2, [r7, #24]
 8002808:	6a12      	ldr	r2, [r2, #32]
 800280a:	609a      	str	r2, [r3, #8]
 800280c:	69bb      	ldr	r3, [r7, #24]
 800280e:	6a1b      	ldr	r3, [r3, #32]
 8002810:	69ba      	ldr	r2, [r7, #24]
 8002812:	69d2      	ldr	r2, [r2, #28]
 8002814:	605a      	str	r2, [r3, #4]
 8002816:	697b      	ldr	r3, [r7, #20]
 8002818:	685a      	ldr	r2, [r3, #4]
 800281a:	69bb      	ldr	r3, [r7, #24]
 800281c:	3318      	adds	r3, #24
 800281e:	429a      	cmp	r2, r3
 8002820:	d103      	bne.n	800282a <xTaskRemoveFromEventList+0x3e>
 8002822:	69bb      	ldr	r3, [r7, #24]
 8002824:	6a1a      	ldr	r2, [r3, #32]
 8002826:	697b      	ldr	r3, [r7, #20]
 8002828:	605a      	str	r2, [r3, #4]
 800282a:	69bb      	ldr	r3, [r7, #24]
 800282c:	2200      	movs	r2, #0
 800282e:	629a      	str	r2, [r3, #40]	@ 0x28
 8002830:	697b      	ldr	r3, [r7, #20]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	1e5a      	subs	r2, r3, #1
 8002836:	697b      	ldr	r3, [r7, #20]
 8002838:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 800283a:	4b4a      	ldr	r3, [pc, #296]	@ (8002964 <xTaskRemoveFromEventList+0x178>)
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	2b00      	cmp	r3, #0
 8002840:	d15e      	bne.n	8002900 <xTaskRemoveFromEventList+0x114>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 8002842:	69bb      	ldr	r3, [r7, #24]
 8002844:	695b      	ldr	r3, [r3, #20]
 8002846:	60fb      	str	r3, [r7, #12]
 8002848:	69bb      	ldr	r3, [r7, #24]
 800284a:	689b      	ldr	r3, [r3, #8]
 800284c:	69ba      	ldr	r2, [r7, #24]
 800284e:	68d2      	ldr	r2, [r2, #12]
 8002850:	609a      	str	r2, [r3, #8]
 8002852:	69bb      	ldr	r3, [r7, #24]
 8002854:	68db      	ldr	r3, [r3, #12]
 8002856:	69ba      	ldr	r2, [r7, #24]
 8002858:	6892      	ldr	r2, [r2, #8]
 800285a:	605a      	str	r2, [r3, #4]
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	685a      	ldr	r2, [r3, #4]
 8002860:	69bb      	ldr	r3, [r7, #24]
 8002862:	3304      	adds	r3, #4
 8002864:	429a      	cmp	r2, r3
 8002866:	d103      	bne.n	8002870 <xTaskRemoveFromEventList+0x84>
 8002868:	69bb      	ldr	r3, [r7, #24]
 800286a:	68da      	ldr	r2, [r3, #12]
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	605a      	str	r2, [r3, #4]
 8002870:	69bb      	ldr	r3, [r7, #24]
 8002872:	2200      	movs	r2, #0
 8002874:	615a      	str	r2, [r3, #20]
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	1e5a      	subs	r2, r3, #1
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 8002880:	69bb      	ldr	r3, [r7, #24]
 8002882:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002884:	2201      	movs	r2, #1
 8002886:	409a      	lsls	r2, r3
 8002888:	4b37      	ldr	r3, [pc, #220]	@ (8002968 <xTaskRemoveFromEventList+0x17c>)
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	4313      	orrs	r3, r2
 800288e:	4a36      	ldr	r2, [pc, #216]	@ (8002968 <xTaskRemoveFromEventList+0x17c>)
 8002890:	6013      	str	r3, [r2, #0]
 8002892:	69bb      	ldr	r3, [r7, #24]
 8002894:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002896:	4935      	ldr	r1, [pc, #212]	@ (800296c <xTaskRemoveFromEventList+0x180>)
 8002898:	4613      	mov	r3, r2
 800289a:	009b      	lsls	r3, r3, #2
 800289c:	4413      	add	r3, r2
 800289e:	009b      	lsls	r3, r3, #2
 80028a0:	440b      	add	r3, r1
 80028a2:	3304      	adds	r3, #4
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	60bb      	str	r3, [r7, #8]
 80028a8:	69bb      	ldr	r3, [r7, #24]
 80028aa:	68ba      	ldr	r2, [r7, #8]
 80028ac:	609a      	str	r2, [r3, #8]
 80028ae:	68bb      	ldr	r3, [r7, #8]
 80028b0:	689a      	ldr	r2, [r3, #8]
 80028b2:	69bb      	ldr	r3, [r7, #24]
 80028b4:	60da      	str	r2, [r3, #12]
 80028b6:	68bb      	ldr	r3, [r7, #8]
 80028b8:	689b      	ldr	r3, [r3, #8]
 80028ba:	69ba      	ldr	r2, [r7, #24]
 80028bc:	3204      	adds	r2, #4
 80028be:	605a      	str	r2, [r3, #4]
 80028c0:	69bb      	ldr	r3, [r7, #24]
 80028c2:	1d1a      	adds	r2, r3, #4
 80028c4:	68bb      	ldr	r3, [r7, #8]
 80028c6:	609a      	str	r2, [r3, #8]
 80028c8:	69bb      	ldr	r3, [r7, #24]
 80028ca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80028cc:	4613      	mov	r3, r2
 80028ce:	009b      	lsls	r3, r3, #2
 80028d0:	4413      	add	r3, r2
 80028d2:	009b      	lsls	r3, r3, #2
 80028d4:	4a25      	ldr	r2, [pc, #148]	@ (800296c <xTaskRemoveFromEventList+0x180>)
 80028d6:	441a      	add	r2, r3
 80028d8:	69bb      	ldr	r3, [r7, #24]
 80028da:	615a      	str	r2, [r3, #20]
 80028dc:	69bb      	ldr	r3, [r7, #24]
 80028de:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80028e0:	4922      	ldr	r1, [pc, #136]	@ (800296c <xTaskRemoveFromEventList+0x180>)
 80028e2:	4613      	mov	r3, r2
 80028e4:	009b      	lsls	r3, r3, #2
 80028e6:	4413      	add	r3, r2
 80028e8:	009b      	lsls	r3, r3, #2
 80028ea:	440b      	add	r3, r1
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	1c59      	adds	r1, r3, #1
 80028f0:	481e      	ldr	r0, [pc, #120]	@ (800296c <xTaskRemoveFromEventList+0x180>)
 80028f2:	4613      	mov	r3, r2
 80028f4:	009b      	lsls	r3, r3, #2
 80028f6:	4413      	add	r3, r2
 80028f8:	009b      	lsls	r3, r3, #2
 80028fa:	4403      	add	r3, r0
 80028fc:	6019      	str	r1, [r3, #0]
 80028fe:	e01b      	b.n	8002938 <xTaskRemoveFromEventList+0x14c>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8002900:	4b1b      	ldr	r3, [pc, #108]	@ (8002970 <xTaskRemoveFromEventList+0x184>)
 8002902:	685b      	ldr	r3, [r3, #4]
 8002904:	613b      	str	r3, [r7, #16]
 8002906:	69bb      	ldr	r3, [r7, #24]
 8002908:	693a      	ldr	r2, [r7, #16]
 800290a:	61da      	str	r2, [r3, #28]
 800290c:	693b      	ldr	r3, [r7, #16]
 800290e:	689a      	ldr	r2, [r3, #8]
 8002910:	69bb      	ldr	r3, [r7, #24]
 8002912:	621a      	str	r2, [r3, #32]
 8002914:	693b      	ldr	r3, [r7, #16]
 8002916:	689b      	ldr	r3, [r3, #8]
 8002918:	69ba      	ldr	r2, [r7, #24]
 800291a:	3218      	adds	r2, #24
 800291c:	605a      	str	r2, [r3, #4]
 800291e:	69bb      	ldr	r3, [r7, #24]
 8002920:	f103 0218 	add.w	r2, r3, #24
 8002924:	693b      	ldr	r3, [r7, #16]
 8002926:	609a      	str	r2, [r3, #8]
 8002928:	69bb      	ldr	r3, [r7, #24]
 800292a:	4a11      	ldr	r2, [pc, #68]	@ (8002970 <xTaskRemoveFromEventList+0x184>)
 800292c:	629a      	str	r2, [r3, #40]	@ 0x28
 800292e:	4b10      	ldr	r3, [pc, #64]	@ (8002970 <xTaskRemoveFromEventList+0x184>)
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	3301      	adds	r3, #1
 8002934:	4a0e      	ldr	r2, [pc, #56]	@ (8002970 <xTaskRemoveFromEventList+0x184>)
 8002936:	6013      	str	r3, [r2, #0]
    }

    #if ( configNUMBER_OF_CORES == 1 )
    {
        if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8002938:	69bb      	ldr	r3, [r7, #24]
 800293a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800293c:	4b0d      	ldr	r3, [pc, #52]	@ (8002974 <xTaskRemoveFromEventList+0x188>)
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002942:	429a      	cmp	r2, r3
 8002944:	d905      	bls.n	8002952 <xTaskRemoveFromEventList+0x166>
        {
            /* Return true if the task removed from the event list has a higher
             * priority than the calling task.  This allows the calling task to know if
             * it should force a context switch now. */
            xReturn = pdTRUE;
 8002946:	2301      	movs	r3, #1
 8002948:	61fb      	str	r3, [r7, #28]

            /* Mark that a yield is pending in case the user is not using the
             * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
            xYieldPendings[ 0 ] = pdTRUE;
 800294a:	4b0b      	ldr	r3, [pc, #44]	@ (8002978 <xTaskRemoveFromEventList+0x18c>)
 800294c:	2201      	movs	r2, #1
 800294e:	601a      	str	r2, [r3, #0]
 8002950:	e001      	b.n	8002956 <xTaskRemoveFromEventList+0x16a>
        }
        else
        {
            xReturn = pdFALSE;
 8002952:	2300      	movs	r3, #0
 8002954:	61fb      	str	r3, [r7, #28]
        #endif /* #if ( configUSE_PREEMPTION == 1 ) */
    }
    #endif /* #if ( configNUMBER_OF_CORES == 1 ) */

    traceRETURN_xTaskRemoveFromEventList( xReturn );
    return xReturn;
 8002956:	69fb      	ldr	r3, [r7, #28]
}
 8002958:	4618      	mov	r0, r3
 800295a:	3724      	adds	r7, #36	@ 0x24
 800295c:	46bd      	mov	sp, r7
 800295e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002962:	4770      	bx	lr
 8002964:	20000188 	.word	0x20000188
 8002968:	20000174 	.word	0x20000174
 800296c:	200000d8 	.word	0x200000d8
 8002970:	20000144 	.word	0x20000144
 8002974:	200000d4 	.word	0x200000d4
 8002978:	2000017c 	.word	0x2000017c

0800297c <vTaskInternalSetTimeOutState>:
    traceRETURN_vTaskSetTimeOutState();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800297c:	b480      	push	{r7}
 800297e:	b083      	sub	sp, #12
 8002980:	af00      	add	r7, sp, #0
 8002982:	6078      	str	r0, [r7, #4]
    traceENTER_vTaskInternalSetTimeOutState( pxTimeOut );

    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8002984:	4b06      	ldr	r3, [pc, #24]	@ (80029a0 <vTaskInternalSetTimeOutState+0x24>)
 8002986:	681a      	ldr	r2, [r3, #0]
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 800298c:	4b05      	ldr	r3, [pc, #20]	@ (80029a4 <vTaskInternalSetTimeOutState+0x28>)
 800298e:	681a      	ldr	r2, [r3, #0]
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	605a      	str	r2, [r3, #4]

    traceRETURN_vTaskInternalSetTimeOutState();
}
 8002994:	bf00      	nop
 8002996:	370c      	adds	r7, #12
 8002998:	46bd      	mov	sp, r7
 800299a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299e:	4770      	bx	lr
 80029a0:	20000180 	.word	0x20000180
 80029a4:	20000170 	.word	0x20000170

080029a8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 80029a8:	b580      	push	{r7, lr}
 80029aa:	b086      	sub	sp, #24
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	6078      	str	r0, [r7, #4]
 80029b0:	6039      	str	r1, [r7, #0]
    traceENTER_xTaskCheckForTimeOut( pxTimeOut, pxTicksToWait );

    configASSERT( pxTimeOut );
    configASSERT( pxTicksToWait );

    taskENTER_CRITICAL();
 80029b2:	f000 f989 	bl	8002cc8 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 80029b6:	4b1f      	ldr	r3, [pc, #124]	@ (8002a34 <xTaskCheckForTimeOut+0x8c>)
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	613b      	str	r3, [r7, #16]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	685b      	ldr	r3, [r3, #4]
 80029c0:	693a      	ldr	r2, [r7, #16]
 80029c2:	1ad3      	subs	r3, r2, r3
 80029c4:	60fb      	str	r3, [r7, #12]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 80029c6:	683b      	ldr	r3, [r7, #0]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80029ce:	d102      	bne.n	80029d6 <xTaskCheckForTimeOut+0x2e>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 80029d0:	2300      	movs	r3, #0
 80029d2:	617b      	str	r3, [r7, #20]
 80029d4:	e026      	b.n	8002a24 <xTaskCheckForTimeOut+0x7c>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) )
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681a      	ldr	r2, [r3, #0]
 80029da:	4b17      	ldr	r3, [pc, #92]	@ (8002a38 <xTaskCheckForTimeOut+0x90>)
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	429a      	cmp	r2, r3
 80029e0:	d00a      	beq.n	80029f8 <xTaskCheckForTimeOut+0x50>
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	685b      	ldr	r3, [r3, #4]
 80029e6:	693a      	ldr	r2, [r7, #16]
 80029e8:	429a      	cmp	r2, r3
 80029ea:	d305      	bcc.n	80029f8 <xTaskCheckForTimeOut+0x50>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 80029ec:	2301      	movs	r3, #1
 80029ee:	617b      	str	r3, [r7, #20]
            *pxTicksToWait = ( TickType_t ) 0;
 80029f0:	683b      	ldr	r3, [r7, #0]
 80029f2:	2200      	movs	r2, #0
 80029f4:	601a      	str	r2, [r3, #0]
 80029f6:	e015      	b.n	8002a24 <xTaskCheckForTimeOut+0x7c>
        }
        else if( xElapsedTime < *pxTicksToWait )
 80029f8:	683b      	ldr	r3, [r7, #0]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	68fa      	ldr	r2, [r7, #12]
 80029fe:	429a      	cmp	r2, r3
 8002a00:	d20b      	bcs.n	8002a1a <xTaskCheckForTimeOut+0x72>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8002a02:	683b      	ldr	r3, [r7, #0]
 8002a04:	681a      	ldr	r2, [r3, #0]
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	1ad2      	subs	r2, r2, r3
 8002a0a:	683b      	ldr	r3, [r7, #0]
 8002a0c:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8002a0e:	6878      	ldr	r0, [r7, #4]
 8002a10:	f7ff ffb4 	bl	800297c <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8002a14:	2300      	movs	r3, #0
 8002a16:	617b      	str	r3, [r7, #20]
 8002a18:	e004      	b.n	8002a24 <xTaskCheckForTimeOut+0x7c>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8002a1a:	683b      	ldr	r3, [r7, #0]
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8002a20:	2301      	movs	r3, #1
 8002a22:	617b      	str	r3, [r7, #20]
        }
    }
    taskEXIT_CRITICAL();
 8002a24:	f000 f96a 	bl	8002cfc <vPortExitCritical>

    traceRETURN_xTaskCheckForTimeOut( xReturn );

    return xReturn;
 8002a28:	697b      	ldr	r3, [r7, #20]
}
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	3718      	adds	r7, #24
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	bd80      	pop	{r7, pc}
 8002a32:	bf00      	nop
 8002a34:	20000170 	.word	0x20000170
 8002a38:	20000180 	.word	0x20000180

08002a3c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8002a3c:	b480      	push	{r7}
 8002a3e:	af00      	add	r7, sp, #0
    traceENTER_vTaskMissedYield();

    /* Must be called from within a critical section. */
    xYieldPendings[ portGET_CORE_ID() ] = pdTRUE;
 8002a40:	4b03      	ldr	r3, [pc, #12]	@ (8002a50 <vTaskMissedYield+0x14>)
 8002a42:	2201      	movs	r2, #1
 8002a44:	601a      	str	r2, [r3, #0]

    traceRETURN_vTaskMissedYield();
}
 8002a46:	bf00      	nop
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4e:	4770      	bx	lr
 8002a50:	2000017c 	.word	0x2000017c

08002a54 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8002a54:	b480      	push	{r7}
 8002a56:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002a58:	4b0a      	ldr	r3, [pc, #40]	@ (8002a84 <prvResetNextTaskUnblockTime+0x30>)
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d104      	bne.n	8002a6c <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8002a62:	4b09      	ldr	r3, [pc, #36]	@ (8002a88 <prvResetNextTaskUnblockTime+0x34>)
 8002a64:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002a68:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8002a6a:	e005      	b.n	8002a78 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002a6c:	4b05      	ldr	r3, [pc, #20]	@ (8002a84 <prvResetNextTaskUnblockTime+0x30>)
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	68db      	ldr	r3, [r3, #12]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	4a04      	ldr	r2, [pc, #16]	@ (8002a88 <prvResetNextTaskUnblockTime+0x34>)
 8002a76:	6013      	str	r3, [r2, #0]
}
 8002a78:	bf00      	nop
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a80:	4770      	bx	lr
 8002a82:	bf00      	nop
 8002a84:	2000013c 	.word	0x2000013c
 8002a88:	20000184 	.word	0x20000184

08002a8c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	b086      	sub	sp, #24
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 8002a98:	2300      	movs	r3, #0
 8002a9a:	617b      	str	r3, [r7, #20]

        traceENTER_xTaskPriorityDisinherit( pxMutexHolder );

        if( pxMutexHolder != NULL )
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d06c      	beq.n	8002b7c <xTaskPriorityDisinherit+0xf0>
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
            configASSERT( pxTCB->uxMutexesHeld );
            ( pxTCB->uxMutexesHeld )--;
 8002aa2:	693b      	ldr	r3, [r7, #16]
 8002aa4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002aa6:	1e5a      	subs	r2, r3, #1
 8002aa8:	693b      	ldr	r3, [r7, #16]
 8002aaa:	649a      	str	r2, [r3, #72]	@ 0x48

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8002aac:	693b      	ldr	r3, [r7, #16]
 8002aae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002ab0:	693b      	ldr	r3, [r7, #16]
 8002ab2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ab4:	429a      	cmp	r2, r3
 8002ab6:	d061      	beq.n	8002b7c <xTaskPriorityDisinherit+0xf0>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8002ab8:	693b      	ldr	r3, [r7, #16]
 8002aba:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d15d      	bne.n	8002b7c <xTaskPriorityDisinherit+0xf0>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002ac0:	693b      	ldr	r3, [r7, #16]
 8002ac2:	3304      	adds	r3, #4
 8002ac4:	4618      	mov	r0, r3
 8002ac6:	f7ff f94a 	bl	8001d5e <uxListRemove>
 8002aca:	4603      	mov	r3, r0
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d10a      	bne.n	8002ae6 <xTaskPriorityDisinherit+0x5a>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8002ad0:	693b      	ldr	r3, [r7, #16]
 8002ad2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ad4:	2201      	movs	r2, #1
 8002ad6:	fa02 f303 	lsl.w	r3, r2, r3
 8002ada:	43da      	mvns	r2, r3
 8002adc:	4b2a      	ldr	r3, [pc, #168]	@ (8002b88 <xTaskPriorityDisinherit+0xfc>)
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	4013      	ands	r3, r2
 8002ae2:	4a29      	ldr	r2, [pc, #164]	@ (8002b88 <xTaskPriorityDisinherit+0xfc>)
 8002ae4:	6013      	str	r3, [r2, #0]
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 8002ae6:	693b      	ldr	r3, [r7, #16]
 8002ae8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002aea:	693b      	ldr	r3, [r7, #16]
 8002aec:	62da      	str	r2, [r3, #44]	@ 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority );
 8002aee:	693b      	ldr	r3, [r7, #16]
 8002af0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002af2:	f1c3 0205 	rsb	r2, r3, #5
 8002af6:	693b      	ldr	r3, [r7, #16]
 8002af8:	619a      	str	r2, [r3, #24]
                    prvAddTaskToReadyList( pxTCB );
 8002afa:	693b      	ldr	r3, [r7, #16]
 8002afc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002afe:	2201      	movs	r2, #1
 8002b00:	409a      	lsls	r2, r3
 8002b02:	4b21      	ldr	r3, [pc, #132]	@ (8002b88 <xTaskPriorityDisinherit+0xfc>)
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	4313      	orrs	r3, r2
 8002b08:	4a1f      	ldr	r2, [pc, #124]	@ (8002b88 <xTaskPriorityDisinherit+0xfc>)
 8002b0a:	6013      	str	r3, [r2, #0]
 8002b0c:	693b      	ldr	r3, [r7, #16]
 8002b0e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002b10:	491e      	ldr	r1, [pc, #120]	@ (8002b8c <xTaskPriorityDisinherit+0x100>)
 8002b12:	4613      	mov	r3, r2
 8002b14:	009b      	lsls	r3, r3, #2
 8002b16:	4413      	add	r3, r2
 8002b18:	009b      	lsls	r3, r3, #2
 8002b1a:	440b      	add	r3, r1
 8002b1c:	3304      	adds	r3, #4
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	60fb      	str	r3, [r7, #12]
 8002b22:	693b      	ldr	r3, [r7, #16]
 8002b24:	68fa      	ldr	r2, [r7, #12]
 8002b26:	609a      	str	r2, [r3, #8]
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	689a      	ldr	r2, [r3, #8]
 8002b2c:	693b      	ldr	r3, [r7, #16]
 8002b2e:	60da      	str	r2, [r3, #12]
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	689b      	ldr	r3, [r3, #8]
 8002b34:	693a      	ldr	r2, [r7, #16]
 8002b36:	3204      	adds	r2, #4
 8002b38:	605a      	str	r2, [r3, #4]
 8002b3a:	693b      	ldr	r3, [r7, #16]
 8002b3c:	1d1a      	adds	r2, r3, #4
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	609a      	str	r2, [r3, #8]
 8002b42:	693b      	ldr	r3, [r7, #16]
 8002b44:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002b46:	4613      	mov	r3, r2
 8002b48:	009b      	lsls	r3, r3, #2
 8002b4a:	4413      	add	r3, r2
 8002b4c:	009b      	lsls	r3, r3, #2
 8002b4e:	4a0f      	ldr	r2, [pc, #60]	@ (8002b8c <xTaskPriorityDisinherit+0x100>)
 8002b50:	441a      	add	r2, r3
 8002b52:	693b      	ldr	r3, [r7, #16]
 8002b54:	615a      	str	r2, [r3, #20]
 8002b56:	693b      	ldr	r3, [r7, #16]
 8002b58:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002b5a:	490c      	ldr	r1, [pc, #48]	@ (8002b8c <xTaskPriorityDisinherit+0x100>)
 8002b5c:	4613      	mov	r3, r2
 8002b5e:	009b      	lsls	r3, r3, #2
 8002b60:	4413      	add	r3, r2
 8002b62:	009b      	lsls	r3, r3, #2
 8002b64:	440b      	add	r3, r1
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	1c59      	adds	r1, r3, #1
 8002b6a:	4808      	ldr	r0, [pc, #32]	@ (8002b8c <xTaskPriorityDisinherit+0x100>)
 8002b6c:	4613      	mov	r3, r2
 8002b6e:	009b      	lsls	r3, r3, #2
 8002b70:	4413      	add	r3, r2
 8002b72:	009b      	lsls	r3, r3, #2
 8002b74:	4403      	add	r3, r0
 8002b76:	6019      	str	r1, [r3, #0]
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 8002b78:	2301      	movs	r3, #1
 8002b7a:	617b      	str	r3, [r7, #20]
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_xTaskPriorityDisinherit( xReturn );

        return xReturn;
 8002b7c:	697b      	ldr	r3, [r7, #20]
    }
 8002b7e:	4618      	mov	r0, r3
 8002b80:	3718      	adds	r7, #24
 8002b82:	46bd      	mov	sp, r7
 8002b84:	bd80      	pop	{r7, pc}
 8002b86:	bf00      	nop
 8002b88:	20000174 	.word	0x20000174
 8002b8c:	200000d8 	.word	0x200000d8

08002b90 <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8002b90:	b580      	push	{r7, lr}
 8002b92:	b088      	sub	sp, #32
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	6078      	str	r0, [r7, #4]
 8002b98:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8002b9a:	4b37      	ldr	r3, [pc, #220]	@ (8002c78 <prvAddCurrentTaskToDelayedList+0xe8>)
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	61fb      	str	r3, [r7, #28]
    List_t * const pxDelayedList = pxDelayedTaskList;
 8002ba0:	4b36      	ldr	r3, [pc, #216]	@ (8002c7c <prvAddCurrentTaskToDelayedList+0xec>)
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	61bb      	str	r3, [r7, #24]
    List_t * const pxOverflowDelayedList = pxOverflowDelayedTaskList;
 8002ba6:	4b36      	ldr	r3, [pc, #216]	@ (8002c80 <prvAddCurrentTaskToDelayedList+0xf0>)
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002bac:	4b35      	ldr	r3, [pc, #212]	@ (8002c84 <prvAddCurrentTaskToDelayedList+0xf4>)
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	3304      	adds	r3, #4
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	f7ff f8d3 	bl	8001d5e <uxListRemove>
 8002bb8:	4603      	mov	r3, r0
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d10b      	bne.n	8002bd6 <prvAddCurrentTaskToDelayedList+0x46>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8002bbe:	4b31      	ldr	r3, [pc, #196]	@ (8002c84 <prvAddCurrentTaskToDelayedList+0xf4>)
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002bc4:	2201      	movs	r2, #1
 8002bc6:	fa02 f303 	lsl.w	r3, r2, r3
 8002bca:	43da      	mvns	r2, r3
 8002bcc:	4b2e      	ldr	r3, [pc, #184]	@ (8002c88 <prvAddCurrentTaskToDelayedList+0xf8>)
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	4013      	ands	r3, r2
 8002bd2:	4a2d      	ldr	r2, [pc, #180]	@ (8002c88 <prvAddCurrentTaskToDelayedList+0xf8>)
 8002bd4:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002bdc:	d124      	bne.n	8002c28 <prvAddCurrentTaskToDelayedList+0x98>
 8002bde:	683b      	ldr	r3, [r7, #0]
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d021      	beq.n	8002c28 <prvAddCurrentTaskToDelayedList+0x98>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002be4:	4b29      	ldr	r3, [pc, #164]	@ (8002c8c <prvAddCurrentTaskToDelayedList+0xfc>)
 8002be6:	685b      	ldr	r3, [r3, #4]
 8002be8:	613b      	str	r3, [r7, #16]
 8002bea:	4b26      	ldr	r3, [pc, #152]	@ (8002c84 <prvAddCurrentTaskToDelayedList+0xf4>)
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	693a      	ldr	r2, [r7, #16]
 8002bf0:	609a      	str	r2, [r3, #8]
 8002bf2:	4b24      	ldr	r3, [pc, #144]	@ (8002c84 <prvAddCurrentTaskToDelayedList+0xf4>)
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	693a      	ldr	r2, [r7, #16]
 8002bf8:	6892      	ldr	r2, [r2, #8]
 8002bfa:	60da      	str	r2, [r3, #12]
 8002bfc:	4b21      	ldr	r3, [pc, #132]	@ (8002c84 <prvAddCurrentTaskToDelayedList+0xf4>)
 8002bfe:	681a      	ldr	r2, [r3, #0]
 8002c00:	693b      	ldr	r3, [r7, #16]
 8002c02:	689b      	ldr	r3, [r3, #8]
 8002c04:	3204      	adds	r2, #4
 8002c06:	605a      	str	r2, [r3, #4]
 8002c08:	4b1e      	ldr	r3, [pc, #120]	@ (8002c84 <prvAddCurrentTaskToDelayedList+0xf4>)
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	1d1a      	adds	r2, r3, #4
 8002c0e:	693b      	ldr	r3, [r7, #16]
 8002c10:	609a      	str	r2, [r3, #8]
 8002c12:	4b1c      	ldr	r3, [pc, #112]	@ (8002c84 <prvAddCurrentTaskToDelayedList+0xf4>)
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	4a1d      	ldr	r2, [pc, #116]	@ (8002c8c <prvAddCurrentTaskToDelayedList+0xfc>)
 8002c18:	615a      	str	r2, [r3, #20]
 8002c1a:	4b1c      	ldr	r3, [pc, #112]	@ (8002c8c <prvAddCurrentTaskToDelayedList+0xfc>)
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	3301      	adds	r3, #1
 8002c20:	4a1a      	ldr	r2, [pc, #104]	@ (8002c8c <prvAddCurrentTaskToDelayedList+0xfc>)
 8002c22:	6013      	str	r3, [r2, #0]
 8002c24:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 8002c26:	e022      	b.n	8002c6e <prvAddCurrentTaskToDelayedList+0xde>
            xTimeToWake = xConstTickCount + xTicksToWait;
 8002c28:	69fa      	ldr	r2, [r7, #28]
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	4413      	add	r3, r2
 8002c2e:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8002c30:	4b14      	ldr	r3, [pc, #80]	@ (8002c84 <prvAddCurrentTaskToDelayedList+0xf4>)
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	68fa      	ldr	r2, [r7, #12]
 8002c36:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 8002c38:	68fa      	ldr	r2, [r7, #12]
 8002c3a:	69fb      	ldr	r3, [r7, #28]
 8002c3c:	429a      	cmp	r2, r3
 8002c3e:	d207      	bcs.n	8002c50 <prvAddCurrentTaskToDelayedList+0xc0>
                vListInsert( pxOverflowDelayedList, &( pxCurrentTCB->xStateListItem ) );
 8002c40:	4b10      	ldr	r3, [pc, #64]	@ (8002c84 <prvAddCurrentTaskToDelayedList+0xf4>)
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	3304      	adds	r3, #4
 8002c46:	4619      	mov	r1, r3
 8002c48:	6978      	ldr	r0, [r7, #20]
 8002c4a:	f7ff f84f 	bl	8001cec <vListInsert>
}
 8002c4e:	e00e      	b.n	8002c6e <prvAddCurrentTaskToDelayedList+0xde>
                vListInsert( pxDelayedList, &( pxCurrentTCB->xStateListItem ) );
 8002c50:	4b0c      	ldr	r3, [pc, #48]	@ (8002c84 <prvAddCurrentTaskToDelayedList+0xf4>)
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	3304      	adds	r3, #4
 8002c56:	4619      	mov	r1, r3
 8002c58:	69b8      	ldr	r0, [r7, #24]
 8002c5a:	f7ff f847 	bl	8001cec <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 8002c5e:	4b0c      	ldr	r3, [pc, #48]	@ (8002c90 <prvAddCurrentTaskToDelayedList+0x100>)
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	68fa      	ldr	r2, [r7, #12]
 8002c64:	429a      	cmp	r2, r3
 8002c66:	d202      	bcs.n	8002c6e <prvAddCurrentTaskToDelayedList+0xde>
                    xNextTaskUnblockTime = xTimeToWake;
 8002c68:	4a09      	ldr	r2, [pc, #36]	@ (8002c90 <prvAddCurrentTaskToDelayedList+0x100>)
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	6013      	str	r3, [r2, #0]
}
 8002c6e:	bf00      	nop
 8002c70:	3720      	adds	r7, #32
 8002c72:	46bd      	mov	sp, r7
 8002c74:	bd80      	pop	{r7, pc}
 8002c76:	bf00      	nop
 8002c78:	20000170 	.word	0x20000170
 8002c7c:	2000013c 	.word	0x2000013c
 8002c80:	20000140 	.word	0x20000140
 8002c84:	200000d4 	.word	0x200000d4
 8002c88:	20000174 	.word	0x20000174
 8002c8c:	20000158 	.word	0x20000158
 8002c90:	20000184 	.word	0x20000184
	...

08002ca0 <vPortSVCHandler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8002ca0:	4b07      	ldr	r3, [pc, #28]	@ (8002cc0 <pxCurrentTCBConst2>)
 8002ca2:	6819      	ldr	r1, [r3, #0]
 8002ca4:	6808      	ldr	r0, [r1, #0]
 8002ca6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002caa:	f380 8809 	msr	PSP, r0
 8002cae:	f3bf 8f6f 	isb	sy
 8002cb2:	f04f 0000 	mov.w	r0, #0
 8002cb6:	f380 8811 	msr	BASEPRI, r0
 8002cba:	4770      	bx	lr
 8002cbc:	f3af 8000 	nop.w

08002cc0 <pxCurrentTCBConst2>:
 8002cc0:	200000d4 	.word	0x200000d4
        "   bx r14                          \n"
        "                                   \n"
        "   .align 4                        \n"
        "pxCurrentTCBConst2: .word pxCurrentTCB             \n"
        );
}
 8002cc4:	bf00      	nop
 8002cc6:	bf00      	nop

08002cc8 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8002cc8:	b480      	push	{r7}
 8002cca:	b083      	sub	sp, #12
 8002ccc:	af00      	add	r7, sp, #0
    __asm volatile
 8002cce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002cd2:	f383 8811 	msr	BASEPRI, r3
 8002cd6:	f3bf 8f6f 	isb	sy
 8002cda:	f3bf 8f4f 	dsb	sy
 8002cde:	607b      	str	r3, [r7, #4]
}
 8002ce0:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8002ce2:	4b05      	ldr	r3, [pc, #20]	@ (8002cf8 <vPortEnterCritical+0x30>)
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	3301      	adds	r3, #1
 8002ce8:	4a03      	ldr	r2, [pc, #12]	@ (8002cf8 <vPortEnterCritical+0x30>)
 8002cea:	6013      	str	r3, [r2, #0]
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
    }
}
 8002cec:	bf00      	nop
 8002cee:	370c      	adds	r7, #12
 8002cf0:	46bd      	mov	sp, r7
 8002cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf6:	4770      	bx	lr
 8002cf8:	2000000c 	.word	0x2000000c

08002cfc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8002cfc:	b480      	push	{r7}
 8002cfe:	b083      	sub	sp, #12
 8002d00:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
    uxCriticalNesting--;
 8002d02:	4b0a      	ldr	r3, [pc, #40]	@ (8002d2c <vPortExitCritical+0x30>)
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	3b01      	subs	r3, #1
 8002d08:	4a08      	ldr	r2, [pc, #32]	@ (8002d2c <vPortExitCritical+0x30>)
 8002d0a:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8002d0c:	4b07      	ldr	r3, [pc, #28]	@ (8002d2c <vPortExitCritical+0x30>)
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d105      	bne.n	8002d20 <vPortExitCritical+0x24>
 8002d14:	2300      	movs	r3, #0
 8002d16:	607b      	str	r3, [r7, #4]
    __asm volatile
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	f383 8811 	msr	BASEPRI, r3
}
 8002d1e:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8002d20:	bf00      	nop
 8002d22:	370c      	adds	r7, #12
 8002d24:	46bd      	mov	sp, r7
 8002d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2a:	4770      	bx	lr
 8002d2c:	2000000c 	.word	0x2000000c

08002d30 <xPortPendSVHandler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8002d30:	f3ef 8009 	mrs	r0, PSP
 8002d34:	f3bf 8f6f 	isb	sy
 8002d38:	4b15      	ldr	r3, [pc, #84]	@ (8002d90 <pxCurrentTCBConst>)
 8002d3a:	681a      	ldr	r2, [r3, #0]
 8002d3c:	f01e 0f10 	tst.w	lr, #16
 8002d40:	bf08      	it	eq
 8002d42:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8002d46:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002d4a:	6010      	str	r0, [r2, #0]
 8002d4c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8002d50:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8002d54:	f380 8811 	msr	BASEPRI, r0
 8002d58:	f3bf 8f4f 	dsb	sy
 8002d5c:	f3bf 8f6f 	isb	sy
 8002d60:	f7ff fce6 	bl	8002730 <vTaskSwitchContext>
 8002d64:	f04f 0000 	mov.w	r0, #0
 8002d68:	f380 8811 	msr	BASEPRI, r0
 8002d6c:	bc09      	pop	{r0, r3}
 8002d6e:	6819      	ldr	r1, [r3, #0]
 8002d70:	6808      	ldr	r0, [r1, #0]
 8002d72:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002d76:	f01e 0f10 	tst.w	lr, #16
 8002d7a:	bf08      	it	eq
 8002d7c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8002d80:	f380 8809 	msr	PSP, r0
 8002d84:	f3bf 8f6f 	isb	sy
 8002d88:	4770      	bx	lr
 8002d8a:	bf00      	nop
 8002d8c:	f3af 8000 	nop.w

08002d90 <pxCurrentTCBConst>:
 8002d90:	200000d4 	.word	0x200000d4
        "                                       \n"
        "   .align 4                            \n"
        "pxCurrentTCBConst: .word pxCurrentTCB  \n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8002d94:	bf00      	nop
 8002d96:	bf00      	nop

08002d98 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	b082      	sub	sp, #8
 8002d9c:	af00      	add	r7, sp, #0
    __asm volatile
 8002d9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002da2:	f383 8811 	msr	BASEPRI, r3
 8002da6:	f3bf 8f6f 	isb	sy
 8002daa:	f3bf 8f4f 	dsb	sy
 8002dae:	607b      	str	r3, [r7, #4]
}
 8002db0:	bf00      	nop
     * known. */
    portDISABLE_INTERRUPTS();
    traceISR_ENTER();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8002db2:	f7ff fbb7 	bl	8002524 <xTaskIncrementTick>
 8002db6:	4603      	mov	r3, r0
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d003      	beq.n	8002dc4 <xPortSysTickHandler+0x2c>
        {
            traceISR_EXIT_TO_SCHEDULER();

            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8002dbc:	4b06      	ldr	r3, [pc, #24]	@ (8002dd8 <xPortSysTickHandler+0x40>)
 8002dbe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002dc2:	601a      	str	r2, [r3, #0]
 8002dc4:	2300      	movs	r3, #0
 8002dc6:	603b      	str	r3, [r7, #0]
    __asm volatile
 8002dc8:	683b      	ldr	r3, [r7, #0]
 8002dca:	f383 8811 	msr	BASEPRI, r3
}
 8002dce:	bf00      	nop
        {
            traceISR_EXIT();
        }
    }
    portENABLE_INTERRUPTS();
}
 8002dd0:	bf00      	nop
 8002dd2:	3708      	adds	r7, #8
 8002dd4:	46bd      	mov	sp, r7
 8002dd6:	bd80      	pop	{r7, pc}
 8002dd8:	e000ed04 	.word	0xe000ed04

08002ddc <csp_uart_write_stm32>:
*/
int csp_usart_stm32_open_and_add_interface(const csp_usart_conf_t * conf, const char * ifname, csp_iface_t ** return_iface)
{return 0;}

int csp_uart_write_stm32(csp_usart_fd_t fd, const void *data, size_t data_length)
{
 8002ddc:	b480      	push	{r7}
 8002dde:	b085      	sub	sp, #20
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	60f8      	str	r0, [r7, #12]
 8002de4:	60b9      	str	r1, [r7, #8]
 8002de6:	607a      	str	r2, [r7, #4]
	return 0;
 8002de8:	2300      	movs	r3, #0
}
 8002dea:	4618      	mov	r0, r3
 8002dec:	3714      	adds	r7, #20
 8002dee:	46bd      	mov	sp, r7
 8002df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df4:	4770      	bx	lr

08002df6 <csp_queue_create_static>:
#include <csp/csp.h>

#include <FreeRTOS.h>
#include <queue.h>

csp_queue_handle_t csp_queue_create_static(int length, size_t item_size, char * buffer, csp_static_queue_t * queue) {
 8002df6:	b580      	push	{r7, lr}
 8002df8:	b086      	sub	sp, #24
 8002dfa:	af02      	add	r7, sp, #8
 8002dfc:	60f8      	str	r0, [r7, #12]
 8002dfe:	60b9      	str	r1, [r7, #8]
 8002e00:	607a      	str	r2, [r7, #4]
 8002e02:	603b      	str	r3, [r7, #0]
	return xQueueCreateStatic(length, item_size, (uint8_t *)buffer, queue);
 8002e04:	68f8      	ldr	r0, [r7, #12]
 8002e06:	2300      	movs	r3, #0
 8002e08:	9300      	str	r3, [sp, #0]
 8002e0a:	683b      	ldr	r3, [r7, #0]
 8002e0c:	687a      	ldr	r2, [r7, #4]
 8002e0e:	68b9      	ldr	r1, [r7, #8]
 8002e10:	f7ff f844 	bl	8001e9c <xQueueGenericCreateStatic>
 8002e14:	4603      	mov	r3, r0
}
 8002e16:	4618      	mov	r0, r3
 8002e18:	3710      	adds	r7, #16
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	bd80      	pop	{r7, pc}

08002e1e <csp_queue_enqueue>:

int csp_queue_enqueue(csp_queue_handle_t handle, const void * value, uint32_t timeout) {
 8002e1e:	b580      	push	{r7, lr}
 8002e20:	b084      	sub	sp, #16
 8002e22:	af00      	add	r7, sp, #0
 8002e24:	60f8      	str	r0, [r7, #12]
 8002e26:	60b9      	str	r1, [r7, #8]
 8002e28:	607a      	str	r2, [r7, #4]
	if (timeout != CSP_MAX_TIMEOUT)
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
		timeout = timeout / portTICK_PERIOD_MS;
	if (xQueueSendToBack(handle, value, timeout) == pdPASS) {
 8002e30:	2300      	movs	r3, #0
 8002e32:	687a      	ldr	r2, [r7, #4]
 8002e34:	68b9      	ldr	r1, [r7, #8]
 8002e36:	68f8      	ldr	r0, [r7, #12]
 8002e38:	f7ff f880 	bl	8001f3c <xQueueGenericSend>
 8002e3c:	4603      	mov	r3, r0
 8002e3e:	2b01      	cmp	r3, #1
 8002e40:	d101      	bne.n	8002e46 <csp_queue_enqueue+0x28>
		return CSP_QUEUE_OK;
 8002e42:	2300      	movs	r3, #0
 8002e44:	e001      	b.n	8002e4a <csp_queue_enqueue+0x2c>
	}
	return CSP_QUEUE_ERROR;
 8002e46:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	3710      	adds	r7, #16
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	bd80      	pop	{r7, pc}

08002e52 <csp_queue_enqueue_isr>:

int csp_queue_enqueue_isr(csp_queue_handle_t handle, const void * value, int * task_woken) {
 8002e52:	b580      	push	{r7, lr}
 8002e54:	b084      	sub	sp, #16
 8002e56:	af00      	add	r7, sp, #0
 8002e58:	60f8      	str	r0, [r7, #12]
 8002e5a:	60b9      	str	r1, [r7, #8]
 8002e5c:	607a      	str	r2, [r7, #4]
	if (xQueueSendToBackFromISR(handle, value, (portBASE_TYPE *)task_woken) == pdPASS) {
 8002e5e:	2300      	movs	r3, #0
 8002e60:	687a      	ldr	r2, [r7, #4]
 8002e62:	68b9      	ldr	r1, [r7, #8]
 8002e64:	68f8      	ldr	r0, [r7, #12]
 8002e66:	f7ff f913 	bl	8002090 <xQueueGenericSendFromISR>
 8002e6a:	4603      	mov	r3, r0
 8002e6c:	2b01      	cmp	r3, #1
 8002e6e:	d101      	bne.n	8002e74 <csp_queue_enqueue_isr+0x22>
		return CSP_QUEUE_OK;
 8002e70:	2300      	movs	r3, #0
 8002e72:	e001      	b.n	8002e78 <csp_queue_enqueue_isr+0x26>
	}
	return CSP_QUEUE_ERROR;
 8002e74:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8002e78:	4618      	mov	r0, r3
 8002e7a:	3710      	adds	r7, #16
 8002e7c:	46bd      	mov	sp, r7
 8002e7e:	bd80      	pop	{r7, pc}

08002e80 <csp_buffer_init>:
} csp_skbf_t;

// Queue of free CSP buffers
static csp_queue_handle_t csp_buffers;

void csp_buffer_init(void) {
 8002e80:	b580      	push	{r7, lr}
 8002e82:	b082      	sub	sp, #8
 8002e84:	af00      	add	r7, sp, #0
	 * Putting this section in a separate non .bss area, saves some boot time */
	static csp_skbf_t csp_buffer_pool[CSP_BUFFER_COUNT]  __noinit;
	static csp_static_queue_t csp_buffers_queue __noinit;
	static char csp_buffer_queue_data[CSP_BUFFER_COUNT * sizeof(csp_skbf_t *)] __noinit;

	csp_buffers = csp_queue_create_static(CSP_BUFFER_COUNT, sizeof(csp_skbf_t *), csp_buffer_queue_data, &csp_buffers_queue);
 8002e86:	4b1b      	ldr	r3, [pc, #108]	@ (8002ef4 <csp_buffer_init+0x74>)
 8002e88:	4a1b      	ldr	r2, [pc, #108]	@ (8002ef8 <csp_buffer_init+0x78>)
 8002e8a:	2104      	movs	r1, #4
 8002e8c:	200f      	movs	r0, #15
 8002e8e:	f7ff ffb2 	bl	8002df6 <csp_queue_create_static>
 8002e92:	4603      	mov	r3, r0
 8002e94:	4a19      	ldr	r2, [pc, #100]	@ (8002efc <csp_buffer_init+0x7c>)
 8002e96:	6013      	str	r3, [r2, #0]

	for (unsigned int i = 0; i < CSP_BUFFER_COUNT; i++) {
 8002e98:	2300      	movs	r3, #0
 8002e9a:	607b      	str	r3, [r7, #4]
 8002e9c:	e021      	b.n	8002ee2 <csp_buffer_init+0x62>
		csp_buffer_pool[i].skbf_addr = &csp_buffer_pool[i];
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	f44f 729a 	mov.w	r2, #308	@ 0x134
 8002ea4:	fb02 f303 	mul.w	r3, r2, r3
 8002ea8:	4a15      	ldr	r2, [pc, #84]	@ (8002f00 <csp_buffer_init+0x80>)
 8002eaa:	441a      	add	r2, r3
 8002eac:	4914      	ldr	r1, [pc, #80]	@ (8002f00 <csp_buffer_init+0x80>)
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	f44f 709a 	mov.w	r0, #308	@ 0x134
 8002eb4:	fb00 f303 	mul.w	r3, r0, r3
 8002eb8:	440b      	add	r3, r1
 8002eba:	3304      	adds	r3, #4
 8002ebc:	601a      	str	r2, [r3, #0]
		csp_skbf_t * bufptr = &csp_buffer_pool[i];
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	f44f 729a 	mov.w	r2, #308	@ 0x134
 8002ec4:	fb02 f303 	mul.w	r3, r2, r3
 8002ec8:	4a0d      	ldr	r2, [pc, #52]	@ (8002f00 <csp_buffer_init+0x80>)
 8002eca:	4413      	add	r3, r2
 8002ecc:	603b      	str	r3, [r7, #0]
		csp_queue_enqueue(csp_buffers, &bufptr, 0);
 8002ece:	4b0b      	ldr	r3, [pc, #44]	@ (8002efc <csp_buffer_init+0x7c>)
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	4639      	mov	r1, r7
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	4618      	mov	r0, r3
 8002ed8:	f7ff ffa1 	bl	8002e1e <csp_queue_enqueue>
	for (unsigned int i = 0; i < CSP_BUFFER_COUNT; i++) {
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	3301      	adds	r3, #1
 8002ee0:	607b      	str	r3, [r7, #4]
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	2b0e      	cmp	r3, #14
 8002ee6:	d9da      	bls.n	8002e9e <csp_buffer_init+0x1e>
	}
}
 8002ee8:	bf00      	nop
 8002eea:	bf00      	nop
 8002eec:	3708      	adds	r7, #8
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	bd80      	pop	{r7, pc}
 8002ef2:	bf00      	nop
 8002ef4:	200013a4 	.word	0x200013a4
 8002ef8:	200013ec 	.word	0x200013ec
 8002efc:	2000018c 	.word	0x2000018c
 8002f00:	20000198 	.word	0x20000198

08002f04 <csp_buffer_free_isr>:

	buffer->refcount = 1;
	return &buffer->skbf_data;
}

void csp_buffer_free_isr(void * packet) {
 8002f04:	b580      	push	{r7, lr}
 8002f06:	b084      	sub	sp, #16
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	6078      	str	r0, [r7, #4]

	if (packet == NULL) {
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d02a      	beq.n	8002f68 <csp_buffer_free_isr+0x64>
		// freeing a NULL pointer is OK, e.g. standard free()
		return;
	}

	csp_skbf_t * buf = CONTAINER_OF(packet, csp_skbf_t, skbf_data);
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	3b08      	subs	r3, #8
 8002f16:	60fb      	str	r3, [r7, #12]

	if (buf->skbf_addr != buf) {
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	685a      	ldr	r2, [r3, #4]
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	429a      	cmp	r2, r3
 8002f20:	d003      	beq.n	8002f2a <csp_buffer_free_isr+0x26>
		csp_dbg_errno = CSP_DBG_ERR_CORRUPT_BUFFER;
 8002f22:	4b13      	ldr	r3, [pc, #76]	@ (8002f70 <csp_buffer_free_isr+0x6c>)
 8002f24:	2201      	movs	r2, #1
 8002f26:	701a      	strb	r2, [r3, #0]
		return;
 8002f28:	e01f      	b.n	8002f6a <csp_buffer_free_isr+0x66>
	}

	if (buf->refcount == 0) {
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d103      	bne.n	8002f3a <csp_buffer_free_isr+0x36>
		csp_dbg_errno = CSP_DBG_ERR_ALREADY_FREE;
 8002f32:	4b0f      	ldr	r3, [pc, #60]	@ (8002f70 <csp_buffer_free_isr+0x6c>)
 8002f34:	2203      	movs	r2, #3
 8002f36:	701a      	strb	r2, [r3, #0]
		return;
 8002f38:	e017      	b.n	8002f6a <csp_buffer_free_isr+0x66>
	}

	if (--(buf->refcount) > 0) {
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	681a      	ldr	r2, [r3, #0]
 8002f3e:	3a01      	subs	r2, #1
 8002f40:	601a      	str	r2, [r3, #0]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d003      	beq.n	8002f50 <csp_buffer_free_isr+0x4c>
		csp_dbg_errno = CSP_DBG_ERR_REFCOUNT;
 8002f48:	4b09      	ldr	r3, [pc, #36]	@ (8002f70 <csp_buffer_free_isr+0x6c>)
 8002f4a:	2204      	movs	r2, #4
 8002f4c:	701a      	strb	r2, [r3, #0]
		return;
 8002f4e:	e00c      	b.n	8002f6a <csp_buffer_free_isr+0x66>
	}

	int task_woken = 0;
 8002f50:	2300      	movs	r3, #0
 8002f52:	60bb      	str	r3, [r7, #8]
	csp_queue_enqueue_isr(csp_buffers, &buf, &task_woken);
 8002f54:	4b07      	ldr	r3, [pc, #28]	@ (8002f74 <csp_buffer_free_isr+0x70>)
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f107 0208 	add.w	r2, r7, #8
 8002f5c:	f107 010c 	add.w	r1, r7, #12
 8002f60:	4618      	mov	r0, r3
 8002f62:	f7ff ff76 	bl	8002e52 <csp_queue_enqueue_isr>
 8002f66:	e000      	b.n	8002f6a <csp_buffer_free_isr+0x66>
		return;
 8002f68:	bf00      	nop
}
 8002f6a:	3710      	adds	r7, #16
 8002f6c:	46bd      	mov	sp, r7
 8002f6e:	bd80      	pop	{r7, pc}
 8002f70:	20000190 	.word	0x20000190
 8002f74:	2000018c 	.word	0x2000018c

08002f78 <csp_buffer_free>:

void csp_buffer_free(void * packet) {
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	b084      	sub	sp, #16
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	6078      	str	r0, [r7, #4]

	if (packet == NULL) {
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d027      	beq.n	8002fd6 <csp_buffer_free+0x5e>
		/* freeing a NULL pointer is OK, e.g. standard free() */
		return;
	}

	csp_skbf_t * buf = CONTAINER_OF(packet, csp_skbf_t, skbf_data);
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	3b08      	subs	r3, #8
 8002f8a:	60fb      	str	r3, [r7, #12]

	if (buf->skbf_addr != buf) {
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	685a      	ldr	r2, [r3, #4]
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	429a      	cmp	r2, r3
 8002f94:	d003      	beq.n	8002f9e <csp_buffer_free+0x26>
		csp_dbg_errno = CSP_DBG_ERR_CORRUPT_BUFFER;
 8002f96:	4b12      	ldr	r3, [pc, #72]	@ (8002fe0 <csp_buffer_free+0x68>)
 8002f98:	2201      	movs	r2, #1
 8002f9a:	701a      	strb	r2, [r3, #0]
		return;
 8002f9c:	e01c      	b.n	8002fd8 <csp_buffer_free+0x60>
	}

	if (buf->refcount == 0) {
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d103      	bne.n	8002fae <csp_buffer_free+0x36>
		csp_dbg_errno = CSP_DBG_ERR_ALREADY_FREE;
 8002fa6:	4b0e      	ldr	r3, [pc, #56]	@ (8002fe0 <csp_buffer_free+0x68>)
 8002fa8:	2203      	movs	r2, #3
 8002faa:	701a      	strb	r2, [r3, #0]
		return;
 8002fac:	e014      	b.n	8002fd8 <csp_buffer_free+0x60>
	}

	if (--(buf->refcount) > 0) {
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	681a      	ldr	r2, [r3, #0]
 8002fb2:	3a01      	subs	r2, #1
 8002fb4:	601a      	str	r2, [r3, #0]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d003      	beq.n	8002fc4 <csp_buffer_free+0x4c>
		csp_dbg_errno = CSP_DBG_ERR_REFCOUNT;
 8002fbc:	4b08      	ldr	r3, [pc, #32]	@ (8002fe0 <csp_buffer_free+0x68>)
 8002fbe:	2204      	movs	r2, #4
 8002fc0:	701a      	strb	r2, [r3, #0]
		return;
 8002fc2:	e009      	b.n	8002fd8 <csp_buffer_free+0x60>
	}

	csp_queue_enqueue(csp_buffers, &buf, 0);
 8002fc4:	4b07      	ldr	r3, [pc, #28]	@ (8002fe4 <csp_buffer_free+0x6c>)
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f107 010c 	add.w	r1, r7, #12
 8002fcc:	2200      	movs	r2, #0
 8002fce:	4618      	mov	r0, r3
 8002fd0:	f7ff ff25 	bl	8002e1e <csp_queue_enqueue>
 8002fd4:	e000      	b.n	8002fd8 <csp_buffer_free+0x60>
		return;
 8002fd6:	bf00      	nop
}
 8002fd8:	3710      	adds	r7, #16
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	bd80      	pop	{r7, pc}
 8002fde:	bf00      	nop
 8002fe0:	20000190 	.word	0x20000190
 8002fe4:	2000018c 	.word	0x2000018c

08002fe8 <csp_conn_init>:
	}

	return CSP_ERR_NONE;
}

void csp_conn_init(void) {
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	b084      	sub	sp, #16
 8002fec:	af00      	add	r7, sp, #0

	for (int i = 0; i < CSP_CONN_MAX; i++) {
 8002fee:	2300      	movs	r3, #0
 8002ff0:	60fb      	str	r3, [r7, #12]
 8002ff2:	e028      	b.n	8003046 <csp_conn_init+0x5e>
		csp_conn_t * conn = &arr_conn[i];
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	22b4      	movs	r2, #180	@ 0xb4
 8002ff8:	fb02 f303 	mul.w	r3, r2, r3
 8002ffc:	4a16      	ldr	r2, [pc, #88]	@ (8003058 <csp_conn_init+0x70>)
 8002ffe:	4413      	add	r3, r2
 8003000:	60bb      	str	r3, [r7, #8]

		conn->sport_outgoing = CSP_PORT_MAX_BIND + 1 + i;
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	b2db      	uxtb	r3, r3
 8003006:	3311      	adds	r3, #17
 8003008:	b2da      	uxtb	r2, r3
 800300a:	68bb      	ldr	r3, [r7, #8]
 800300c:	761a      	strb	r2, [r3, #24]
		conn->state = CONN_CLOSED;
 800300e:	2300      	movs	r3, #0
 8003010:	607b      	str	r3, [r7, #4]
 8003012:	68bb      	ldr	r3, [r7, #8]
 8003014:	3304      	adds	r3, #4
 8003016:	687a      	ldr	r2, [r7, #4]
 8003018:	f3bf 8f5b 	dmb	ish
 800301c:	601a      	str	r2, [r3, #0]
 800301e:	f3bf 8f5b 	dmb	ish
		conn->idin.flags = 0;
 8003022:	68bb      	ldr	r3, [r7, #8]
 8003024:	2200      	movs	r2, #0
 8003026:	725a      	strb	r2, [r3, #9]
		conn->rx_queue = csp_queue_create_static(CSP_CONN_RXQUEUE_LEN, sizeof(csp_packet_t *), conn->rx_queue_static_data, &conn->rx_queue_static);
 8003028:	68bb      	ldr	r3, [r7, #8]
 800302a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800302e:	68bb      	ldr	r3, [r7, #8]
 8003030:	3320      	adds	r3, #32
 8003032:	2104      	movs	r1, #4
 8003034:	200f      	movs	r0, #15
 8003036:	f7ff fede 	bl	8002df6 <csp_queue_create_static>
 800303a:	4602      	mov	r2, r0
 800303c:	68bb      	ldr	r3, [r7, #8]
 800303e:	61da      	str	r2, [r3, #28]
	for (int i = 0; i < CSP_CONN_MAX; i++) {
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	3301      	adds	r3, #1
 8003044:	60fb      	str	r3, [r7, #12]
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	2b07      	cmp	r3, #7
 800304a:	ddd3      	ble.n	8002ff4 <csp_conn_init+0xc>

#if (CSP_USE_RDP)
		csp_rdp_init(conn);
#endif
	}
}
 800304c:	bf00      	nop
 800304e:	bf00      	nop
 8003050:	3710      	adds	r7, #16
 8003052:	46bd      	mov	sp, r7
 8003054:	bd80      	pop	{r7, pc}
 8003056:	bf00      	nop
 8003058:	20001428 	.word	0x20001428

0800305c <csp_id_get_host_bits>:
		csp_id1_setup_rx(packet);
		return CSP_ID1_HEADER_SIZE;
	}
}

unsigned int csp_id_get_host_bits(void) {
 800305c:	b480      	push	{r7}
 800305e:	af00      	add	r7, sp, #0
	if (csp_conf.version == 2) {
 8003060:	4b05      	ldr	r3, [pc, #20]	@ (8003078 <csp_id_get_host_bits+0x1c>)
 8003062:	781b      	ldrb	r3, [r3, #0]
 8003064:	2b02      	cmp	r3, #2
 8003066:	d101      	bne.n	800306c <csp_id_get_host_bits+0x10>
		return CSP_ID2_HOST_SIZE;
 8003068:	230e      	movs	r3, #14
 800306a:	e000      	b.n	800306e <csp_id_get_host_bits+0x12>
	} else {
		return CSP_ID1_HOST_SIZE;
 800306c:	2305      	movs	r3, #5
	}
}
 800306e:	4618      	mov	r0, r3
 8003070:	46bd      	mov	sp, r7
 8003072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003076:	4770      	bx	lr
 8003078:	20000010 	.word	0x20000010

0800307c <csp_iflist_add>:
		ifc = ifc->next;
	}
	return ifc;
}

int csp_iflist_add(csp_iface_t * ifc) {
 800307c:	b580      	push	{r7, lr}
 800307e:	b084      	sub	sp, #16
 8003080:	af00      	add	r7, sp, #0
 8003082:	6078      	str	r0, [r7, #4]

	ifc->next = NULL;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	2200      	movs	r2, #0
 8003088:	641a      	str	r2, [r3, #64]	@ 0x40

	/* Add interface to pool */
	if (interfaces == NULL) {
 800308a:	4b18      	ldr	r3, [pc, #96]	@ (80030ec <csp_iflist_add+0x70>)
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	2b00      	cmp	r3, #0
 8003090:	d103      	bne.n	800309a <csp_iflist_add+0x1e>
		/* This is the first interface to be added */
		interfaces = ifc;
 8003092:	4a16      	ldr	r2, [pc, #88]	@ (80030ec <csp_iflist_add+0x70>)
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	6013      	str	r3, [r2, #0]
 8003098:	e022      	b.n	80030e0 <csp_iflist_add+0x64>
	} else {
		/* Insert interface last if not already in pool */
		csp_iface_t * last = NULL;
 800309a:	2300      	movs	r3, #0
 800309c:	60fb      	str	r3, [r7, #12]
		for (csp_iface_t * i = interfaces; i != NULL; i = i->next) {
 800309e:	4b13      	ldr	r3, [pc, #76]	@ (80030ec <csp_iflist_add+0x70>)
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	60bb      	str	r3, [r7, #8]
 80030a4:	e016      	b.n	80030d4 <csp_iflist_add+0x58>
			if ((i == ifc) || (strncmp(ifc->name, i->name, CSP_IFLIST_NAME_MAX) == 0)) {
 80030a6:	68ba      	ldr	r2, [r7, #8]
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	429a      	cmp	r2, r3
 80030ac:	d00a      	beq.n	80030c4 <csp_iflist_add+0x48>
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	6858      	ldr	r0, [r3, #4]
 80030b2:	68bb      	ldr	r3, [r7, #8]
 80030b4:	685b      	ldr	r3, [r3, #4]
 80030b6:	220a      	movs	r2, #10
 80030b8:	4619      	mov	r1, r3
 80030ba:	f000 f8cd 	bl	8003258 <strncmp>
 80030be:	4603      	mov	r3, r0
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d102      	bne.n	80030ca <csp_iflist_add+0x4e>
				return CSP_ERR_ALREADY;
 80030c4:	f06f 0306 	mvn.w	r3, #6
 80030c8:	e00b      	b.n	80030e2 <csp_iflist_add+0x66>
			}
			last = i;
 80030ca:	68bb      	ldr	r3, [r7, #8]
 80030cc:	60fb      	str	r3, [r7, #12]
		for (csp_iface_t * i = interfaces; i != NULL; i = i->next) {
 80030ce:	68bb      	ldr	r3, [r7, #8]
 80030d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030d2:	60bb      	str	r3, [r7, #8]
 80030d4:	68bb      	ldr	r3, [r7, #8]
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d1e5      	bne.n	80030a6 <csp_iflist_add+0x2a>
		}

		last->next = ifc;
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	687a      	ldr	r2, [r7, #4]
 80030de:	641a      	str	r2, [r3, #64]	@ 0x40
	}

	return CSP_ERR_NONE;
 80030e0:	2300      	movs	r3, #0
}
 80030e2:	4618      	mov	r0, r3
 80030e4:	3710      	adds	r7, #16
 80030e6:	46bd      	mov	sp, r7
 80030e8:	bd80      	pop	{r7, pc}
 80030ea:	bf00      	nop
 80030ec:	20000194 	.word	0x20000194

080030f0 <csp_init>:
	.model = "",
	.revision = "",
	.conn_dfl_so = CSP_O_NONE,
	.dedup = CSP_DEDUP_OFF};

void csp_init(void) {
 80030f0:	b580      	push	{r7, lr}
 80030f2:	af00      	add	r7, sp, #0

	/* Validation of version */
	if ((csp_conf.version == 0) || (csp_conf.version > 2)) {
 80030f4:	4b11      	ldr	r3, [pc, #68]	@ (800313c <csp_init+0x4c>)
 80030f6:	781b      	ldrb	r3, [r3, #0]
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d003      	beq.n	8003104 <csp_init+0x14>
 80030fc:	4b0f      	ldr	r3, [pc, #60]	@ (800313c <csp_init+0x4c>)
 80030fe:	781b      	ldrb	r3, [r3, #0]
 8003100:	2b02      	cmp	r3, #2
 8003102:	d902      	bls.n	800310a <csp_init+0x1a>
		csp_conf.version = 2;
 8003104:	4b0d      	ldr	r3, [pc, #52]	@ (800313c <csp_init+0x4c>)
 8003106:	2202      	movs	r2, #2
 8003108:	701a      	strb	r2, [r3, #0]
	}

	/* Validation of dedup */
	if (csp_conf.dedup > CSP_DEDUP_ALL) {
 800310a:	4b0c      	ldr	r3, [pc, #48]	@ (800313c <csp_init+0x4c>)
 800310c:	7d1b      	ldrb	r3, [r3, #20]
 800310e:	2b03      	cmp	r3, #3
 8003110:	d902      	bls.n	8003118 <csp_init+0x28>
		csp_conf.dedup = CSP_DEDUP_OFF;
 8003112:	4b0a      	ldr	r3, [pc, #40]	@ (800313c <csp_init+0x4c>)
 8003114:	2200      	movs	r2, #0
 8003116:	751a      	strb	r2, [r3, #20]
	}

	csp_buffer_init();
 8003118:	f7ff feb2 	bl	8002e80 <csp_buffer_init>
	csp_conn_init();
 800311c:	f7ff ff64 	bl	8002fe8 <csp_conn_init>
	csp_qfifo_init();
 8003120:	f000 f810 	bl	8003144 <csp_qfifo_init>
#if (CSP_USE_RDP)
	csp_rdp_queue_init();
#endif

	/* Loopback */
	csp_if_lo.netmask = csp_id_get_host_bits();
 8003124:	f7ff ff9a 	bl	800305c <csp_id_get_host_bits>
 8003128:	4603      	mov	r3, r0
 800312a:	b29a      	uxth	r2, r3
 800312c:	4b04      	ldr	r3, [pc, #16]	@ (8003140 <csp_init+0x50>)
 800312e:	805a      	strh	r2, [r3, #2]
	csp_iflist_add(&csp_if_lo);
 8003130:	4803      	ldr	r0, [pc, #12]	@ (8003140 <csp_init+0x50>)
 8003132:	f7ff ffa3 	bl	800307c <csp_iflist_add>

}
 8003136:	bf00      	nop
 8003138:	bd80      	pop	{r7, pc}
 800313a:	bf00      	nop
 800313c:	20000010 	.word	0x20000010
 8003140:	20000028 	.word	0x20000028

08003144 <csp_qfifo_init>:

static csp_static_queue_t qfifo_queue __noinit;
static csp_queue_handle_t qfifo_queue_handle __noinit;
char qfifo_queue_buffer[sizeof(csp_qfifo_t) * CSP_QFIFO_LEN] __noinit;

void csp_qfifo_init(void) {
 8003144:	b580      	push	{r7, lr}
 8003146:	af00      	add	r7, sp, #0
	qfifo_queue_handle = csp_queue_create_static(CSP_QFIFO_LEN, sizeof(csp_qfifo_t), qfifo_queue_buffer, &qfifo_queue);
 8003148:	4b05      	ldr	r3, [pc, #20]	@ (8003160 <csp_qfifo_init+0x1c>)
 800314a:	4a06      	ldr	r2, [pc, #24]	@ (8003164 <csp_qfifo_init+0x20>)
 800314c:	2108      	movs	r1, #8
 800314e:	200f      	movs	r0, #15
 8003150:	f7ff fe51 	bl	8002df6 <csp_queue_create_static>
 8003154:	4603      	mov	r3, r0
 8003156:	4a04      	ldr	r2, [pc, #16]	@ (8003168 <csp_qfifo_init+0x24>)
 8003158:	6013      	str	r3, [r2, #0]
}
 800315a:	bf00      	nop
 800315c:	bd80      	pop	{r7, pc}
 800315e:	bf00      	nop
 8003160:	200019c8 	.word	0x200019c8
 8003164:	20001a14 	.word	0x20001a14
 8003168:	20001a10 	.word	0x20001a10

0800316c <csp_qfifo_write>:
		return CSP_ERR_TIMEDOUT;

	return CSP_ERR_NONE;
}

void csp_qfifo_write(csp_packet_t * packet, csp_iface_t * iface, void * pxTaskWoken) {
 800316c:	b580      	push	{r7, lr}
 800316e:	b088      	sub	sp, #32
 8003170:	af00      	add	r7, sp, #0
 8003172:	60f8      	str	r0, [r7, #12]
 8003174:	60b9      	str	r1, [r7, #8]
 8003176:	607a      	str	r2, [r7, #4]

	int result;

	if (packet == NULL) {
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	2b00      	cmp	r3, #0
 800317c:	d103      	bne.n	8003186 <csp_qfifo_write+0x1a>
		csp_dbg_errno = CSP_DBG_ERR_INVALID_POINTER;
 800317e:	4b25      	ldr	r3, [pc, #148]	@ (8003214 <csp_qfifo_write+0xa8>)
 8003180:	220b      	movs	r2, #11
 8003182:	701a      	strb	r2, [r3, #0]
		return;
 8003184:	e042      	b.n	800320c <csp_qfifo_write+0xa0>
	}

	if (iface == NULL) {
 8003186:	68bb      	ldr	r3, [r7, #8]
 8003188:	2b00      	cmp	r3, #0
 800318a:	d10d      	bne.n	80031a8 <csp_qfifo_write+0x3c>
		csp_dbg_errno = CSP_DBG_ERR_INVALID_POINTER;
 800318c:	4b21      	ldr	r3, [pc, #132]	@ (8003214 <csp_qfifo_write+0xa8>)
 800318e:	220b      	movs	r2, #11
 8003190:	701a      	strb	r2, [r3, #0]
		if (pxTaskWoken == NULL)
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	2b00      	cmp	r3, #0
 8003196:	d103      	bne.n	80031a0 <csp_qfifo_write+0x34>
			csp_buffer_free(packet);
 8003198:	68f8      	ldr	r0, [r7, #12]
 800319a:	f7ff feed 	bl	8002f78 <csp_buffer_free>
		else
			csp_buffer_free_isr(packet);
		return;
 800319e:	e035      	b.n	800320c <csp_qfifo_write+0xa0>
			csp_buffer_free_isr(packet);
 80031a0:	68f8      	ldr	r0, [r7, #12]
 80031a2:	f7ff feaf 	bl	8002f04 <csp_buffer_free_isr>
		return;
 80031a6:	e031      	b.n	800320c <csp_qfifo_write+0xa0>
	}

	csp_qfifo_t queue_element;
	queue_element.iface = iface;
 80031a8:	68bb      	ldr	r3, [r7, #8]
 80031aa:	617b      	str	r3, [r7, #20]
	queue_element.packet = packet;
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	61bb      	str	r3, [r7, #24]

	if (pxTaskWoken == NULL)
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d109      	bne.n	80031ca <csp_qfifo_write+0x5e>
		result = csp_queue_enqueue(qfifo_queue_handle, &queue_element, 1);
 80031b6:	4b18      	ldr	r3, [pc, #96]	@ (8003218 <csp_qfifo_write+0xac>)
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f107 0114 	add.w	r1, r7, #20
 80031be:	2201      	movs	r2, #1
 80031c0:	4618      	mov	r0, r3
 80031c2:	f7ff fe2c 	bl	8002e1e <csp_queue_enqueue>
 80031c6:	61f8      	str	r0, [r7, #28]
 80031c8:	e008      	b.n	80031dc <csp_qfifo_write+0x70>
	else
		result = csp_queue_enqueue_isr(qfifo_queue_handle, &queue_element, pxTaskWoken);
 80031ca:	4b13      	ldr	r3, [pc, #76]	@ (8003218 <csp_qfifo_write+0xac>)
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f107 0114 	add.w	r1, r7, #20
 80031d2:	687a      	ldr	r2, [r7, #4]
 80031d4:	4618      	mov	r0, r3
 80031d6:	f7ff fe3c 	bl	8002e52 <csp_queue_enqueue_isr>
 80031da:	61f8      	str	r0, [r7, #28]

	if (result != CSP_QUEUE_OK) {
 80031dc:	69fb      	ldr	r3, [r7, #28]
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d014      	beq.n	800320c <csp_qfifo_write+0xa0>
		csp_dbg_conn_ovf++;
 80031e2:	4b0e      	ldr	r3, [pc, #56]	@ (800321c <csp_qfifo_write+0xb0>)
 80031e4:	781b      	ldrb	r3, [r3, #0]
 80031e6:	3301      	adds	r3, #1
 80031e8:	b2da      	uxtb	r2, r3
 80031ea:	4b0c      	ldr	r3, [pc, #48]	@ (800321c <csp_qfifo_write+0xb0>)
 80031ec:	701a      	strb	r2, [r3, #0]
		iface->drop++;
 80031ee:	68bb      	ldr	r3, [r7, #8]
 80031f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031f2:	1c5a      	adds	r2, r3, #1
 80031f4:	68bb      	ldr	r3, [r7, #8]
 80031f6:	629a      	str	r2, [r3, #40]	@ 0x28
		if (pxTaskWoken == NULL)
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d103      	bne.n	8003206 <csp_qfifo_write+0x9a>
			csp_buffer_free(packet);
 80031fe:	68f8      	ldr	r0, [r7, #12]
 8003200:	f7ff feba 	bl	8002f78 <csp_buffer_free>
 8003204:	e002      	b.n	800320c <csp_qfifo_write+0xa0>
		else
			csp_buffer_free_isr(packet);
 8003206:	68f8      	ldr	r0, [r7, #12]
 8003208:	f7ff fe7c 	bl	8002f04 <csp_buffer_free_isr>
	}
}
 800320c:	3720      	adds	r7, #32
 800320e:	46bd      	mov	sp, r7
 8003210:	bd80      	pop	{r7, pc}
 8003212:	bf00      	nop
 8003214:	20000190 	.word	0x20000190
 8003218:	20001a10 	.word	0x20001a10
 800321c:	20000191 	.word	0x20000191

08003220 <csp_lo_tx>:
/**
 * Loopback interface transmit function
 * @param packet Packet to transmit
 * @return 1 if packet was successfully transmitted, 0 on error
 */
static int csp_lo_tx(csp_iface_t * iface, uint16_t via, csp_packet_t * packet, int from_me) {
 8003220:	b580      	push	{r7, lr}
 8003222:	b084      	sub	sp, #16
 8003224:	af00      	add	r7, sp, #0
 8003226:	60f8      	str	r0, [r7, #12]
 8003228:	607a      	str	r2, [r7, #4]
 800322a:	603b      	str	r3, [r7, #0]
 800322c:	460b      	mov	r3, r1
 800322e:	817b      	strh	r3, [r7, #10]

	/* Send back into CSP, notice calling from task so last argument must be NULL! */
	csp_qfifo_write(packet, &csp_if_lo, NULL);
 8003230:	2200      	movs	r2, #0
 8003232:	4904      	ldr	r1, [pc, #16]	@ (8003244 <csp_lo_tx+0x24>)
 8003234:	6878      	ldr	r0, [r7, #4]
 8003236:	f7ff ff99 	bl	800316c <csp_qfifo_write>

	return CSP_ERR_NONE;
 800323a:	2300      	movs	r3, #0
}
 800323c:	4618      	mov	r0, r3
 800323e:	3710      	adds	r7, #16
 8003240:	46bd      	mov	sp, r7
 8003242:	bd80      	pop	{r7, pc}
 8003244:	20000028 	.word	0x20000028

08003248 <memset>:
 8003248:	4402      	add	r2, r0
 800324a:	4603      	mov	r3, r0
 800324c:	4293      	cmp	r3, r2
 800324e:	d100      	bne.n	8003252 <memset+0xa>
 8003250:	4770      	bx	lr
 8003252:	f803 1b01 	strb.w	r1, [r3], #1
 8003256:	e7f9      	b.n	800324c <memset+0x4>

08003258 <strncmp>:
 8003258:	b510      	push	{r4, lr}
 800325a:	b16a      	cbz	r2, 8003278 <strncmp+0x20>
 800325c:	3901      	subs	r1, #1
 800325e:	1884      	adds	r4, r0, r2
 8003260:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003264:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8003268:	429a      	cmp	r2, r3
 800326a:	d103      	bne.n	8003274 <strncmp+0x1c>
 800326c:	42a0      	cmp	r0, r4
 800326e:	d001      	beq.n	8003274 <strncmp+0x1c>
 8003270:	2a00      	cmp	r2, #0
 8003272:	d1f5      	bne.n	8003260 <strncmp+0x8>
 8003274:	1ad0      	subs	r0, r2, r3
 8003276:	bd10      	pop	{r4, pc}
 8003278:	4610      	mov	r0, r2
 800327a:	e7fc      	b.n	8003276 <strncmp+0x1e>

0800327c <__libc_init_array>:
 800327c:	b570      	push	{r4, r5, r6, lr}
 800327e:	4d0d      	ldr	r5, [pc, #52]	@ (80032b4 <__libc_init_array+0x38>)
 8003280:	4c0d      	ldr	r4, [pc, #52]	@ (80032b8 <__libc_init_array+0x3c>)
 8003282:	1b64      	subs	r4, r4, r5
 8003284:	10a4      	asrs	r4, r4, #2
 8003286:	2600      	movs	r6, #0
 8003288:	42a6      	cmp	r6, r4
 800328a:	d109      	bne.n	80032a0 <__libc_init_array+0x24>
 800328c:	4d0b      	ldr	r5, [pc, #44]	@ (80032bc <__libc_init_array+0x40>)
 800328e:	4c0c      	ldr	r4, [pc, #48]	@ (80032c0 <__libc_init_array+0x44>)
 8003290:	f000 f826 	bl	80032e0 <_init>
 8003294:	1b64      	subs	r4, r4, r5
 8003296:	10a4      	asrs	r4, r4, #2
 8003298:	2600      	movs	r6, #0
 800329a:	42a6      	cmp	r6, r4
 800329c:	d105      	bne.n	80032aa <__libc_init_array+0x2e>
 800329e:	bd70      	pop	{r4, r5, r6, pc}
 80032a0:	f855 3b04 	ldr.w	r3, [r5], #4
 80032a4:	4798      	blx	r3
 80032a6:	3601      	adds	r6, #1
 80032a8:	e7ee      	b.n	8003288 <__libc_init_array+0xc>
 80032aa:	f855 3b04 	ldr.w	r3, [r5], #4
 80032ae:	4798      	blx	r3
 80032b0:	3601      	adds	r6, #1
 80032b2:	e7f2      	b.n	800329a <__libc_init_array+0x1e>
 80032b4:	08003330 	.word	0x08003330
 80032b8:	08003330 	.word	0x08003330
 80032bc:	08003330 	.word	0x08003330
 80032c0:	08003334 	.word	0x08003334

080032c4 <memcpy>:
 80032c4:	440a      	add	r2, r1
 80032c6:	4291      	cmp	r1, r2
 80032c8:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 80032cc:	d100      	bne.n	80032d0 <memcpy+0xc>
 80032ce:	4770      	bx	lr
 80032d0:	b510      	push	{r4, lr}
 80032d2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80032d6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80032da:	4291      	cmp	r1, r2
 80032dc:	d1f9      	bne.n	80032d2 <memcpy+0xe>
 80032de:	bd10      	pop	{r4, pc}

080032e0 <_init>:
 80032e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80032e2:	bf00      	nop
 80032e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80032e6:	bc08      	pop	{r3}
 80032e8:	469e      	mov	lr, r3
 80032ea:	4770      	bx	lr

080032ec <_fini>:
 80032ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80032ee:	bf00      	nop
 80032f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80032f2:	bc08      	pop	{r3}
 80032f4:	469e      	mov	lr, r3
 80032f6:	4770      	bx	lr
